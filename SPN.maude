in PT-NET
in TLAB

*** Stochastic Petri Net

*** theory of a stochastic transition label
fth STLAB is 
 pr FLOAT .
 pr NAT . 
 sorts Lab Tag .
 op rate : Lab -> Float . *** rate parameter
 op pol  : Lab -> Nat . *** firing policy
 op tag  : Lab -> Tag . *** any tag
endfth

view STLAB from TRIV to STLAB is
  sort Elt to Lab . 
endv

*** view TRIV* from TRIV to TRIV is
*** endv 

*** spn parameterized in node labels
fmod SPN-GEN{L :: STLAB, PL :: TRIV} is
  pr PT-NET{STLAB, Triv}{L, PL} .
  pr CONVERSION .
  vars M M' : Pbag .
  vars P P' : Place . 
  var L : L$Lab .
  var Q : Tmatrix .
  var T : Tran .
  vars K K' D : NzNat .
  *** firing rule rates
  op firing-rate : Tran Pbag -> [Float] . *** alternative (marking dependent, e.g., based on the transition firing pol)
  *** eq firing-rate(T, M) = rate(T) . *** 1-server for all
  eq firing-rate(L |-> Q, M) = if pol(L) == 1 then rate(L) else rate(L) * float(if pol(L) == 0 
                           then enabdegree(I(Q), M) else min(pol(L), enabdegree(I(Q), M)) fi) fi .
  *** definition of enabdegree: assumes that T is enabled in M
  op enabdegree : Pbag Pbag -> [NzNat] .
  eq enabdegree(nilP, M) = 1 . *** the input arc is null
  eq enabdegree(B:NePbag, M) = $enabdegree(B:NePbag, M, 1000000000000000) .
  op $enabdegree : Pbag Pbag NzNat -> [NzNat] .  
  eq $enabdegree(K . P + M , K' . P + M', D) = $enabdegree(M , M', min(D, K' quo K)) .
  eq $enabdegree(nilP, M, D) = D . 
  *** getters
  op tag  : Tran -> L$Tag .
  op rate : Tran -> Float .
  op pol  : Tran -> Nat .
  eq tag(T) = tag(l(T)) .
  eq rate(T) = rate(l(T)) .
  eq pol(T) = pol(l(T)) .
endfm

view Stlab from STLAB to TLAB is 
 sort Lab to Tlab .
 sort Tag to String .
endv

*** spn definition based on TLAB and Nat
fmod SPN is
  pr SPN-GEN{Stlab, Nat} .
endfm


view System from TRIV to SPN is 
 sort Elt to System . 
endv

view Net from TRIV to SPN is 
 sort Elt to Net . 
endv