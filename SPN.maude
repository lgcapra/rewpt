in PT-NET

*** Stochastic Petri Net
*** rappresentazione simile ma piÃ¹ intuitiva di modSPT


*** spn transition label definition (parametric in the tag description)
fmod TLAB{L :: TRIV} is
 pr FLOAT .
 pr NAT .
 sort Tlab .
 var W  : L$Elt .
 var R  : Float .
 var P  : Nat .  
 op t : L$Elt Float Nat -> Tlab [ctor] . 
 op tag :  Tlab  -> L$Elt .
 op pol :  Tlab  -> Nat .
 op rate : Tlab  -> Float .
 eq tag(t(W,R,P))  =  W .
 eq pol(t(W,R,P))  =  P .
 eq rate(t(W,R,P)) =  R .
endfm

view Tlab{L :: TRIV} from TRIV to TLAB{L} is 
 sort Elt to Tlab .
endv

*** spn signature parameterized in tran labels: for some reasons, we cannot use the TRIV view to parameterize also place labels 
fmod SPN-SIG{L :: TRIV, PL :: TRIV} is
  pr PT-NET{Tlab{L}, PL}  .
  pr CONVERSION .
  vars M M' : Pbag .
  vars P P' : Place{PL} . 
  var TL : Tlab .
  var Q : Tmatrix .
  var T : Tran .
  vars F F' : Float .
  vars K K' D : NzNat .
  *** firing rule rates
  op firingRate : Tran Pbag -> [Float] . *** alternative (marking dependent, e.g., based on the transition firing pol)
  *** eq firingRate(T, M) = rate(T) . *** 1-server for all
  eq firingRate(TL |-> Q, M) = if pol(TL) == 1 then rate(TL) else rate(TL) * float(if pol(TL) == 0 
                           then enabDegree(I(Q), M) else min(pol(TL), enabDegree(I(Q), M)) fi) fi .
  *** definition of enabDegree: assumes that T is enabled in M
  op enabDegree : Pbag Pbag -> [NzNat] .
  eq enabDegree(nilP, M) = 1 . *** the input arc is null
  eq enabDegree(B:NePbag, M) = $enabDegree(B:NePbag, M, 1000000000000000) .
  op $enabDegree : Pbag Pbag NzNat -> [NzNat] .  
  eq $enabDegree(K . P + M , K' . P + M', D) = $enabDegree(M , M', min(D, K' quo K)) .
  eq $enabDegree(nilP, M, D) = D . 
  *** getters
  op tag  : Tran -> L$Elt .
  op rate : Tran -> Float .
  op pol  : Tran -> Nat .
  eq tag(T) = tag(l(T)) .
  eq rate(T) = rate(l(T)) .
  eq pol(T) = pol(l(T)) .
  *** set a transition's rate
  var L : L$Elt . var I : Nat . var N : Net .
  op setRate : Tran Float -> Tran . *** change a transition's rate
  eq setRate(t(L, F, I) |-> Q, F') = t(L, F', I) |-> Q .
  op in : Net L$Elt -> Bool . *** cheks that a Net contains an action with the specified tag
 ceq in(T ; N, L) = true if tag(T) = L .
  eq in(N, L) = false [owise] .

endfm

*** generic spn def
fmod SPN-GEN{L :: TRIV, PL :: TRIV} is
  pr (SPN-SIG{L, PL} + PT-SYS{Tlab{L}, PL}) * (sort Set{Tlab{L}} to Set{Tlab}, sort NeSet{Tlab{L}} to NeSet{Tlab}).
endfm

*** concrete spn definition based on TLAB (and String) as node labels
fmod SPN is
  pr SPN-GEN{String, String} . *** makes sense because it's a "final" module
endfm

*** views to SPN
view System from TRIV to SPN is 
 sort Elt to System . 
endv

view Net from TRIV to SPN is 
 sort Elt to Net . 
endv