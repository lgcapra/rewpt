in FTPL-SYS-LMC

*** rewritable PL system model for LCTMC 
mod RWPT-FTPL-LMC is
 pr  FTPL-SYS-LMC .
 vars N N' N'' : Net .
 vars P0 P1 P2 P3 P4 P5 P6 P7 : Place .
 vars S S' S'' : Pbag .
 var K : NzNat .
 vars I Imin J : Nat .
 var W : String .
 vars L L' L0 L1 L2 L3 L4 L5 L6 L7 : Lab .
 var Sys Sys' : System .
 var Sp : Pset .


*** NEW we compute the rewrite instances for each of the two rewrite rules of the PL system example
*** le regole sono più semplici delle precedenti (compaiono meno variabili, ad es. non c'è S'')
var P : Place .
var X : Pset .
*** 1st rule
op rew1Instances : System -> Pset [memo] . *** the different instances of (free) variable I used in the rule (we should consider also J and L, i.e., the place)
op $rew1Instances : Pbag Pset -> Pset .
*** eq rew1Instances(N S) = if dead(N S) then $rew1Instances(S, emptyPset) else emptyPset fi .  *** comment/uncomment if needed
eq $rew1Instances(nilP, X) = X .
*** ceq $rew1Instances(S + 1 . P, X) = $rew1Instances(S, P U X) if p(< "f" ; J > L < "PL" ; I >) := P .  *** comment/uncomment if needed
eq $rew1Instances(S + K . P, X) = $rew1Instances(S, X) [owise] . 

*** rule1 triggered by a local deadlock (comment to go back to the version triggered by a global deadlock)
eq rew1Instances(N S) = $rew1Instances(S, emptyPset)  .
ceq $rew1Instances(S + 1 . P, X) = $rew1Instances(S, P U X) if p(< "f" ; J > L < "PL" ; I >) := P /\ dead (nomPL(I) S + 1 . P) .

*** alternatine rephrasing of rew1 based on instance pre-calculation (for both versions)
*** crl [rew1.1Alt] : N S => normalize(rule1(N S, P),"fPL") if P U X := rew1Instances(N S) .

*** 2nd rule
op rew2Instances : System -> Pset [memo] . 
eq rew2Instances(N S) = $rew2Instances(N S, S, emptyPset)  .
op $rew2Instances : System Pbag Pset -> Pset .
eq $rew2Instances(Sys, nilP, X) = X .
ceq $rew2Instances(N S, S' + 1 . P, X) = $rew2Instances(N S, S', P U X) if p(< "f" ; J > L < "fPL" ; I >) := P  /\ dead(faultyPL(I) S) /\ detache(N, faultyPL(I)) =/= emptyN . 
eq $rew2Instances(Sys, S + K . P, X) = $rew2Instances(Sys, S, X) [owise] . 
*** alternatine rephrasing of rew2 based on instance pre-calculation
*** crl [rew2.1Alt] : N S => normalize(rule2(N S, P), "PL")  if P U X := rew2Instances(N S) .

*** reproduce the execution of the two rules (first single instances then the entire set of instances)
op rule1 : System Place -> [System] .
ceq rule1(N S, p(L < "PL" ; I >)) = join(detache(N, nomPL(I)) S - S', setMark(setMark(faultySys(minNotIn(N, "fPL")), "w" "fPL", | match(S', "w") |), "a" "fPL", | match(S', "a") |))   
   if  S' := subag(S, < "PL" ; I >) .

op rule2 : System Place -> [System] .
ceq rule2(N S, p(L < "fPL" ; I >)) = detache(N, faultyPL(I)) set(S - S', p(< "s" ; 0 >), S[p(< "s" ; 0 >)] + (| S' | - 1))  if S' := subag(S, < "fPL" ; I >) .

***
var R  : RuleSet .
var RS : Rset .
ops labr1 labr2 : -> Tlab [memo]. *** rew labs (including rates)
eq labr1 = << "R1",0,1.0 >> . 
eq labr2 = << "R2",0,2.0 >> .
*** given a PT system term and the set of instances of rule 1, calculates the set of groups of equivalent state transitions due to rule 1 
op r1exe : System Pset -> [Rset] .
eq r1exe(Sys, X) = $r1exe(Sys, X, emptyRset) .
op $r1exe : System Pset Rset -> [Rset] .
eq $r1exe(Sys, emptyPset, RS) = RS .
ceq $r1exe(Sys, P U X, (RS , R --> Sys') ) = $r1exe(Sys, X, (RS , R + 1 .  labr1 --> Sys' )) if Sys' := normalize(rule1(Sys, P)) .
 eq $r1exe(Sys, P U X, RS ) = $r1exe(Sys, X, (RS , 1 .  labr1 --> normalize(rule1(Sys, P))) ) [owise] .
*** the same for rule 2
op r2exe : System Pset -> [Rset] .
eq r2exe(Sys, X) = $r2exe(Sys, X, emptyRset) .
op $r2exe : System Pset Rset -> [Rset] .
eq $r2exe(Sys, emptyPset, RS) = RS .
ceq $r2exe(Sys, P U X, (RS , R --> Sys') ) = $r2exe(Sys, X, (RS , R + 1 .  labr2 --> Sys' )) if Sys' := normalize(rule2(Sys, P)) .
 eq $r2exe(Sys, P U X, RS ) = $r2exe(Sys, X, (RS , 1 .  labr2 --> normalize(rule2(Sys, P))) ) [owise] .
 *** cumulative calculation of state transitions due to R1 and R2
 op allRew : System -> Rset [memo] .
 eq allRew(Sys) = r1exe(Sys, rew1Instances(Sys)) , r2exe(Sys, rew2Instances(Sys)) .

 *** equivalent rewrites based on pre-calculation of rewrite instances
 *** crl [R1] : Sys => Sys' if  RS , R --> Sys' := r1exe(Sys, rew1Instances(Sys)) .
 *** crl [R2] : Sys => Sys' if  RS , R --> Sys' := r2exe(Sys, rew2Instances(Sys)) .
endm  
