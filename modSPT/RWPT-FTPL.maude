in FTPL-SYS
in PT-NORM

*** stochastic rewritable PL system model
mod RWPT-FTPL is
 pr FTPL-SYS .
 pr PT-NORM{SPTlab} .
 vars N N' N'' : Net .
 vars Tload Tfail Tfail1 Tfail2 Tass Tline Tline1 Tline2  : String .
 vars P0 P1 P2 P3 P4 P5 P6 P7 : Place .
 vars S S' S'' : Pbag .
 var K : NzNat .
 vars I Imin J : Nat .
 var W : String .
 vars L L' L0 L1 L2 L3 L4 L5 L6 L7 : Lab .
 var Sys Sys' : System .
 var Sp : Pset .

*** the rule syr1 replaces a nominal PL with a faulty one: is correct (symmetric) but doesn't match the normalization requirements
***crl [syr1] : N S + 1 . P7 => ( N' ; [2 . P1, 2 . P2, nilP] |-> Tload ;  [2 . P4, 2 . P1, nilP] |-> Tass  ) set(S, P3, 0) + S[P3] . P2 + 1 . P0 
***       if (N' ; [2 . P1, 1 . P2 + 1 . P3, nilP ] |-> Tload  ; [1 . P3, 1 . P5, 1 . P7] |-> Tline2 ; [1 . P4 + 1 . P5, 2 . P1, nilP ] |-> Tass  ;[1 . P0, 1 . P7, nilP] |-> Tfail2 ) := N /\ dead(N S + 1 . P7)  .
*** alternative rule coherent with normalization
*** more readable
*** crl [rew1.1] : N  S => join(Sys, setMark(setMark(Sys', "w" "fPL", | match(S', "w") |), "a" "fPL", | match(S', "a") |))   
***     if  dead (N S) /\ S'' + 1 . p(< "f" ; J > L < "PL" ; I >) := S /\ S' := subag(S'', < "PL" ; I >) /\ Sys := detache(N, nomPL(I)) S'' - S' /\ Sys' := faultySys(minNotIn(N, "fPL"))  .
*** paper's version
*** crl [rew1.1p] : N  S => normalize(setMark(setMark(attach(N', faultyPL, "fPL") S'' - S', "w" "fPL", | match(S', "w") |), "a" "fPL", | match(S', "a") |),"fPL")   
  *** if  dead (N S) /\ S'' + 1 . p(< "f" ; J > L < "PL" ; I >) := S /\ S' := subag(S'', < "PL" ; I >) /\ N' := detache(N, < "PL" ; I >)  .
*** triggered by a local deadlock
crl [rew1.2] : N S => join(Sys, setMark(setMark(Sys', "w" "fPL", | match(S', "w") |), "a" "fPL", | match(S', "a") |))   
      if  S'' + 1 . p(< "f" ; J > L < "PL" ; I >) := S /\ N' := nomPL(I) /\ dead (N' S) /\ S' := subag(S'', < "PL" ; I >) /\ Sys := detache(N, N') S'' - S' /\ Sys' := faultySys(minNotIn(N, "fPL"))  .


*** syr2 removes a faulty PL after a 2nd fault occurrence (analogous considerations to syr1)
***crl [syr2] : N  S + 1 . P6  => N' (set(set(S, P1, S[P1] + S[P2] + S[P4]), P2, 0)) - 1 . P4 if (N' ; [1 . P0, 1 . P6, nilP] |-> Tfail1 ; [2 . P1, 2 . P2, nilP] |-> Tload  ; [1 . P2, 1 . P4, 1 . P6] |-> Tline1 ; [2 . P4, 2 . P1, nilP ] |-> Tass ) := N  /\ N' =/= emptyN /\
***  dead(([2 . P1, 2 . P2, nilP] |-> Tload ; [2 . P4, 2 . P1, nilP ] |-> Tass) S) .
*** version coherent with normalization
*** more readable
crl [rew2.1] : N S => N'' set(S'' - S', p(< "s" ; 0 >), S[p(< "s" ; 0 >)] + | S' |)  if 
        S'' + 1 . p(< "f" ; J > L < "fPL" ; I >) :=  S /\ N' := faultyPL(I) /\  dead(N' S)  /\ N'' := detache(N, N') /\ N'' =/= emptyN  /\
        S' := subag(S'', < "fPL" ; I >) .
*** paper's version
***crl [rew2p] : N S => normalize(setMark(N'' S'' - S', "s" , | match(S, "s") | + | S' | ), "PL")  if 
***   S'' + 1 . p(< "f" ; J > L < "fPL" ; I >) :=  S /\  dead(faultyPL(I) S)  /\ N'' := detache(N, < "fPL" ; I >) /\ N'' =/= emptyN  /\
***   S' := subag(S'', < "fPL" ; I >) . 

*** marking abstractions (derived from readable versions)
*** crl [ar1] : N  nilP => normalize(joinAbs(Sys, Sys'))   
***    if  p(L < "PL" ; I >) U Sp := places(N) /\ Sys := detache(N, nomPL(I)) nilP /\ Sys' := faultySys(minNotIn(N, "fPL"))  .
*** crl [ar2] : N nilP =>  normalize(N'' nilP) if p(L < "fPL" ; I >)  U Sp := places(N) /\ N' := faultyPL(I) /\  N'' := detache(N, N') /\ N'' =/= emptyN .
*** (paper versions)
*** crl [ar1p] : N nilP => normalize(attach(N', faultyPL, "fPL") nilP)  if  p(L < "PL" ; I >) U Sp := places(N) /\ N' := detache(N, < "PL" ; I >)  .
*** crl [ar2p] : N nilP => normalize(N'' nilP)  if p(L < "fPL" ; I >)  U Sp := places(N) /\  N'' := detache(N, < "fPL" ; I >) /\ N'' =/= emptyN  .


endm  
