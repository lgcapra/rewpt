*** theory of SPN rules' encoding as operators
fth SPN-RULE is 
 *** pr MAP+{SpnSys,Float} * (sort Entry{SpnSys,Float} to Entry{System,Float}, sort Map{SpnSys,Float} to Map{System,Float}, 
 ***                           op emptyM to emptyMSF, op _|->_ to _<-|_ ) .
 pr SET+{String} .
 pr FLOAT .
 op  rule-labs  : -> Set{String} .
 sort StateRate State .
 op st : StateRate ->  State .
 op r  : StateRate ->  Float .
 op rule : String State -> [StateRate] .
endfth

*** rewritable PL system model for LCTMC 
fmod SPN-TO-LMC{X :: SPN-RULE} is
 pr MAP+{SpnSys,Float} * (sort Entry{SpnSys,Float} to Entry{System,Float}, sort Map{SpnSys,Float} to Map{System,Float}, op emptyM to emptyMSF, op _|->_ to _<-|_ ) .
 *** pr SET+{String} .
 
 vars N N' N'' : Net .
 vars S S' S'' : Pbag .
 var K : NzNat .
 vars I Imin J K' K'' : Nat .
 var W : String .
 var L : Lab .
 var Sys  : System .
 var Sys' : [System] .
 var P : Place .
 var X : Pset .
 vars R F : Float .
 vars RS SF : Map{System,Float} .
 
 *** operators encoding rules
 *** works if encoded rules are "injective" (distinct matches result in different terms, disregarding normalization) 

 op toEntry : X$StateRate -> Entry{System,Float} .
 var SR : X$StateRate .
 eq toEntry(SR) = st(SR) <-| r(SR) .
*** application of a rule (partial operation) without normalization
op ruleApp : String System -> [Map{System,Float}] .
eq ruleApp(W, Sys) =  $ruleApp(W, Sys, emptyMSF) .
op $ruleApp : String System Map{System,Float} -> [Map{System,Float}] .
ceq $ruleApp(W, Sys, SF) = $ruleApp(W, Sys, SF ; Sys' <-| F) if Sys' <-| F := toEntry(rule(W, Sys)) /\ Sys' :: System  /\ $hasMapping(SF, Sys') = false . 
eq $ruleApp(W, Sys, SF) = SF [owise] .

*** bulk application of a rule, including normalization and partitioning of rewrites based on rates 
 op rulexe : String System -> Map{System,Float} .
 eq rulexe(W, Sys) = $rulexe(ruleApp(W, Sys), emptyMSF) .
 op $rulexe : Map{System,Float} Map{System,Float} -> Map{System,Float} .
 eq $rulexe(emptyMSF, RS) = RS .
ceq $rulexe( Sys <-| F ; SF, RS ; Sys' <-| R) = $rulexe(SF, RS ; Sys' <-| R + F ) if Sys' := normalize(Sys) .
 eq $rulexe( Sys <-| F ; SF, RS) = $rulexe(SF, RS ; normalize(Sys) <-| F) [owise] .

*** application of all (injective) rules 
 vars Z Y : Set{String} .
 op allRew : System -> Map{System,Float} [memo] .
 eq allRew(Sys) = $allRew(Sys, rule-labs, emptyMSF) .
 op $allRew : System Set{String} Map{System,Float} -> Map{System,Float} .
 eq $allRew(Sys, emptyS, RS) = RS .
 eq $allRew(Sys, W U Z, RS) = $allRew(Sys, Z, rulexe(W, Sys) ; RS) .

endfm  
