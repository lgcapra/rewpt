in FIRING
in REWRITE
in PT-NORM
*** state-transition representation for SPN (GSPN) pointing out state-transitions due to firing rule -- suitable to translation into a LCTMC 
fmod STATE-TRAN-SYS is 
  pr PT-NORM{SPTlab} .
  pr SET{RewGroup} * (sort Set{RewGroup} to Rset, sort NeSet{RewGroup} to NeRset, op empty to emptyRset) .
  
  sort StateTranSys .
  var  L : Tlab .
  var  T : Tran .
  var  R : RuleSet .
  var  ST :  StateTranSys .
  vars N N'  : Net .
  vars M M'  : Pbag .
  vars FS RS : Rset .
  
  *** description of a system pointing out (symbolic)state-transitions (2nd part, the prefix is the non-enabled net + marking)
  op NET:_ M:_ FIRING:_REW:_ : Net Pbag Rset Rset -> StateTranSys [ctor format (n d n d n d n d d)] .
  *** getters
  op net : StateTranSys -> Net .
  eq net(NET: N M: M FIRING: FS REW: RS) = N .
  op m : StateTranSys -> Pbag .
  eq m(NET: N M: M FIRING: FS REW: RS) = M .
  op fi : StateTranSys -> Rset . *** the set of firing instances, grouped into (equivalence) classes
  eq fi(NET: N M: M FIRING: FS REW: RS) = FS .
  op rew : StateTranSys -> Rset . *** the set of rewrite instances, grouped into (equivalence) classes
  eq rew(NET: N M: M FIRING: FS REW: RS) = RS .

  *** OPERATORE ASTRATTO (DOVREBBE ESSERE DEFINITO DA UNA TEORIA)
  op allRew : System -> Rset [memo] .

  *** to pass from a  representation to the other
  op toStateTran : System -> StateTranSys . *** main operator: builds the (symbolic) state-stransition view for a PT with priorities
  eq toStateTran(N M) = NET: N  M: M FIRING: fire(enabled(N M), M) REW: allRew(N M) . *** very intuitive
  op toStateTranSPN : System -> StateTranSys . *** no priorities
  eq toStateTranSPN(N M) = NET: N  M: M FIRING: fire(haveConcession(N M), M) REW: allRew(N M) . *** very intuitive
  op toSystem : StateTranSys -> System .
  eq toSystem(NET: N M: M FIRING: FS REW: RS) = N M .
   *** calculates the firings (state-transitions) of a set of (enabled) transitions (seen as a net)
  op fire : Net Pbag -> Rset .
  eq fire(N, M) = $fire(N, M, emptyRset) .
  op $fire : Net Pbag Rset -> Rset .
  eq  $fire(emptyN, M, FS) = FS .
 ceq $fire(T ; N, M, (R --> emptyN M', FS)) =  $fire(N, M, (1 . lab(T) + R  --> emptyN M', FS)) if  M' := normalize(fire(t(T), M)) .
  eq $fire(T ; N, M, FS) =  $fire(N, M, (1 . lab(T)  --> emptyN normalize(fire(t(T), M)), FS)) [owise] .
  
endfm