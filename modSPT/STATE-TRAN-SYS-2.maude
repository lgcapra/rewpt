in GSPN-SYSREW-LMC-2

*** state-transition representation for SPN (GSPN) pointing out state-transitions due to firing rule -- suitable to translation into a LCTMC 
*** alternative: equivalent firings are described as Array{Pbag,Float0}, equivalent rewrites as Array{System,Float0}
fmod STATE-TRAN-SYS{X :: GSPN-SYSREW-LMC} is 
  pr ARRAY{Pbag,Float0}* (sort Entry{Pbag,Float0} to Fclass, sort Array{Pbag,Float0} to Fset, op empty to emptyFset, op _|->_ to _<-|_ ) .
  
  sort StateTranSys .
  var T  : Tran .
  var N  : Net .
  var FS : Fset .
  var RS : Rset .
  var R :  Float .
  vars M M' : Pbag .
  
  *** description of a system pointing out (symbolic)state-transitions (2nd part, the prefix is the non-enabled net + marking)
  op NET:_ M:_ FIRING:_REW:_ : Net Pbag Fset Rset -> StateTranSys [ctor format (n d n d n d n d d)] .
  *** getters
  op fi : StateTranSys -> Fset . *** the set of enabled state-transitions, grouped into (equivalence) classes
  eq fi(NET: N M: M FIRING: FS REW: RS) = FS .
  op net : StateTranSys -> Net .
  eq net(NET: N M: M FIRING: FS REW: RS) = N .
  op m : StateTranSys -> Pbag .
  eq m(NET: N M: M FIRING: FS REW: RS) = M .
  op rew : StateTranSys -> Rset .
  eq rew(NET: N M: M FIRING: FS REW: RS) = RS .

  *** to pass from a  representation to the other
  op toStateTran : System -> StateTranSys . *** main operator: builds the (symbolic) state-stransition view for a PT with priorities
  eq toStateTran(N M) = NET: N  M: M FIRING: fire(enabled(N M), M) REW: allRew(N M) . *** very intuitive
  op toStateTranSPN : System -> StateTranSys . *** no priorities
  eq toStateTranSPN(N M) = NET: N  M: M FIRING: fire(haveConcession(N M), M) REW: allRew(N M) . *** very intuitive
  op toSystem : StateTranSys -> System .
  eq toSystem(NET: N M: M FIRING: FS REW: RS) = N M .
   *** calculates the firings (state-transitions) of a set of (enabled) transitions (seen as a net)
  op fire : Net Pbag -> Fset .
  eq fire(N, M) = $fire(N, M, emptyFset) .
  op $fire : Net Pbag Fset -> Fset .
  eq  $fire(emptyN, M, FS) = FS .
 ceq $fire(T ; N, M, M' <-| R ; FS) =  $fire(N, M, M' <-| rate(lab(T)) + R ; FS) if  M' := normalize(fire(q(T), M)) .
  eq $fire(T ; N, M, FS) =  $fire(N, M, normalize(fire(q(T), M)) <-| rate(lab(T)) ; FS) [owise] .

endfm