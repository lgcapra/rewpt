*** signature of (stochastic) PT with priorities 
in SPN

fmod GSPN is 
  pr SPN * (op policy to prio) . *** the policy is meant as priority
  var Q Q' : Tmatrix .
  vars T T' : Tran .
  var L : Tlab .
  vars N N' N'' : Net .
  vars M M' : Pbag .
  *** checks whether a system's  transition is enabled (undefined if the transition doesn't exist)
  op enabled : Tran System -> [Bool] .
 ceq enabled(T, (T ; T' ; N) M) = false if prio(T) < prio(T') /\ hasConcession(T', M) .
  eq enabled(T, (T ; N) M) = hasConcession(T, M) [owise] .
  *** computes the system's enabled transitions (seen as a Net) by considering priorities
  op enabled : System -> Net .
  *** first calculates (recursively) the highest-priority subnet -- more efficient if priority trans. are present
  eq enabled(emptyN M) = emptyN .
 ceq enabled(N M) = if N'' == emptyN then enabled(detache(N, N') M) else N'' fi  if N =/= emptyN /\ N' := highPrio(N) /\ N'' := haveConcession(N' M) .
  *** calculates the higher priority transitions of a Net (seen as a Net in turn)
  op highPrio : Net -> Net .
  eq highPrio(emptyN) = emptyN .
  eq highPrio(T ; N) = $highPrio(N, T) .
  op $highPrio : Net Net -> Net .
  eq $highPrio(emptyN, N) = N .
  eq $highPrio(T ; N, T' ; N') = if prio(T) > prio(T') then $highPrio(N, T) else if prio(T) < prio(T') then $highPrio(N, T' ; N') else $highPrio(N, T ; T' ; N') fi fi .

endfm

*** trivial views

view Gspn from TRIV to GSPN is 
 sort Elt to Net .
endv

view GspnSys from TRIV to GSPN is 
 sort Elt to System .
endv