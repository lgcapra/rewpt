*** a new, more effective net representation
in TMATRIX
*** in ../shared/MAP+
in ../shared/MAP-SET

*** signature of a PT net (system) : a net is a map Tmatrix -> X (the parameter is the transition label)
fmod PT-NET{X :: TRIV} is
 pr MAP-SET{Tmatrix,X} * (sort Map{Tmatrix,X} to Net, sort Entry{Tmatrix,X} to Tran,
                            op emptyM to emptyN, op emptyS to emptyTset) .
 pr SET+{X} * (op emptyS to emptyStlab) .

 vars N N' N'' : Net .
 vars T T' : Tran .
 vars P P' P'' : Place .
 vars Y J  : Nat .
 vars K K' : NzNat .
 vars I O H B M : Pbag .
 vars Q Q' : Tmatrix . 
 var PS : Pset .
 var W :  String .
 var WL : List{String} .
 var NWL : NeList{String} .
 var Lab : Lab .
 var NeL : NeLab .
 var L : X$Elt . *** tran. lab
 var Z  : Set{X} .
 var Sys : System .
 
 sorts ElSys System .
 subsorts ElSys < System . *** PT system built of one Tran 
 op __ : Net Pbag  -> System    [ctor] .
 op __ : Tran Pbag  -> ElSys    [ctor] .
 
 op emptySys  : -> System [memo] . *** alias
 eq emptySys = emptyN nilP .
 
 *** getters
 op lab : Tran -> X$Elt .
 eq lab(Q |-> L) = L .
 op q : Tran -> Tmatrix .
 eq q(Q |-> L) = Q .
 
 op net : System -> Net . 
 op marking : System -> Pbag .
 eq net(N M) = N .
 eq marking(N M) = M .
    
 *** structurally dead Tran
 op dead : Tran -> Bool .   
 eq dead(Q |-> L) = dead(Q) .
 
 *** test the existence of a net Place
 op in :  Net Place -> Bool . 
ceq in(Q |-> L ; N, P) = true if in (Q, P) .
 eq in(N, P) = false [owise] .

 *** test the existence of a Tran
 op in :  Net Tmatrix -> Bool . 
 eq in(N, Q) = $hasMapping(N, Q) .
 op in : Net Tran -> Bool .
 eq in(N ; T, T) = true .
 eq in(N , T) = false [owise] .

 *** transition topological enabling
 op hasConcession : Tran Pbag  -> Bool .
 eq hasConcession(Q |-> L,  M) = hasConcession(Q, M) .
 *** eq hasConcession([I,O,H] |-> L, B) = I <= B and-then H > B .
*** net's transition topological  enabling (partial operation: defined if the Tran belongs to the net
 op hasConcession : Tran System -> [Bool] .
 eq hasConcession(T, (T ; N) M) = hasConcession(T, M) .
 
 *** checks for a system deadlock
 op dead : System -> Bool . 
ceq dead((T ; N) M) = false if hasConcession(T, (T ; N) M) .
 eq dead(N M) = true [owise] .
 
 *** tests the existence of a place
 op in :  System Place -> Bool . 
 eq in(N M, P) =  M[P] =/= 0 or-else in(N, P).
 *** system's places: assumes that it is the same as net's places
 op places : System -> Pset .
 eq places(N M) = places(N) .
 *** gets out the places whose labels match the given prefix 
 op places : System List{String} -> Pset .
 eq places(N M, WL) = places(N, WL) .
 
*** add a new label to a system's places
 op addLab : System Lab -> System .
 eq addLab(N M, Lab) = addLab(N, Lab) addLab(M, Lab) .
 *** version specifying shared elements (helpful!)
 op addLab : System Lab Pset -> System .
 eq addLab(N M, Lab, PS) = addLab(N, Lab, PS) addLab(M, Lab, PS) .
 *** defined for convenience
 op addLab : System Lab List{String} -> System .
 eq addLab(Sys, Lab, WL) = addLab(Sys, Lab, places(Sys, WL)) . 
 
 *** clears the system's marking by removing non encoded places
 op clearupM : System -> System .
ceq clearupM(N K . P + M) = clearupM(N M) if in(N, P) == false .
 eq clearupM(X:System) = X:System [owise] .

 *** remove some places
 op remove :  System Pset -> System .
 eq remove(N M, PS) = remove(N, PS) remove(M, PS) .

  *** derived version 
 op replaceWith : System NeLab Nat -> System .
 eq replaceWith(N M, NeL, J) = replaceWith(N, NeL, J) replaceWith(M, NeL, J) .

 *** 
 op subsys : System NeLab -> System .
 eq subsys(N M, NeL) = subnet(N, NeL) subag(M, NeL) .
 *** si dovrebbero definire anche le versioni overloaded di subsys a matchsys
 
 *** transition firing effect (without checking the enabling)
 op firing : Tran Pbag -> Pbag .
 eq firing([I,O,H] |-> L, B) = B + O - I .
 
*** gets out the places of the net
 op places : Net -> Pset [memo] .
 eq places(N) = $places(N, emptyPset) .  
 op $places : Net Pset -> Pset . 
 eq $places(emptyN, PS) = PS . 
 eq $places(Q |-> L ; N, PS) = $places(N, PS U places(Q)) .
 
 *** extract the subnet matching a given suffix ()
 op subnet : Net NeList{String} -> Net .
 eq subnet(N, NWL) = $subnet(N, NWL, emptyN) .  
 op $subnet : Net NeList{String} Net -> Net . 
 eq $subnet(emptyN, NWL, N) = clearup(N) . 
 eq $subnet(Q |-> L ; N, NWL, N') = $subnet(N, NWL, N' ; sumatrix(Q, NWL) |-> L) .
 ***
 op subnet : Net List{String} NeLab -> Net .
 eq subnet(N, WL, NeL) = $subnet(N, WL, NeL, emptyN) .  
 op $subnet : Net List{String} NeLab Net -> Net . 
 eq $subnet(emptyN, WL, NeL, N) = clearup(N) . 
 eq $subnet(Q |-> L ; N, WL, NeL, N') = $subnet(N, WL, NeL, N' ; sumatrix(Q, WL, NeL) |-> L) .
 ***
 op subnet : Net NeLab -> Net .
 eq subnet(N, NeL) = subnet(N, emptyLs, NeL) .
 *** extract the subnet matching a given pre-suffix
 op netmatch : Net List{String} NeLab -> Net .
 eq netmatch(N, WL, NeL) = $netmatch(N, WL, NeL, emptyN) .  
 op $netmatch : Net List{String} NeLab Net -> Net . 
 eq $netmatch(emptyN, WL, NeL, N) = clearup(N) . 
 eq $netmatch(Q |-> L ; N, WL, NeL, N') = $netmatch(N, WL, NeL, N' ; match(Q, WL, NeL) |-> L) .

 *** places matching a suffix (derived definitions) 
 op places : Net NeList{String} -> Pset .
 eq places(N, NWL) = places(subnet(N, NWL)) .
 op places : Net List{String} NeLab -> Pset .
 eq places(N, WL, NeL) = places(subnet(N, WL, NeL)) .
 op placematch : Net List{String} NeLab -> Pset .
 eq placematch(N, WL, NeL) = places(netmatch(N, WL, NeL)) .
 
 *** removes self-loops
 op clearup : Net -> Net .
 eq clearup([I, I, H] |-> L ; N) = clearup(N) .
 eq clearup(N) = N [owise] .

 *** removes the 2nd net from the first, if it is a subnet (does nothing otherwise)
 op detache : Net Net -> Net .
 eq detache(N ; N', N') = N .
 eq detache(N, N') = N  [owise] .
 *** symmetric version used in the paper
 op detache : Net Elab List{String}  -> Net .
 op detache : Net Elab  -> Net .
 eq detache(N, El:Elab) = detache(N, El:Elab, emptyLs) .

 *** remove places
 op remove :  Net Pset -> Net .
 eq remove(N, emptyPset) = N .
 eq remove(N, PS) = $remove(N, emptyN, PS) .
 op $remove : Net Net NePset -> Net .
 eq $remove(emptyN, N, PS) = N .
 eq $remove(Q |-> L ; N', N, PS) = $remove(N', remove(Q, PS)  |-> L ; N, PS).

 *** remove Trans with given labels
 op remove :  Net Set{X} -> Net .
 eq remove(N, emptyStlab) = N .
 eq remove(N, Z) = $remove(N, emptyN, Z) .
 op $remove : Net Net NeSet{X} -> Net .
 eq $remove(emptyN, N, Z) = N .
ceq $remove(Q |-> L ; N', N, Z) = $remove(N', N, Z) if L in Z .
 eq $remove(Q |-> L ; N', N, Z) = $remove(N', Q |-> L ; N, Z) [owise] .
 
 *** net algebra
 *** add a new tag to the net's places, but those to share (i.e., to which not to add the tag)
 op addLab : Net Lab Pset -> Net . 
 eq addLab(N, Lab, PS) = $addLab(N, emptyN, Lab, PS) .
 op $addLab : Net Net Lab Pset -> Net .
 eq $addLab(emptyN, N, Lab, PS) = N .
 eq $addLab(Q |-> L ; N', N, Lab, PS) = $addLab(N', addLab(Q, Lab, PS) |-> L ; N, Lab, PS) .
 *** simple (default) version
 op addLab : Net Lab -> Net . 
 eq addLab(N, Lab) = addLab(N, Lab, emptyPset) .
 *** defined for convenience (maps to the previous version)
 op addLab : Net Lab List{String} -> Net .
 eq addLab(N, Lab, WL) = addLab(N, Lab, places(N, WL)) . 
 
 *** replaces all the occurrences of places whose label matches the given suffix with a corresponding suffix having as header's index the specified value
 op replaceWith : Net NeLab Nat -> Net . 
 eq replaceWith(N, NeL, Y) = $replaceWith(N, NeL, Y, emptyN) .  
 op $replaceWith : Net NeLab Nat Net -> Net . 
 eq $replaceWith(emptyN, NeL, Y, N) = N . 
 eq $replaceWith(Q |-> L ; N, NeL, Y, N') = $replaceWith(N, NeL, Y, N' ; replaceWith(Q, NeL, Y) |-> L) .
 
endfm

*** default view to a PT-NET
view Net{X :: TRIV} from TRIV to PT-NET{X} is 
 sort Elt to Net .
endv

*** view to a PT-system
view System{X :: TRIV} from TRIV to PT-NET{X} is 
 sort Elt to System .
endv

