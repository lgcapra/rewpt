*** signature of stochastic PT 
in SPT-LAB
in PT-NORM
  
fmod SPN is 
  pr PT-NORM{SPTlab} * (op info to policy) .
  pr CONVERSION .
  var Q Q' : Tmatrix .
  vars T T' : Tran .
  var L : Tlab .
  vars N N' N'' : Net .
  vars M M' : Pbag .
  op policy : Tran -> Nat .
  eq policy(Q |-> L) = policy(L) .
  op tag : Tran -> String .
  eq tag(Q |-> L) = tag(L) .
  op rate : Tran -> Float .
  eq rate(Q |-> L) = rate(L) .
  *** computes the system's enabled transitions (outcome seen as a sub-Net) 
  op haveConcession : System -> Net [memo] .
  eq haveConcession(S:System) = $haveConcession(S:System, emptyN) .
  op $haveConcession : System Net -> Net .
  eq $haveConcession(emptyN M, N) = N .
ceq $haveConcession((T ; N) M, N') = $haveConcession(N M, T ; N') if hasConcession(T, M) .
 eq $haveConcession((T ; N) M, N') = $haveConcession(N M, N') [owise] .
 *** firing rule rates
  op firing-rate : Tran -> Float .
  eq firing-rate(T) = rate(T) .
  op firing-rate : Tran Pbag -> [Float] . *** alternative (marking dependent, e.g., based on the transition firing policy)
  
  *** eq firing-rate(T, M) = rate(T) . *** 1-server for all
  eq firing-rate(T, M) = if policy(T) == 1 then rate(T) else rate(T) * float(if policy(T) == 0 
                           then enabdegree(I(q(T)), M) else min(policy(T), enabdegree(I(q(T)), M)) fi) fi .
  *** eq firing-rate(T, M) = rate(T) * float(enabdegree(I(q(T)), M)) . *** infinite server for all t
  *** definition of enabdegree: assumes that T is enabled in M
  op enabdegree : Pbag Pbag -> [NzNat] .
  eq enabdegree(nilP, M) = 1 . *** the input arc is null
  eq enabdegree(B:NePbag, M) = $enabdegree(B:NePbag, M, 1000000000000000) .
  op $enabdegree : Pbag Pbag NzNat -> [NzNat] .  
  vars P P' : Place . 
  vars K K' D : NzNat .
  eq $enabdegree(K . P + M , K' . P + M', D) = $enabdegree(M , M', min(D, K' quo K)) .
  eq $enabdegree(nilP, M, D) = D .

endfm

*** trivial views

view Spn from TRIV to SPN is 
 sort Elt to Net .
endv

view SpnSys from TRIV to SPN is 
 sort Elt to System .
endv