in ../shared/BASE-SORTED-PAIR.maude
in ../shared/BASE-COMPARABLE-LIST.maude

*** defines structured labels for modular PT nets
fmod P-LAB is 
 pr NAT .
 pr LIST{String} * (op nil to emptyLs) .
 pr COMPARABLE-LIST{SortedPair<{String<,Nat<}} * (sort Pair{String<,Nat<} to Elab, *** elementary lab  
                                                    sort NeList{SortedPair<{String<,Nat<}} to NeLab,
                                                    sort List{SortedPair<{String<,Nat<}} to Lab,
                                                    op nil to emptyLab).

 vars I J : Nat .
 vars W W' : String .
 vars Ls Ls' Ls'' : List{String} .
 vars L L' L''  : Lab .
 *** gets the text tags out of a lab
 op strLab : Lab -> List{String} .
 op strLab : NeLab -> NeList{String} .
 eq strLab(L) = $strLab(L, emptyLs) .
 op $strLab : Lab List{String} -> List{String} .
 eq $strLab(emptyLab, Ls) = Ls .
 eq $strLab(< W ; I > L, Ls) = $strLab(L, Ls W) .
 *** checks that the label's suffix matches the given one
 op hasSuffix : Lab List{String} -> Bool .
ceq hasSuffix(L, Ls) = true if Ls' Ls := strLab(L) . *** particular case: Ls empty
 eq hasSuffix(L, Ls) = false [owise] .
 *** checks if a non-empty label matches a (non-empty) suffix, whose last part is fully specified and whose tail is partially specified 
 op hasSuffix : Lab List{String} Lab -> Bool .
ceq hasSuffix(L'' L' L, Ls, L) = true if Ls == strLab(L') . 
 eq hasSuffix(L, Ls, L') = false [owise] .
 *** simplest version
 op hasSuffix : Lab Lab -> Bool .
 eq hasSuffix(L L', L') = true .
 eq hasSuffix(L, L') = false [owise] .
 *** checks both the suffix and the prefix of a label
 op match : Lab List{String} Lab -> Bool .
ceq match(L'' L' L, Ls, L) = true if Ls == strLab(L'') .
 eq match(L, Ls, L') = false [owise] .
 *** checks only the prefix 
 op match : Lab List{String} -> Bool .
ceq match(L' L, Ls) = true if Ls == strLab(L') .
 eq match(L, Ls) = false [owise] .
endfm 

fmod PLACE is
 pr P-LAB .
 sort Place .
 op p : NeLab -> Place [ctor] . *** partial op: a Place's label is not empty
 vars L L' : NeLab .
 vars N1 N2 : Place .
 *** get the label
 op lab : Place -> NeLab .
 eq lab (p(L)) = L .
 *** gets the text out of a Place's lab
 op strLab : Place -> NeList{String} .
 eq strLab(p(L)) = strLab(L) .
 vars W W' : String .
 var I J : Nat .
 *** append a new sub-label
 op addLab : Place Lab -> Place . 
 eq addLab(p(L), X:Lab) = p(L X:Lab) .
 *** order relations
 op _<_ : Place Place -> Bool . *** strict total order
 eq p(L) < p(L') = lex(L, L') .
 op _<=_ : Place Place -> Bool . *** total order
 eq N1 <= N2 = N1 == N2 or-else N1 < N2 . 
 op min :  Place Place ->  Place .
 eq min(N1, N2) = if N1 <=  N2 then N1 else N2 fi .
 
 **** derived definitions
 var Ls : List{String} .
 var NLs : NeList{String} .
 op hasSuffix : Place NeList{String} -> Bool .
 eq hasSuffix(p(L), NLs) = hasSuffix(L, NLs) .
 op hasSuffix : Place List{String} NeLab -> Bool . 
 eq hasSuffix(p(L), Ls, L') = hasSuffix(L, Ls, L') .
 op hasSuffix : Place NeLab -> Bool .
 eq hasSuffix(p(L), L') = hasSuffix(L, L') .
 *** match
 op match : Place List{String} NeLab -> Bool .
 eq match(p(L), Ls, L') = match(L, Ls, L') .
 op match : Place NeList{String} -> Bool .
 eq match(p(L), NLs) = match(L, NLs) .
endfm


*** default view
view Place from TRIV to PLACE is 
 sort Elt to Place . 
endv

*** strict total-order view to PLACE
view Place< from STRICT-TOTAL-ORDER to PLACE is 
 sort Elt to Place . 
endv

*** total-order view to PLACE
view Place<= from TOTAL-ORDER to PLACE is 
 sort Elt to Place . 
endv
