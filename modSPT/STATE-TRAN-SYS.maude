in FIRING
in PT-NORM
*** state-transition representation for SPN (GSPN) pointing out state-transitions due to firing rule -- suitable to translation into a LCTMC 
fmod STATE-TRAN-SYS is 
  pr PT-NORM{SPTlab} .
  pr SET{FiringGroup} * (sort Set{FiringGroup} to Fset, sort NeSet{FiringGroup} to NeFset, op empty to emptyFset) .
  
  sort StateTranSys .
  var T  : Tran .
  vars N N' : Net .
  vars M M' : Pbag .
  var ST :  StateTranSys .
  var S : FiringGroup .
  var STS : Fset .
  *** description of a system pointing out (symbolic)state-transitions (2nd part, the prefix is the non-enabled net + marking)
  op NE:_ M:_ FIRING:_ : Net Pbag Fset -> StateTranSys [ctor format (n d n d n d d)] .
  *** getters
  op st : StateTranSys -> Fset . *** the set of enabled state-transitions, grouped into (equivalence) classes
  eq st(NE: N M: M FIRING: STS) = STS .
  op ne : StateTranSys -> Net .
  eq ne(NE: N M: M FIRING: STS) = N .
  op m : StateTranSys -> Pbag .
  eq m(NE: N M: M FIRING: STS) = M .
  *** to pass from a  representation to the other
  op toStateTran : System -> StateTranSys . *** main operator: builds the (symbolic) state-stransition view for a PT with priorities
 ceq toStateTran(N M) = NE: detache(N, N') M: M FIRING: fire(N', M) if N' := enabled(N M) . *** very intuitive
  op toStateTranSPN : System -> StateTranSys . *** assumes that there are no priorities
 ceq toStateTranSPN(N M) = NE: detache(N, N') M: M FIRING: fire(N', M) if N' := haveConcession(N M) . *** very intuitive
  op toSystem : StateTranSys -> System .
  eq toSystem(NE: N M: M FIRING: STS) = (N ; net(STS)) M .
   *** calculates the firings (state-transitions) of a set of transitions (seen as a net) -- enabling is not considered!
  op fire : Net Pbag -> Fset .
  eq fire(N, M) = $fire(N, M, emptyFset) .
  op $fire : Net Pbag Fset -> Fset .
  eq  $fire(emptyN, M, STS) = STS .
 ceq $fire(T ; N, M, (N' --> M', STS)) =  $fire(N, M, ((T ; N')  --> M', STS)) if  M' := normalize(fire(t(T), M)) .
  eq $fire(T ; N, M, STS) =  $fire(N, M, (T  --> normalize( fire(t(T), M) ), STS)) [owise] .
  *** the net corresponding to a set of state-stansitions 
  op net : Fset -> Net . 
  eq net(STS) = $net(STS, emptyN) .
  op $net : Fset Net -> Net .
  eq $net(emptyFset, N) = N .
  eq $net((N  --> M, STS), N') = $net(STS, N ; N') .
 
endfm