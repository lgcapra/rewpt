in SPN-EXE
in SPN-MC

*** this module re-defines the SPN example using the redundant state description used to derive a CTMC
fmod SPN-MC-EXE is
 pr SPN-EXE .
 pr SPN-MC .
 pr MATCH-CLASS{Tlab{String}} .
 pr MATCH-CLASS{Tmatrix{String}} * (sort MatchGroup{Tmatrix{String}} to MatchGroup{Tmatrix}, sort MatchClass{Tmatrix{String}} to MatchClass{Tmatrix} ) .
 pr SPN-STATE-TRAN .
 var P : Place{String} . vars T T' : Tran . vars B  B' M  M' I O : Pbag  .
 vars N N' N'' : Net . vars S S' : System . vars R r r' : Float .
 vars L L' : Tlab . var Q : Tmatrix . var W : String . var E : Nat .
 var X : Set{StateTran{System}} .
 *** var Z : Set{StateTran{Net}} .
 *** var Y : Set{StateTran{Pbag}} .
 var XM : Match .

  *** encoding of rules defined in SPN-EXE-SYS
  *** merge rule (optimized considering that the marking is not affected)
  op merge-match : System -> Set{StateTran{System}} [memo].
  eq merge-match(S) = $merge-match(S, noStateTranS) .
  op $merge-match : System Set{StateTran{System}} -> Set{StateTran{System}} .
  *** ceq $merge-match(S, Z) = $merge-match(S, (XM  --> N' : R)  U Z)  if (N ; T ; T') M := S /\ W := tag(T) /\ W = tag(T') /\ E := pol(T) /\
  ***       E = pol(T') /\ enabled(T, M) = enabled(T', M) /\ N' := N ; merge(T, T', t(W, rate(T) + rate(T'), E))  /\ R := 0.02 /\ XM := {N} & {T , T'} & {M} /\ (XM --> N' : R) in Z = false .
  *** partial optimization: subset of variables used in match, but in we use S in state transitions 
  ceq $merge-match(S, X) = $merge-match(S, (XM  --> S' : R)  U X)  if (N ; T ; T') M := S /\ W := tag(T) /\ W = tag(T') /\ E := pol(T) /\
        E = pol(T') /\ enabled(T, M) = enabled(T', M) /\ S' := (N ; merge(T, T', t(W, rate(T) + rate(T'), E))) M  /\ R := 0.02 /\ XM := {T , T'}  /\ (XM --> S' : R) in X = false .
  eq $merge-match(S, X) = X [owise] .
  *** op merge-match : System -> Set{StateTran{System}} [memo]. *** full version (no optiimization)
  *** eq merge-match(S) = $merge-match(S, noStateTranS) .
  *** op $merge-match : System Set{StateTran{System}} -> Set{StateTran{System}} .
  *** ceq $merge-match(S, X) = $merge-match(S, (XM  --> S' : R)  U X)  if (N ; T ; T') M := S /\ W := tag(T) /\ W = tag(T') /\ E := pol(T) /\
  ***       E = pol(T') /\ enabled(T, M) = enabled(T', M) /\ S' := (N ; merge(T, T', t(W, rate(T) + rate(T'), E))) M  /\ R := 0.02 /\ XM := {N} & {T , T'} & {M} /\ (XM --> S' : R) in X = false .
  *** eq $merge-match(S, X) = X [owise] .
  
  *** aggr rule (partially optimized)
  op aggr-match : System -> Set{StateTran{System}} [memo] .
  eq aggr-match(S) = $aggr-match(S, noStateTranS) .
  op $aggr-match : System Set{StateTran{System}} -> Set{StateTran{System}} .
  ***ceq $aggr-match(S, Z) = $aggr-match(S,  (XM  --> N' : R)  U Z) if (N ; T ; T')  M := S /\ E := pol(T) /\ E = pol(T') /\ enabled(T', M) = false /\
  ***   I := I(q(T')) /\ O := O(q(T)) /\ O = I /\ intersection(support(I),  places(N) U support(I(q(T)) + H(q(T)) + M + O(q(T')) + H(q(T')))) == emptyPset /\
  ***   r := rate(T) /\ r' := rate(T')  /\ N' := N ; aggr(T, T', t(tag(T) + "-" + tag(T'), r * r' / (r + r'), E)) /\
  ***   R := 0.05 /\ XM := {N} & {T , T'} & {M} /\ (XM  --> N' : R) in Z = false . 
  *** optimization: subset of variables used in match
  ceq $aggr-match(S, X) = $aggr-match(S,  (XM  --> S' : R)  U X) if (N ; T ; T')  M := S /\ E := pol(T) /\ E = pol(T') /\ enabled(T', M) = false /\
     I := I(q(T')) /\ O := O(q(T)) /\ O = I /\ intersection(support(I),  places(N) U support(I(q(T)) + H(q(T)) + M + O(q(T')) + H(q(T')))) == emptyPset /\
     r := rate(T) /\ r' := rate(T')  /\ S' := (N ; aggr(T, T', t(tag(T) + "-" + tag(T'), r * r' / (r + r'), E))) M /\
     R := 0.05 /\ XM := {T , T'}  /\ (XM  --> S' : R) in X = false .
  eq $aggr-match(S, X) = X [owise] .
  
  *** fold rule (Net portion)
  op fold-match : System -> Set{StateTran{System}} [memo].
  eq fold-match(S) = $fold-match(S, noStateTranS) .
  op $fold-match : System Set{StateTran{System}} -> Set{StateTran{System}} .
  *** ceq $fold-match(S, Z) = $fold-match(S, (XM  --> N' : R)  U Z)  if (N ; L |-> Q ; L' |-> Q) := S  /\ E := pol(L) /\
  ***        E = pol(L') /\ N' := N ; t("fold" ,  rate(L) + rate(L'), E) |-> Q  /\ R := 0.02 /\ XM := {N''} & {L , L'} & {Q} /\ (XM  --> N' : R) in Z = false  .
  ceq $fold-match(S, X) = $fold-match(S, (XM  --> S' : R)  U X)  if (N ; L |-> Q ; L' |-> Q) M := S  /\ E := pol(L) /\
         E = pol(L') /\ S' := (N ; t("fold", rate(L) + rate(L'), E) |-> Q) M  /\ R := 0.02 /\ XM := {L , L'} & {Q} /\ (XM  --> S' : R) in X = false  .
  eq $fold-match(S, X) = X [owise] .

  *** calculate the cumulative state-transition rates
  op rewriteS : System -> Set{Rate{System}} .
  eq rewriteS(S) = cumrate(firing-match(S) U fold-match(S) U merge-match(S) U aggr-match(S)) .

  *** Core operator:passes from the usual SPN representation to the redundant (point out state transitions) used to derive the CTM
  op stateTranMC : System -> SpnStateTran .
  eq stateTranMC(S) = SYS: S REW: rewriteS(S) .
endfm

