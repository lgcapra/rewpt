*** def base, senza tutti gli operatori per gestire le etichette "strutturate" dellÃ¬approccio modulare 
in ./shared/BAG-AND-SET
in ./shared/MSET
in PLACE

fmod PBAG{X :: TRIV} is
 *** pr (BAG-AND-SET{Place{X}} + MSET-BAG{Place{X}}) * ( sort  Place{X} to Place, sort Bag{Place{X}} to Pbag, sort NeBag{Place{X}} to NePbag, 
 ***                          sort  ElBag{Place{X}} to ElPbag, op nil{Place{X}} to nilP, 
 ***                          sort  Set{Place{X}}  to Pset, sort NeSet{Place{X}} to NePset, op emptyS to emptyPset,
 ***                          sort  Mset{Place{X}} to Pmset, sort  NeMset{Place{X}} to NePmset, op empty to emptyPmset,
 ***                          ) .
 *** we only import BAG-AND-SET
 pr (BAG-AND-SET{Place{X}}) * ( sort Bag{Place{X}} to Pbag, sort NeBag{Place{X}} to NePbag, 
                           sort  ElBag{Place{X}} to ElPbag, op nil{Place{X}} to nilP, 
                           sort  Set{Place{X}}  to Pset, sort NeSet{Place{X}} to NePset, op emptyS to emptyPset) .

    op enabCond : Pbag Pbag Pbag -> Bool . *** defined here for convenience
    vars I H M : Pbag .
    eq enabCond(I, H, M) = I <= M and-then H > M .

endfm


view Pbag{X :: TRIV} from TRIV to PBAG{X} is 
 sort Elt to Pbag .
endv