*** qui e altrove usiamo il preludio modificato anche se si potrebbe usare quello originale (nuova versione)
in ../shared/BAG-AND-SET
in ../shared/MAP+
in PTmod-NODES

*** this module defines (sortable) of pairs << Nat ; Place >>> (much simpler definition than the original one)
fmod PAIR-NAT-PLACE is 
  pr  SORTED-PAIR{Nat<,Place<} * (sort Pair{Nat<,Place<} to Pair{Nat,Place})  .  
endfm

*** ordinary view 
view PairNatP from TRIV to PAIR-NAT-PLACE is 
 sort Elt to Pair{Nat,Place} .
endv

*** classical view as strict-total-order 
view PairNatP< from STRICT-TOTAL-ORDER to PAIR-NAT-PLACE is 
 sort Elt to Pair{Nat,Place} .
endv

*** view as strict-weak-order 
view PairNatP+< from STRICT-WEAK-ORDER+ to PAIR-NAT-PLACE is 
 sort Elt to Pair{Nat,Place} . 
endv

*** this module defines comparable lists of pairs < Nat ; Place >
fmod LIST-NAT-PLACE is 
  pr COMPARABLE-LIST{PairNatP+<} * (sort List{PairNatP+<} to List{Nat,Place}, sort NeList{PairNatP+<} to NeList{Nat,Place}, op nil to emptyListNP)  .  
endfm

fmod BAGP is
 pr BAG-AND-SET{Place} * ( sort Bag{Place} to Pbag, sort NeBag{Place} to NePbag, op nil to nilP, 
                           sort Set{Place} to Pset, sort NeSet{Place} to NePset, op emptyS to emptyPset) .
 pr LIST-NAT-PLACE .
 
 vars P P' P'' P''' : Place . 
 vars K K' : NzNat .
 var I : Nat .
 vars B B' : Pbag .
 vars L L' L'' : Lab .
 var S : Pset .
 var LNP : List{Nat,Place} . 
 var W : List{String} .
 *** gives the set of places whose labes match a given prefix (NOTE a String is also a List{String})
 op support : Pbag List{String} -> Pset . 
 eq support(B, W) = $support(B, W, emptyPset) .  
 op $support : Pbag List{String} Pset -> Pset . 
ceq $support(K . P + B, W, S) = $support(B, W, S U P) if hasPrefix(P, W) .
 eq $support(B, W, S) = S [owise] .
  *** swaps two places
 op swap : Pbag Place Place -> Pbag .  
 eq swap(K . P  + K' . P' + B, P, P')  = K . P' +  K' . P + B .
 eq swap(K . P  + B, P, P')  = K . P' + B [owise] .
 eq swap(K . P' + B, P, P')  = K . P  + B [owise] .
 eq swap(B, P, P')  = B [owise] .
 *** builds an (un)ordered list of pairs < weight ; el > out of a bag
 op toList  : Pbag -> List{Nat,Place} .     
 eq toList(B) = $toList(B, emptyListNP) .
 op $toList : Pbag List{Nat,Place} -> List{Nat,Place} .
 eq $toList(nilP, LNP) = LNP .
 eq $toList(K . P + B, LNP) = $toList(B, < K ; P > LNP) . 
 *** builds an ordered list of pairs out of a bag  using the usual list lex order (0) ([memo] ?) or the lex order based on weights (1)
 var C : Nat .
 op toListS : Nat Pbag -> List{Nat,Place} . *** the 1st arg identifies the sorting 
 eq toListS(C, B)  = sort(C, toList(B)) .   
 *** defined for convenience (and to satisfy th STRICT-WEAK-ORDER+)
 op lt : Nat Pbag Pbag -> Bool . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq lt(C, B , B') = lex(C, toListS(C, B), toListS(C, B')) .
 *** defined for convenience 
 op cmp : Nat Pbag Pbag -> Nat . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq cmp(C, B , B') = cmp(C, toListS(C, B), toListS(C, B')) .
 *** defined for convenience
 ops _<_  : Pbag Pbag -> Bool .
 eq B <  B' = lt(0, B, B') .

 *** -- used for net algebra -- 
 *** add a new label to bag's elements -- version specifying elements to share (i.e., to which not to add the label)
 op addLab : Pbag Lab Pset -> Pbag . 
 eq addLab(B, L, S) = $addLab(B, nilP, L, S) .
 op $addLab : Pbag Pbag Lab Pset -> Pbag .
 eq $addLab(nilP, B, L, S) = B .
ceq $addLab(K . P + B', B, L, S) = $addLab(B', K . P + B, L, S) if P in S .
 eq $addLab(K . P + B', B, L, S) = $addLab(B', K . addLab(P, L) + B, L, S) [owise].
 *** add a new label to every bag element
 op addLab : Pbag Lab -> Pbag .
 eq addLab(B, L) = addLab(B, L, emptyPset) .
 *** set a weight for places with a given prefix
 op set : Pbag List{String} Nat -> Pbag .
ceq set(B, W, I) = set(B, S, I) if S := support(B, W) /\ S =/= emptyPset .
 eq set(B, W, I) = if I == 0 then B else B + I . p(< W ; 0 >) fi [owise] .
 *** set a weight for a (non-empty) set of places
 op set : Pbag NePset Nat -> Pbag .
 eq set(B, S U P U P', I) = set(set(B, P, I), S U P', I) . *** NOTE set(B, P, I) is already defined in BAG module
 *** rename a place, if the renamed place (when different) doesn't exist -- partial op (still helpful?)
 op rename : Pbag Place Place -> [Pbag] .
ceq rename(B + K . P, P, P') = B + K . P' if B[P'] == 0 .
ceq rename(B, P, P') = B if B[P] == 0 .   

endfm


view Pbag from TRIV to BAGP is 
 sort Elt to Pbag .
endv

*** strict-total-order view
*** view Pbag< from STRICT-TOTAL-ORDER to BAGP is 
***  sort Elt to Pbag . 
*** endv

*** strict-weak-order view
*** view Pbag+< from STRICT-WEAK-ORDER+ to BAGP is 
*** sort Elt to Pbag . 
*** endv

*** set-view of a bag (defined for convenience)
view Pset from TRIV to BAGP is
 sort Elt to Pset .
endv
