*** PT system's signature
in PT-NET

fmod PT-SYS{X :: TRIV} is
 pr PT-NET{X} .
 sorts ElSys System ElSimpSys SimpleSys .
 subsorts ElSys < System . *** PT system built of one transition 
 op __ : Net Pbag  -> System      [ctor] .
 op __ : Transition Pbag  -> ElSys    [ctor] .
 
 op emptySys  : -> System . *** alias
 eq emptySys = emptyN nilP .
 
 vars N N' : Net .
 vars T T' : Transition .
 vars P P' P'' : Place .
 vars I O H S S' : Pbag .
 vars Q Q' : Tmatrix .
 vars K K' : NzNat .
 var W :  String .
 var Y : List{String} .
 var Sys : System .
 var L : X$Elt . *** tran. lab
 var Z : Set{X} .
 
 op net : System -> Net . 
 op marking : System -> Pbag .
 eq net(N S) = N .
 eq marking(N S) = S .
 
 *** transition enabling
 op enabled : Transition Pbag  -> Bool .
 eq enabled(Q |-> L,  S) = enabled(Q, S) .
 *** net transition enabling (partial operation: defined if the transition belongs to the net)
 op enabled : Transition System -> [Bool] .
 eq enabled(Q |-> L, (Q |-> L ; N) S) = enabled(Q, S) .
 
 *** checks for a deadlock
 op dead : System -> Bool . 
ceq dead((T ; N) S) = false if enabled(T, (T ; N) S) .
 eq dead(N S) = true [owise] .
 
 *** tests the existence of a place
 op in :  System Place -> Bool . 
 eq in(N S, P) =  S[P] =/= 0 or-else in(N, P).
 *** system's places: assumes that it is the same as net's places
 op places : System -> Pset .
 eq places(N S) = places(N) .
 *** gets out the places whose labels match the given prefix 
 op places : System List{String} -> Pset .
 eq places(N S, Y) = places(N, Y) .
 
*** add a new label to a system's places
 var Lab : Lab .
 op addLab : System Lab -> System .
 eq addLab(N S, Lab) = addLab(N, Lab) addLab(S, Lab) .
 *** version specifying shared elements (helpful!)
 op addLab : System Lab Pset -> System .
 var PS : Pset .
 eq addLab(N S, Lab, PS) = addLab(N, Lab, PS) addLab(S, Lab, PS) .
 *** defined for convenience
 op addLab : System Lab List{String} -> System .
 eq addLab(Sys, Lab, Y) = addLab(Sys, Lab, places(Sys, Y)) . 
 
 *** clears the system's marking by removing non encoded places
 op clearupM : System -> System .
ceq clearupM(N K . P + S) = clearupM(N S) if in(N, P) == false .
 eq clearupM(X:System) = X:System [owise] .

 *** remove some places
 op remove :  System Pset -> System .
 eq remove(N S, PS) = remove(N, PS) remove(S, PS) .

  *** derived version 
 var NeL : NeLab . 
 var J : Nat .
 op replaceWith : System NeLab Nat -> System .
 eq replaceWith(N S, NeL, J) = replaceWith(N, NeL, J) replaceWith(S, NeL, J) .

 *** 
 op subsys : System NeLab -> System .
 eq subsys(N S, NeL) = subnet(N, NeL) subag(S, NeL) .
 *** si dovrebbero definire anche le versioni overloaded di subsys a matchsys
 
endfm

*** trivial view to a PT-SYS
view System{X :: TRIV} from TRIV to PT-SYS{X} is 
 sort Elt to System .
endv
