in PT-NET

*** PT system's signature (including a simple(r) one with an implicit representation of transition)
fmod PT-SYS is
 pr PT-NET .
 sorts ElSys System ElSimpSys SimpleSys .
 subsorts ElSys < System . *** PT system built of one transition 
 subsorts ElSimpSys < SimpleSys .
 op __ : Net Pbag  -> [System]      [ctor] .
 op __ : ImatrixT Pbag  -> ElSys    [ctor] .
 op __ : Snet Pbag -> SimpleSys     [ctor] .
 op __ : Imatrix Pbag -> ElSimpSys [ctor] .
 
 op emptySys  : -> System . *** alias
 eq emptySys = emptyN nilP .
 op emptySsys : -> SimpleSys . *** alias
 eq emptySsys = emptySn nilP .
 vars N N' : Net .
 vars T T' : Tran .
 vars P P' P'' : Place .
 vars I O H S S' : Pbag .
 vars Q Q' : Imatrix .
 vars K K' : NzNat .
 var W : List{String} .
 vars Sn Sn' : Snet .
 var WS : Set{String} .
 *** all the ops are duplicated to consider simple nets
 op net : System -> Net . 
 op marking : System -> Pbag .
 eq net(N S) = N .
 eq marking(N S) = S .
 op net : SimpleSys -> Snet .
 op marking : SimpleSys -> Pbag .
 eq net(Sn S) = Sn .
 eq marking(Sn S) = S .
 *** checks system's  well-definition
cmb N S : System if welldef(N) . *** /\ support(S) subset places(N) . 
*** cmb Sn S : SimpleSys if welldef(Sn) . *** /\ support(S) subset places(Sn) .
 *** translates to a simple representation (with transitions implicit)
 op toSimpleSys : System -> SimpleSys .
 eq toSimpleSys(N S) = toSimpleNet(N) S .
 *** check transition enabling
 op enabled : System Tran -> [Bool] .
 eq enabled((T |-> [I,O,H] ; N) S, T) = I <= S and-then H >' S .
 op enabled : SimpleSys Imatrix -> [Bool] .
 eq enabled((Q U Sn) S, Q) = I(Q) <= S and-then H(Q) >' S .
 *** step-enabling (helpful?)
 *** op enabled : System Tran NzNat -> [Bool] .
 *** eq enabled((T |-> [I,O,H] ; N) S, T, K) = K * I <= S and-then H >' S .
*** checks for a deadlock
 op dead : System -> Bool . 
ceq dead((T |-> Q ; N) S) = false if enabled((T |-> Q ; N) S, T) .
 eq dead(N S) = true [owise] .
op dead : SimpleSys -> Bool .
ceq dead((Q U Sn) S) = false if enabled((Q U Sn) S, Q) .
 eq dead(Sn S) = true [owise] .
 *** tests the existence of a place
 op in :  System Place -> Bool . 
 eq in(N S, P) =  S[P] =/= 0 or-else in(N, P).
 op in :  SimpleSys Place -> Bool .
 eq in(Sn S, P) =  S[P] =/= 0 or-else in(Sn, P).
 *** system's places
 op places : System -> Pset .
 eq places(N S) = places(N) U support(S) .
 op places : SimpleSys -> Pset .
 eq places(Sn S) = places(Sn) U support(S) .
 *** gets out the places whose labels match the given prefix 
 op places : System List{String} -> Pset .
 eq places(N S, W) = places(N, W) U support(S, W) .
 op places : SimpleSys List{String} -> Pset .
 eq places(Sn S, W) = places(Sn, W) U support(S, W) .
 *** system's oredered list of places
 op placeList : System -> Plist .
 eq placeList(N S) = $makePlist(places(N S), emptyPlist) .
 op placeList : SimpleSys -> Plist .
 eq placeList(Sn S) = $makePlist(places(Sn S), emptyPlist) .
*** add a new label to a system's places (not to transitions)
 var Lab : Lab .
 op addLab : System Lab -> System .
 eq addLab(N S, Lab) = addLab(N, Lab) addLab(S, Lab) .
 op addLab : SimpleSys Lab -> SimpleSys .
 eq addLab(Sn S, Lab) = addLab(Sn, Lab) addLab(S, Lab) .
 *** version specifying shared elements (helpful!)
 op addLab : System Lab Pset Tset -> System .
 var PS : Pset .
 var TS : Tset .
 eq addLab(N S, Lab, PS, TS) = addLab(N, Lab, PS, TS) addLab(S, Lab, PS) .
 op addLab : SimpleSys Lab Pset -> SimpleSys .
 eq addLab(Sn S, Lab, PS) = addLab(Sn, Lab, PS) addLab(S, Lab, PS) .
 *** remove some places
 op remove :  System Pset -> [System] .
 eq remove(N S, PS) = remove(N, PS) remove(S, PS) .
 op remove :  SimpleSys Pset -> SimpleSys .
 eq remove(Sn S, PS) = remove(Sn, PS) remove(S, PS) .

 *** rename a place -- builds on PT-NET.rename 
 *** op rename : System Place Place -> [System] . *** partial op
 *** eq rename(N S, P, P') = rename(N, P, P') rename(S, P, P') .
 *** rename a transition
 *** op rename : System Tran Tran -> [System] .
 *** eq rename(N S, T, T') = rename(N, T, T') S .

endfm

*** trivial view to a PT-SYS
view System from TRIV to PT-SYS is 
 sort Elt to System .
endv