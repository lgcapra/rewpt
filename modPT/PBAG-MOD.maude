*** qui e altrove usiamo il preludio modificato anche se si potrebbe usare quello originale (nuova versione)
in ../PBAG
in PLAB

fmod PBAG-MOD is
 pr PBAG{Plab} .
 vars P P' P'' P''' : Place . 
 vars K K' : NzNat .
 vars I J : Nat .
 vars B B' B'' : Pbag .
 vars NeB NeB' : NePbag .
 vars EB EB' : ElPbag .
 vars L L' L'' : Lab .
 var E : Elab .
 vars NeL NeL' : NeLab .
 var S : Pset .
 vars W W' : String .
 var Ws : List{String} .
 var NeWs : NeList{String} .
 
 *** gets the text out of a Place's lab
 op strLab : Place -> NeList{String} .
 eq strLab(p(NeL)) = strLab(NeL) .

 *** append a new sub-label
 op addLab : Place Lab -> Place . 
 eq addLab(p(NeL), L) = p(NeL L) .
 *** order relations
 op _<_ : Place Place -> Bool . *** strict total order
 eq p(NeL) < p(NeL') = lex(NeL, NeL') .
 op _<=_ : Place Place -> Bool . *** total order
 eq P <= P' = P == P' or-else P < P' . 
 op min :  Place Place ->  Place .
 eq min(P, P') = if P <=  P' then P else P' fi .
 
 **** derived definitions
 op hasSuffix : Place NeList{String} -> Bool .
 eq hasSuffix(p(NeL), NeWs) = hasSuffix(NeL, NeWs) .
 op hasSuffix : Place List{String} NeLab -> Bool . 
 eq hasSuffix(p(NeL), Ws, NeL') = hasSuffix(NeL, Ws, NeL') .
 op hasSuffix : Place NeLab -> Bool .
 eq hasSuffix(p(NeL), NeL') = hasSuffix(NeL, NeL') .
 *** match
 op match : Place List{String} NeLab -> Bool .
 eq match(p(NeL), Ws, NeL') = match(NeL, Ws, NeL') .
 op match : Place NeList{String} -> Bool .
 eq match(p(NeL), NeWs) = match(NeL, NeWs) .

 *** gives the sub-bag of places whose labes have (match) a given suffix (NOTE a String is also a NeList{String})
 op subag : Pbag NeList{String} -> Pbag . 
 eq subag(B, NeWs) = $subag(B, NeWs, nilP) .  
 op $subag : Pbag NeList{String} Pbag -> Pbag . 
ceq $subag(K . P + B, NeWs, B') = $subag(B, NeWs, B' + K . P) if hasSuffix(P, NeWs) .
 eq $subag(B, NeWs, B') = B' [owise] .
 op subag : Pbag List{String} NeLab  -> Pbag . 
 eq subag(B, Ws, NeL) = $subag(B, Ws, NeL, nilP) .  
 op $subag : Pbag List{String} NeLab Pbag -> Pbag . 
ceq $subag(K . P + B, Ws, NeL, B') = $subag(B, Ws, NeL, B' + K . P) if hasSuffix(P, Ws, NeL) .
 eq $subag(B, Ws, NeL, B') = B' [owise] .
 *** might be defined in terms of a previous one
 op subag : Pbag  NeLab  -> Pbag . 
 eq subag(B, NeL) = $subag(B, NeL, nilP) .  
 op $subag : Pbag NeLab Pbag -> Pbag . 
ceq $subag(K . P + B, NeL, B') = $subag(B, NeL, B' + K . P) if hasSuffix(P, NeL) .
 eq $subag(B, NeL, B') = B' [owise] .

  *** gives the sub-bag of places whose labes match a given pref-suffix
 op match : Pbag List{String} NeLab  -> Pbag . 
 eq match(B, Ws, NeL) = $match(B, Ws, NeL, nilP) .  
 op $match : Pbag List{String} NeLab Pbag -> Pbag . 
ceq $match(K . P + B, Ws, NeL, B') = $match(B, Ws, NeL, B' + K . P) if match(P, Ws, NeL) .
 eq $match(B, Ws, NeL, B') = B' [owise] .
 *** match the prefix
 op match : Pbag NeList{String} -> Pbag . 
 eq match(B, NeWs) = $match(B, NeWs, nilP) .  
 op $match : Pbag List{String} Pbag -> Pbag . 
ceq $match(K . P + B, NeWs, B') = $match(B, NeWs, B' + K . P) if match(P, NeWs) .
 eq $match(B, NeWs, B') = B' [owise] .

 *** le: strict TO on bags obtained by permuting a bag's elements -- defined without passing through lists
 op cmp : ElPbag ElPbag -> Nat .   *** compare method between el. bags  -- results in {0,1,2}
 eq cmp(K . p(NeL), K . p(NeL')) = cmp(NeL, NeL') .
 eq cmp(K . P, K' . P') = if K < K' then 1 else 2 fi [owise] .
 op le  : Pbag Pbag -> Bool . *** to avoid any confusion with < , <= bag operators etc.
 eq le(B, B) = false .
 eq le(nilP, NeB) = true .
 eq le(NeB, nilP) = false .
 eq le(NeB + B', NeB + B'') = le(B', B'') . 
 eq le(NeB, NeB') = cmp(min(NeB), min(NeB')) == 1 [owise] .

 *** finds the min elementary bag, based on le
 op min : NePbag -> ElPbag .
 eq min(EB) = EB . *** optimization
 eq min(K . P + NeB) = min(NeB, K . P) . 
 op min : NePbag ElPbag -> ElPbag . 
 eq min(EB + NeB, EB') =  min(NeB, min(EB, EB')) .
 eq min(EB, EB) = EB .
 eq min(EB, EB') = if cmp(EB, EB') == 1 then EB else EB' fi [owise] .
 
 
 *** non strict TO (based on lex)
 op leq : Pbag Pbag -> Bool .
 eq leq(B, B) = true .
 eq leq(B, B') = le(B, B') [owise] .
 
 *** -- operators used for net algebra -- 
 *** add a new label to bag's elements -- version specifying elements to share (i.e., to which not to add the label)
 op addLab : Pbag Lab Pset -> Pbag . 
 eq addLab(B, L, S) = $addLab(B, nilP, L, S) .
 op $addLab : Pbag Pbag Lab Pset -> Pbag .
 eq $addLab(nilP, B, L, S) = B .
ceq $addLab(K . P + B', B, L, S) = $addLab(B', K . P + B, L, S) if P in S .
 eq $addLab(K . P + B', B, L, S) = $addLab(B', K . addLab(P, L) + B, L, S) [owise].
 *** default: add a new label to every bag element
 op addLab : Pbag Lab -> Pbag .
 eq addLab(B, L) = addLab(B, L, emptyPset) .
 
 *** set a weight for a set of places -- builds on set(B, P, I) defined in BAG module (note: P is a Set)
 op set : Pbag Pset Nat -> Pbag .
ceq set(B, S, I) = $set(B, S, I) if S :: Place == false . *** S is not a singleton (we avoid recursion)
 op $set : Pbag Pset Nat -> Pbag . 
 eq $set(B, emptyPset, I) = B .  
 eq $set(B, S U P , I) = $set(set(B, P, I), S , I) .
 op set : Pbag Pset Nat -> Pbag .
 *** op set : Pbag NeList{String} Nat -> Pbag .
 *** eq set(B, NeWs, I) = set(B, subag(B, NeWs), I) . *** it could be defined directly
 
 *** replaces in all places whose label match the given suffix with a corresponding suffix having as header's index the specified value
 op replaceWith : Pbag NeLab Nat -> Pbag . 
 eq replaceWith(B, NeL, I) = $replaceWith(B, nilP, NeL, I) .
 op $replaceWith : Pbag Pbag NeLab Nat -> Pbag .
ceq $replaceWith(K . p(L' NeL) + B, B', NeL, I) = $replaceWith(B, K . p(L' < W ; I > L) + B', NeL, I) if < W ; J > L := NeL .
 eq $replaceWith(nilP, B, NeL, I) = B .
 eq $replaceWith(K . P + B', B, NeL, I) = $replaceWith(B', K . P + B, NeL, I) [owise] .
endfm



*** strict TO view
view Pbag< from STRICT-TOTAL-ORDER to PBAG-MOD is 
  sort Elt to Pbag .
  op _<_ to le . 
endv