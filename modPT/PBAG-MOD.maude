in ../PBAG
in PLAB

fmod PBAG-MOD is
 pr PBAG{Plab} .
 vars P P' P'' P''' : Place . 
 vars K K' : NzNat . vars I J : Nat .
 vars B B' B'' : Pbag . vars NeB NeB' : NePbag .
 vars EB EB' : ElPbag .
 vars L L' L'' : Lab . var E : Elab . vars NeL NeL' : NeLab .
 vars S S' S'' : Pset .
 vars W W' : String .
 var Ws : List{String} .
 var NeWs : NeList{String} .

 *** gives the sub-bag of places whose labes have (match) a given suffix (NOTE a String is also a NeList{String})
 op placesB : Pbag NeList{String} -> Pset .
 eq placesB(B, NeWs) = $placesB(B, NeWs, emptyPset) . 
 op $placesB : Pbag NeList{String} Pset -> Pset .
 eq $placesB(K . p(L) + B, NeWs, S) = $placesB(B, NeWs, if hasSuffix(L, NeWs) then S U p(L) else S fi)  .
 eq $placesB(nilP, NeWs, S) = S  .
 *** analogous, using match instead of hasSuffix (to define)
 op placesB : Pbag NeList{String} NeLab -> Pset .

 *** le: strict TO on bags obtained by permuting a bag's elements -- defined without passing through lists
 op cmp : ElPbag ElPbag -> Nat .   *** compare method between el. bags  -- results in {0,1,2}
 eq cmp(K . p(NeL), K . p(NeL')) = cmp(NeL, NeL') .
 eq cmp(K . P, K' . P') = if K < K' then 1 else 2 fi [owise] .
 op le  : Pbag Pbag -> Bool . *** to avoid any confusion with < , <= bag operators etc.
 eq le(B, B) = false .
 eq le(nilP, NeB) = true .
 eq le(NeB, nilP) = false .
 eq le(NeB + B', NeB + B'') = le(B', B'') . 
 eq le(NeB, NeB') = cmp(min(NeB), min(NeB')) == 1 [owise] .

 *** finds the min elementary bag, based on le
 op min : NePbag -> ElPbag .
 eq min(EB) = EB . *** optimization
 eq min(K . P + NeB) = min(NeB, K . P) . 
 op min : NePbag ElPbag -> ElPbag . 
 eq min(EB + NeB, EB') =  min(NeB, min(EB, EB')) .
 eq min(EB, EB) = EB .
 eq min(EB, EB') = if cmp(EB, EB') == 1 then EB else EB' fi [owise] .
 
 *** non-strict TO (based on lex)
 op leq : Pbag Pbag -> Bool .
 eq leq(B, B) = true .
 eq leq(B, B') = le(B, B') [owise] .
 
 *** -- operators used for net algebra -- 
 *** add a new label to bag's elements -- version specifying elements to share (i.e., to which not to add the label)
 op addLaB : Pbag Lab Pset -> Pbag . 
 eq addLaB(B, L, S) = $addLaB(B, nilP, L, S) .
 op $addLaB : Pbag Pbag Lab Pset -> Pbag .
 eq $addLaB(nilP, B, L, S) = B .
 eq $addLaB(K . p(L') + B', B, L, S) = $addLaB(B', B + if p(L') in S then K . p(L')  else K . p(L' L) fi, L, S)  .
 *** default
 op addLaB : Pbag Lab -> Pbag .
 eq addLaB(B, L) = addLaB(B, L, emptyPset) .
 
  *** replaces in all places whose label match the given suffix with a corresponding suffix having as header's index the specified value
 op replaceWithB : Pbag NeLab Nat -> Pbag . 
 eq replaceWithB(B, NeL, I) = $replaceWithB(B, nilP, NeL, I) .
 op $replaceWithB : Pbag Pbag NeLab Nat -> Pbag .
 eq $replaceWithB(K . p(L) + B', B, NeL, I) = $replaceWithB(B', K . p(replaceWith(L, NeL, I)) + B, NeL, I) .
 eq $replaceWithB(nilP, B, NeL, I) = B .

 *** set a weight for a set of places -- builds on set(B, P, I) defined in BAG module (note: P is a Set)
 op set : Pbag Pset Nat -> Pbag .
ceq set(B, S, I) = $set(B, S, I) if S :: Place == false . *** S is not a singleton (we avoid recursion)
 op $set : Pbag Pset Nat -> Pbag . 
 eq $set(B, emptyPset, I) = B .  
 eq $set(B, S U P , I) = $set(set(B, P, I), S , I) .
 ***
 op existsB : Pbag NeLab -> Bool .
 eq existsB(K . p(L' NeL) + B, NeL) = true  .
 eq existsB(B, NeL) = false [owise] .
 ***
 op existsgrB : Pbag NeLab  -> Bool .
ceq existsgrB(K . p(L' < W ; J > L) + B, < W ; I > L) = true  if J > I .
 eq existsgrB(B, NeL) = false [owise] .
 ***
 op minNotInB : Pbag String Lab -> Nat .
 eq minNotInB(B, W, L) = $minNotInB(B, W, L, 0) .
 op $minNotInB : Pbag String Lab Nat -> Nat . 
 eq $minNotInB(B, W, L, I) = if existsB(B, < W ; I > L) then $minNotInB(B, W, L, I + 1) else I fi .  
 ***
 op maxInB : Pbag String Lab -> Int .
ceq maxInB(K . p(L' NeL) + B, W, L) = J if < W ; J > L := NeL /\ existsgrB(B, NeL) == false .  
 eq maxInB(B, W, L) = -1 [owise] .
*** sub-bag matching a prefix
 op subag : Pbag  NeLab  -> Pbag . 
 eq subag(B, NeL) = $subag(B, NeL, nilP) .  
 op $subag : Pbag NeLab Pbag -> Pbag . 
ceq $subag(K . p(L) + B, NeL, B') = $subag(B, NeL, B' + K . p(L)) if hasSuffix(L, NeL) .
 eq $subag(B, NeL, B') = B' [owise] .
 *** match the prefix: slightly different from subag
 op match : Pbag NeList{String} -> Pbag . 
 eq match(B, NeWs) = $match(B, NeWs, nilP) .  
 op $match : Pbag List{String} Pbag -> Pbag . 
ceq $match(K . p(L) + B, NeWs, B') = $match(B, NeWs, B' + K . p(L)) if match(L, NeWs) .
 eq $match(B, NeWs, B') = B' [owise] .

*** DEFINIZIONI NON USATE MA POTENZIALMENTE UTILI
*** gives the sub-bag of places whose labes have (match) a given suffix (NOTE a String is also a NeList{String})
 *** op subag : Pbag NeList{String} -> Pbag . 
 *** eq subag(B, NeWs) = $subag(B, NeWs, nilP) .  
 *** op $subag : Pbag NeList{String} Pbag -> Pbag . 
*** ceq $subag(K . P + B, NeWs, B') = $subag(B, NeWs, B' + K . P) if hasSuffix(P, NeWs) .
 *** eq $subag(B, NeWs, B') = B' [owise] .
 *** op subag : Pbag List{String} NeLab  -> Pbag . 
 *** eq subag(B, Ws, NeL) = $subag(B, Ws, NeL, nilP) .  
 *** op $subag : Pbag List{String} NeLab Pbag -> Pbag . 
*** ceq $subag(K . P + B, Ws, NeL, B') = $subag(B, Ws, NeL, B' + K . P) if hasSuffix(P, Ws, NeL) .
 *** eq $subag(B, Ws, NeL, B') = B' [owise] .
 *** might be defined in terms of a previous one
  *** gives the sub-bag of places whose labes match a given pref-suffix
 *** op match : Pbag List{String} NeLab  -> Pbag . 
 *** eq match(B, Ws, NeL) = $match(B, Ws, NeL, nilP) .  
 *** op $match : Pbag List{String} NeLab Pbag -> Pbag . 
*** ceq $match(K . P + B, Ws, NeL, B') = $match(B, Ws, NeL, B' + K . P) if match(P, Ws, NeL) .
 *** eq $match(B, Ws, NeL, B') = B' [owise] .
 
endfm



*** strict TO view
view Pbag< from STRICT-TOTAL-ORDER to PBAG-MOD is 
  sort Elt to Pbag .
  op _<_ to le . 
endv