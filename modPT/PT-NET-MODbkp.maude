*** a new, more effective net representation
*** in ../shared/MAP+
in ../PT-NET
in TMATRIX-MOD
in PLAB

*** signature of a PT net with operator for modularity
fmod PT-NET-MOD{L :: TRIV} is
 pr TMATRIX-MOD .
 pr PT-NET{L, Plab} .
 var J  : Nat .
 vars N N' : Net .
 vars I O H B : Pbag .
 vars Q Q' : Tmatrix . 
 vars S S' PS : Pset .
 var WL : List{String} .
 var NeWL : NeList{String} .
 var Lab : Lab .
 var NeL : NeLab .
 var L : L$Elt . *** tran. lab
 var NeSL : NeSet{L} .
 
 *** net-algebra ops
  
 *** extract the subnet matching a given suffix ()
 op subnet : Net NeList{String} -> Net . 
 eq subnet(N, NeWL) = $subnet(N, NeWL, emptyNet) .  
 op $subnet : Net NeList{String} Net -> Net . 
 eq $subnet(emptyNet, NeWL, N) = N . 
 eq $subnet(L |-> Q ; N, NeWL, N') = $subnet(N, NeWL, N' ; L |-> sumatrix(Q, NeWL) ) .
 ***
 op subnet : Net List{String} NeLab -> Net .
 eq subnet(N, WL, NeL) = $subnet(N, WL, NeL, emptyNet) .  
 op $subnet : Net List{String} NeLab Net -> Net . 
 eq $subnet(emptyNet, WL, NeL, N) = N . 
 eq $subnet(L |-> Q ; N, WL, NeL, N') = $subnet(N, WL, NeL, N' ; L |-> sumatrix(Q, WL, NeL)) .
 ***
 op subnet : Net NeLab -> Net .
 eq subnet(N, NeL) = subnet(N, emptyLs, NeL) .
 *** extract the subnet matching a given pre-suffix
 op netmatch : Net List{String} NeLab -> Net .
 eq netmatch(N, WL, NeL) = $netmatch(N, WL, NeL, emptyNet) .  
 op $netmatch : Net List{String} NeLab Net -> Net . 
 eq $netmatch(emptyNet, WL, NeL, N) = N . 
 eq $netmatch(L |-> Q ; N, WL, NeL, N') = $netmatch(N, WL, NeL, N' ; L |-> match(Q, WL, NeL)) .

 *** places matching a suffix (derived definitions) 
 op places : Net NeList{String} -> Pset .
 eq places(N, NeWL) = places(subnet(N, NeWL)) .
 op places : Net List{String} NeLab -> Pset .
 eq places(N, WL, NeL) = places(subnet(N, WL, NeL)) .
 op placematch : Net List{String} NeLab -> Pset .
 eq placematch(N, WL, NeL) = places(netmatch(N, WL, NeL)) .
 
 *** detach the subnet matching a given suffix (version used in the paper: to define)
 op detache : Net NeLab -> Net .
 
 *** remove places
 op remove :  Net Pset -> Net .
 eq remove(N, emptyPset) = N .
 eq remove(N, S) = $remove(N, emptyNet, S) .
 op $remove : Net Net NePset -> Net .
 eq $remove(emptyNet, N, S) = N .
 eq $remove(L |-> Q ; N', N, S) = $remove(N', L |-> remove(Q, S) ; N, S).

 *** remove transitions with given labels
 op remove :  Net Set{L} -> Net .
 eq remove(N, emptySlab) = N .
 eq remove(N, NeSL) = $remove(N, emptyNet, NeSL) .
 op $remove : Net Net NeSet{L} -> Net .
 eq $remove(emptyNet, N, NeSL) = N .
ceq $remove(L |-> Q ; N', N, NeSL) = $remove(N', N, NeSL) if L in NeSL .
 eq $remove(L |-> Q ; N', N, NeSL) = $remove(N', L |-> Q ; N, NeSL) [owise] .
 
 *** add a new tag to the net's places, but those to share (i.e., to which not to add the tag)
 op addLab : Net Lab Pset -> Net . 
 eq addLab(N, Lab, S) = $addLab(N, emptyNet, Lab, S) .
 op $addLab : Net Net Lab Pset -> Net .
 eq $addLab(emptyNet, N, Lab, S) = N .
 eq $addLab(L |-> Q ; N', N, Lab, S) = $addLab(N', L |-> addLab(Q, Lab, S) ; N, Lab, S) .
 *** simple (default) version
 op addLab : Net Lab -> Net . 
 eq addLab(N, Lab) = addLab(N, Lab, emptyPset) .
 *** defined for convenience (maps to the previous version)
 op addLab : Net Lab List{String} -> Net .
 eq addLab(N, Lab, WL) = addLab(N, Lab, places(N, WL)) . 
 
 *** replaces all the occurrences of places whose label matches the given suffix with a corresponding suffix having as header's index the specified value
 op replaceWith : Net NeLab Nat -> Net . 
 eq replaceWith(N, NeL, J) = $replaceWith(N, NeL, J, emptyNet) .  
 op $replaceWith : Net NeLab Nat Net -> Net . 
 var T : Tran .
 eq $replaceWith(emptyNet, NeL, J, N) = N . 
 eq $replaceWith(T ; N, NeL, J, N') = $replaceWith(N, NeL, J, N' ; replaceTranWith(T, NeL, J)) .
 op replaceTranWith : Tran NeLab Nat -> Tran .
 eq replaceTranWith(L |-> Q, NeL, J) = L |-> replaceWith(Q, NeL, J) .
endfm

*** trivial view to a PT-NET
view PTnet{L :: TRIV} from TRIV to PT-NET-MOD{L} is 
 sort Elt to Net .
endv

