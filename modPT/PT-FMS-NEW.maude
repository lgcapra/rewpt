in PT-EMU

fmod PT-FMS is
 protecting NET-OP .
 ops sline sload sass sfault faultysload faultysass :  Nat -> Imatrix .
 ops line load ass fault faultyload faultyass : Nat -> ImatrixT . 
 ops cycle PL faultycycle faultyPL : Nat -> Net .
 ops scycle SPL : Nat -> Snet .
 
 op NPL : NzNat -> Net . *** N prod lines
 op NPLsys : NzNat NzNat -> System . *** N prod lines with 2 * M tokens (raw pieces)
 
 var I : Nat . 
 vars N M : NzNat .
 eq sline(I) =  [1 . p(< "w" ; I >) , 1 . p(< "a" ; I >), 1 . p(< "f" ; I >) ] .
 eq line(I) = t(< "l" ; I >) |-> sline(I) .
 eq sfault(I) =  [1 . p(< "o" ; I >) , 1 . p(< "f" ; I >), nilP ] .
 eq fault(I) = t(< "f" ; I >) |-> sfault(I) .
 eq sload(I) = [1 . p(< "s" ; I >) , 1 . p(< "w" ; I >) , nilP ] .
 eq load(I) = t(< "w" ; I >) |-> sload(I) .
 eq sass(I) =  [1 . p(< "a" ; I >) , 1 . p(< "s" ; I >)  , nilP ] .
 eq ass(I)  = t(< "a" ; I >) |-> sass(I) .
 eq cycle(I) = load(I) ; line(I) ; ass(I) ; fault(I) .
 eq PL(I) = replica&share(cycle(I), 2, "L", p (< "o" ; I >) U p(< "s" ; I >), t(< "a" ; I >) U t(< "w" ; I >)) . *** a PL is built of two symmetric lines 
 eq NPL(N) = replica&share(PL(0), N, "PL", p(< "s" ; 0 >), emptyTset) .
 eq NPLsys(N, M) = setMark(setMark(NPL(N), "o" "PL", 1), "s", 2 * M) .
 
 *** faulty PL working with one line
 eq faultysload(I) =  [2 . p(< "s" ; I >) , 2 . p(< "w" ; I >) , nilP ] .
 eq faultysass(I)  =  [2 . p(< "a" ; I >) , 2 . p(< "s" ; I >)  , nilP ] .
 eq faultyload(I) = t(< "l" ; I >) |-> faultysload(I) . 
 eq faultyass(I)  = t(< "a" ; I >) |-> faultysass(I) .
 eq faultycycle(I) = faultyload(I) ; line(I) ; faultyass(I) ; fault(I) .
 eq faultyPL(I) = replica&share(faultycycle(I), 1, "fPL", "s",  emptyStr) . *** a faulty PL is built of 1 line
endfm

mod RWPT-FMS is
 pr  PT-FMS .
 inc PT-EMU .
 vars N N' : Net .
 vars Tload Tfail Tfail1 Tfail2 Tass Tline Tline1 Tline2  : Tran .
 vars P0 P1 P2 P3 P4 P5 P6 P7 : Place .
 var S : Pbag .
 var K : NzNat .
 var I : Nat .
 var W : String .
 vars L L0 L1 L2 L3 L4 L5 L6 L7 : Lab .
 
 crl [syr1] : N S + 1 . P7 => ( N' ; Tload |-> [2 . P1, 2 . P2, nilP] ;  Tass |-> [2 . P4, 2 . P1, nilP]) set(S, P3, 0) + S[P3] . P2 + 1 . P0 
        if (N' ; Tload |-> [2 . P1, 1 . P2 + 1 . P3, nilP ] ; Tline2 |-> [1 . P3, 1 . P5, 1 . P7] ; Tass |-> [1 . P4 + 1 . P5, 2 . P1, nilP ] ; Tfail2 |-> [1 . P0, 1 . P7, nilP]) := N /\ dead(N S + 1 . P7)  .
*** crl [syr1new] : N S + 1 . p(L7 < "f" ; I >) => ( N' ; Tload |-> [2 . P1, 2 . P2, nilP] ;  Tass |-> [2 . P4, 2 . P1, nilP]) set(S, P3, 0) + S[P3] . P2 + 1 . P0 
***          if (N' ; NPL(1, I)) := N /\ dead(N S + 1 . P7)  .
 crl [syr2] : N  S + 1 . P6  => N' (set(set(S, P1, S[P1] + S[P2] + S[P4]), P2, 0)) - 1 . P4 if (N' ; Tfail1 |-> [1 . P0, 1 . P6, nilP] ; Tload |-> [2 . P1, 2 . P2, nilP] ; Tline1 |-> [1 . P2, 1 . P4, 1 . P6] ; Tass |-> [2 . P4, 2 . P1, nilP ]) := N  /\ N' =/= emptyN /\
              dead((Tload |-> [2 . P1, 2 . P2, nilP] ;  Tass |-> [2 . P4, 2 . P1, nilP ]) S) .
*** including minimization

endm