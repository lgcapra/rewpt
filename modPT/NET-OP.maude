in PT-SYS

*** basic net-algebra operators
fmod NET-OP is
 pr PT-SYS .  
 protecting CONVERSION .
 vars P P' : Place .
 vars N N' : Net .
 vars S S' : Pbag .
 var Sys Sys' : System .
 var I : Nat .
 vars K K' : NzNat .
 var W : String .
 *** juxtapose two systems (NOTE identical places are implicitly merged, their markings are summed map)
 op join : System System -> [System] [assoc comm] . 
 eq join(N S, N' S') = (N ; N') S + S' .
 *** juxtapose two systems (NOTE identical places are implicitly merged if their marking is the same, in that case it is retained)
 op joinP : System System -> [System] [assoc comm] . *** place-based join
 eq joinP(N S, N' S') = (N ; N') join(S, S') . 
 *** symmetric juxtapostion: creates K disjoint copies of a net each one with suitably-prefixed node labels
 op par  : System NzNat String -> [System] . *** chiamare symjoin o nreplica ?
 *** eq par(Sys, 1, W) = prefix(Sys, 1, W) .
*** ceq par(Sys, K, W) = join(par(Sys, sd(K,1), W), prefix(Sys, K, W)) if K > 1 .
 *** version 2: doesn't insert indices in the prefix -- sets indices modulo the system's size (|P|)
 op parv2  : System NzNat String -> [System] .
 eq parv2(Sys, K, W) = $parv2(Sys, K, | places(Sys) |, W)  .
 op $parv2 : System NzNat NzNat String -> [System] . 
 *** eq $parv2(Sys, 1, K', W) = prefix(Sys, W) .
*** ceq $parv2(Sys, K, K', W) = join($parv2(Sys, sd(K,1), K', W), prefix&offset(Sys, sd(K,1) * K', W)) if K > 1 . 
 op parv2  : System NzNat  -> [System] . *** doesnt'modify the label
 eq parv2(Sys, K) = parv2(Sys, K, "") .
 
 *** merge two places of a PT system giving the merged place a new label (Note assumes that merged places hold the same marking, which is retained) .     
 var L : ModLab .
 op pmerge : System Place Place ModLab  -> [System] .
ceq pmerge(N S, P, P', L) = replace(replace(N, P, p(L)), P', p(L)) replace(set(S, P', 0), P, p(L)) if P =/= P' /\ S[P] == S[P'] .
 eq pmerge(N S, P, P, L) = N S .
 *** version taking two systems as arguments (exploits ;)
 op pmerge : System Place System Place ModLab  -> [System] .
 eq pmerge(N S, P, N' S', P', L) = (replace(N, P, p(L)) ; replace(N', P', p(L))) join(replace(S, P, p(L)), replace(S', P', p(L) )) .
endfm
