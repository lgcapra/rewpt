*** net-algebra operators pointing out symmetries
in PT-SYS-MOD

fmod NET-OP{L :: TRIV} is
 pr PT-SYS-MOD{L} .
 vars P P' P'' : Place .
 vars T T' T'' : Tran .
 vars N N' : Net .
 vars B B' B'' : Pbag .
 var Sys Sys' : System .
 vars I J Y : Nat .
 vars K K' : NzNat .
 vars W W1 W2 W3 W4 : String .
 vars Lw Lw' : List{String} .
 vars Q Q' : Tmatrix .
 vars S S' : Pset .
 vars L L' : L$Elt . *** tran. lab
 var Z : Set{L} .
 vars Lb Lb' : Lab . *** place lab 
 
 *** verifies that two nets may be joined by preserving the symmetry hierarchy
 op sdisjoint : Net Net -> Bool [comm] .  
ceq sdisjoint(N, N') = false if p(Lb < W ; I > ) U S := places(N) /\ p(Lb' < W ; J > ) U S' := places(N')  /\ Lb < W ; I > =/= Lb' < W ; J > .
 eq sdisjoint(N, N') = true [owise] .
 *** "merges" identically labelled net transitions whose labels belong to the given set
 op merge : Net Set{L} -> Net .
ceq merge(N ; L |-> Q ; L |-> Q', Z) = L |-> Q +  Q' ; merge(N, Z) if L in Z .
 eq merge(N, Z) = N [owise] . 
 *** NEW
 op merge : System Set{L} -> System .
 eq merge(N B, Z) = merge(N, Z) B .
 *** "forced" merge of identically labelled net transitions
 op merge! : Net  -> Net .
 eq merge!(N ; L |-> Q ; L |-> Q') = L |->  Q + Q' ; merge!(N) .
 eq merge!(N) = N [owise] .
 op merge! : System -> System .
 eq merge!(N B) = merge!(N) B . 
 *** join two systems by summing their markings (identical places are implicitly merged)
 op join : System System -> System [assoc comm] .
 eq join(N B, N' B') = (N ; N') B + B' .
 *** join two systems and then merge transitions identically labelled whose labels belong to the given set
 op join : System System Set{L} -> System  .
 eq join(N B, N' B', Z) = merge(N ; N', Z) B + B' . ***
 *** forced join (builds on transitions'  merge!)
 op join! : System System  -> System .
 eq join(N B, N' B') = merge!(N ; N') B + B' . 
 *** merge all places with labels mathing a suffix -- to define
 op merge : System  NeList{String} -> System . *** To define
 op merge : Net String -> Net .
 eq merge(N, W) = net(merge(N nilP, W)) .
 ***symmetry preserving net juxtaposition
 op sjoin : Net Net -> [Net]  .
ceq sjoin(N, N') = N ; N' if sdisjoint(N, N') .
 op sjoin : System System  -> [System]  .
 eq sjoin(N B, N' B') = sjoin(N, N') B + B' .

 *** "symmetric" juxtaposition: creates K (disjoint) replica of a system each one with a suitably added label suffix (with index 0..K-1) denoting the "nesting" level
 ***  NEW general base version specifying places to share among replicas
 op repl&share  : System NzNat String Pset -> System .
 eq repl&share(Sys, K, W, S) = $repl&share(Sys, K, W, emptyNet nilP, S) .
 op $repl&share  : System Nat String System Pset -> System .
 eq $repl&share(Sys, 0, W, Sys', S) = Sys' .
 eq $repl&share(Sys, K, W, Sys', S) = $repl&share(Sys, K - 1, W, join(Sys', addLab(Sys, < W ; K - 1 >, S)), S) .
 *** net versions (NEW definition)
 op repl&share : Net NzNat String Pset -> Net .
 eq repl&share(N, K, W, S) = $repl&share(N, K, W, emptyNet, S) .
 op $repl&share : Net Nat String Net Pset -> Net .
 eq $repl&share(N, 0, W, N', S) = N' .
 eq $repl&share(N, K, W, N', S) = $repl&share(N, K - 1, W, (N' ; addLab(N, < W ; K - 1 >, S)), S) .
 *** default versions
 op replica  : System NzNat String -> System . 
 eq replica(Sys, K, W) =  repl&share(Sys, K, W, emptyPset) .
 op replica : Net NzNat String -> Net .
 eq replica(N, K, W) = repl&share(N, K, W, emptyPset) .

 ***  derived versions (characteristic of the formalism) specifying transitions to share  as well 
 op repl&share  : System NzNat String Pset Set{L} -> System .
 eq repl&share(Sys, K, W, S, Z) = merge(repl&share(Sys, K, W, S), Z) . 
 op repl&share : System NzNat String List{String} Set{L} -> System .
 eq repl&share(Sys, K, W, Lw, Z) = repl&share(Sys, K, W, places(n(Sys), Lw), Z) .
 *** net versions
 op repl&share : Net NzNat String Pset Set{L} -> Net .
 eq repl&share(N, K, W, S, Z) = merge(repl&share(N, K, W, S), Z) . 
 op repl&share : Net NzNat String List{String} Set{L} -> Net .
 eq repl&share(N, K, W, Lw, Z) = repl&share(N, K, W, places(N, Lw), Z) .
  
 *** new! : used in the paper 
 *** op repl&share  : System NzNat String String Set{L} -> System .
 *** eq repl&share(Sys, K, W, W1, Z) = $repl&share(Sys, K, W, emptyNet nilP, places(n(Sys), W1), Z) .

 *** elementary operators/operators acting on elementary nets (transitions)
 var TQ : Tran .
 var A : Atype .
 op newT : String Nat String Nat String Nat L$Elt -> Tran .
 eq newT(W, I, W1, J, W2, Y, L) = L |-> [$newEdge(W, I), $newEdge(W1, J), $newEdge(W2, Y)] .
 op $newEdge : String Nat -> Pbag .
 eq $newEdge(W, I) = if I == 0 then nilP else I . p(< W ; 0 >) fi .
 *** general version creating n copies of I/O/H places with specific tags -- to define
 op newT : String Nat Nat String Nat Nat String Nat Nat L$Elt -> Tran .
 
 *** set a marking for net places with label with a given suffix
 var NeL : NeList{String} .
 op setMark : Net NeList{String} Nat -> System .
 eq setMark(N, NeL, 0) = N nilP . 
 eq setMark(N, NeL, K) = setMark(N nilP, NeL, K) . 
 op setMark : System NeList{String} Nat -> System .
 eq setMark(N B, NeL, I) = N set(B, places(N, NeL), I) . 
 
*** symmetric process algebra ops -- to define
 op replAnd  : System NzNat List{String} List{String} L$Elt String L$Elt  String String -> System . *** 2nd and 3rd args: in/out places, 5th, 6th: tag of fork tran and its in place, 7th, 8th join tran and its out, 9th: new suffix
 op replOr  :  System NzNat List{String} List{String} String   -> System . *** the same as replAnd, but the fork-join parameters disappeared
 *** bisogna aggiungere 2 par String a And per in nomi dei nuovi posti di in/out ?
 *** net version
 op replAnd  : Net NzNat List{String} List{String} L$Elt String L$Elt String String   -> Net . 
 eq replAnd(N, K, Lw, Lw', L, W, L', W1, W2) = net(replAnd(N nilP, K, Lw, Lw', L, W, L', W1, W2)) .
 op replOr  : Net NzNat List{String} List{String} String  -> Net .
 eq replOr(N, K, Lw, Lw', W) = net(replOr(N nilP, K, Lw, Lw', W)) .
 
 *** classical binary version
 op and : System System List{String} List{String} L$Elt String L$Elt String -> System .
 op or  : System System List{String} List{String} -> System .
 op seq : System System List{String} List{String} -> System .
 *** net versions
 *** introspectio ops -- to define
 op subNet : Net Set{L} -> Net . *** sub-net built of transitions with labels in the specified set
 *** intercession ops  -- to define
 *** set net's connections of specific type and weight (0 means removing an edge) -- if the transition doesn't exist, it is created
 op set : Net L$Elt Atype NeList{String} Nat -> Net .
 *** set net's connections of specific type and weight from a transition to a set of k newly added places with elementary label and index 0 through  k -1 -- if the transition doesn't exist, it is created
 *** does nothing (i.e., returns the same Net) if Def.2 would be violated by the action
 op set : Net L$Elt Atype String NzNat NzNat -> Net .
 *** remove net's places matching a specified label suffix
 *** op remove : Net NeList{String} -> Net .
 *** remove net's transitions with a specific label
 op remove : Net  L$Elt -> Net .
 *** add a new component (sub-net, 2nd arg) to the specified net (1st arg) at the highest level of hierarchy (root),
 *** represented by a suffix tag; if isomorphic components do exist, then the the prefix header is associated a suitable index
 *** does nothing (i.e., returns the same Net) if Def.2 would be violated by the action
 op attach : Net Net String -> Net .

endfm