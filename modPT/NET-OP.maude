in PT-SYS

*** basic net-algebra operators
fmod NET-OP is
 pr PT-SYS .  
 protecting CONVERSION .
 vars P P' P'' : Place .
 vars T T' T'' : Tran .
 vars N N' : Net .
 vars B B' : Pbag .
 var Sys Sys' : System .
 var Ssys Ssys' : SimpleSys .
 vars Sn Sn' : Snet .
 var I : Nat .
 vars K K' : NzNat .
 vars W W' W'' : String .
 *** new version: join two nets by "merging" identical transitions (if any) and (implicitly) places of the two -- total op
 op join : Net Net -> Net [assoc comm] .
 eq join(N ; T |-> Q , N' ; T |-> Q') = T |-> Q + Q' ; join(N, N') .
 eq join(N, N') = N ; N' [owise] .
 *** join two systems, by "merging" identical places/transitions (if any) by summing place markings
 op join : System System -> System [assoc comm] . *** we use a kind because of possible duplicate keys (transitions)
 eq join(N B, N' B') = join(N, N') B + B' .
 *** simple system version of join (NOTE not defined for simple nets because equivalent to 'U')
 op join : SimpleSys SimpleSys -> SimpleSys [assoc comm] . *** safe
 eq join(Sn B, Sn' B') = (Sn U Sn') B + B' .
 *** "symmetric" juxtapostion: creates K (disjoint) replica of a system each one with a suitably added label suffix (with index 0..K-1) denoting the "nesting" level
 op replica  : System NzNat String -> System . 
 eq replica(Sys, 1, W) = Sys . 
ceq replica(Sys, K, W) = $replica(Sys, K, W, emptySys) if K > 1 .
 op $replica  : System Nat String System -> System .
 eq $replica(Sys, 0, W, Sys') = Sys' .
 eq $replica(Sys, K, W, Sys') = $replica(Sys, K - 1, W, join(Sys', addLab(Sys, < W ; K - 1 >))) .
 *** version for simple net representation
 op replica  : SimpleSys NzNat String -> SimpleSys . 
 eq replica(Ssys, 1, W) = Ssys . *** does nothing
ceq replica(Ssys, K, W) = $replica(Ssys, K, W, emptySsys) if K > 1 .
 op $replica  : SimpleSys Nat String SimpleSys -> SimpleSys .
 eq $replica(Ssys, 0, W, Ssys') = Ssys' .
 eq $replica(Ssys, K, W, Ssys') = $replica(Ssys, K - 1, W, join(Ssys', addLab(Ssys, < W ; K - 1 >))) .
 *** performs a kind of cartesian product between places; new places hold the label's tail of those in the 2nd set -- new indices are assigned
 vars S S' : Pset .
 op product : System Pset Pset String  -> [System] . *** ELIMINARE? la gestione delle label Ã¨ macchinosa
 eq product(Sys, S, S', W) = remove($product(Sys, S, S', W, size(S)), S U S') .
 op $product : System Pset Pset String Nat -> [System] .
 eq $product(Sys, emptyPset, S, W, I) = Sys .
 eq $product(Sys, P U S, S', W, I) = $product($$product(Sys, P, S', W, I), S, S', W, I + I) .
 op $$product : System Place Pset String Nat -> [System] . *** product a place with a set (the product result is assigned an arbitrary index)
 eq $$product(Sys, P, emptyPset, W, I) = Sys .
 eq $$product(Sys, P, P' U S, W, I) = $$product(makecopy(Sys, P, P',p(< W ; I > tail(lab(P') ) ) ), P, S, W, sd(I, 1)) . 
 *** creates n symmetric task synchronizing over a fork transitions; 1st string: the nesting level of components, 2nd string: the name of merged in-out places
 op fork  : System NzNat String String  -> System .  *** ELIMINARE
ceq fork(Sys, K, W, W') = product(join(t(< "fork" ; 0 >) |-> [nilP, 1 . p(< "out" ; 0 >), nilP] nilP, Sys'), p(< "out" ; 0 >),  places(Sys', "in"), W') if Sys' := replica(Sys, K, W) .
 *** 2nd version, not using product   -- DA SISTEMARE
 op forkv2  : System NzNat String String  -> System . 
ceq forkv2(N B, K, W, W') = join(Sys', tout(places(Sys', "in"), 1, t(< W' ; 0 >)) nilP) if Sys' := replica(N B, K, W) .
 *** elementary operators
 op tout : String NzNat NzNat  -> ImatrixT . *** builds an output transition with a postset of K (0..K-1) places of weight K' and with a fiven label
*** builds an "output transition" with a given postset of places each of weight K
 op tout : Pset NzNat Tran  -> ImatrixT .
 var TQ : ImatrixT .
 eq tout(S, K, T) = $tout(S, K, T |-> [nilP, nilP, nilP]) .
 op $tout : Pset NzNat ImatrixT  -> Net .
 eq $tout(emptyPset, K, TQ) = TQ .
 eq $tout(P U S, K, T |-> [nilP, O:Pbag, nilP]) = $tout(S, K, T |-> [nilP, O:Pbag + K . P, nilP]) .
 
 *** joins two nets by merging two transitions (builds on rename/join)
 op merge : Net Tran Net Tran Tran  -> [Net] .
 eq merge(N, T, N', T', T'') = join(rename(N, T, T''), rename(N', T', T'') ) .
*** version for simple nets
 vars Q Q' : Imatrix .
 op merge : Snet Imatrix Imatrix  -> Snet .
 eq merge(Sn U Q U Q', Q, Q') = Sn U Q + Q' . 
 *** ...
endfm
