in PT-SYS

*** basic net-algebra operators
fmod NET-OP is
 pr PT-SYS .  
 protecting CONVERSION .
 vars P P' : Place .
 vars N N' : Net .
 vars S S' : Pbag .
 var Sys Sys' : System .
 var Ssys Ssys' : SimpleSys .
 vars Sn Sn' : Snet .
 
 
 var I : Nat .
 vars K K' : NzNat .
 var W : String .
 *** juxtapose two systems, by merging identical places (whose markings are summed up)
 op join : System System -> [System] [assoc comm] . *** we use a kind because of possible duplicate keys (transitions)
 eq join(N S, N' S') = (N ; N') S + S' .
 *** simple system version
 op join : SimpleSys SimpleSys -> SimpleSys [assoc comm] . *** safe
 eq join(Sn S, Sn' S') = (Sn U Sn') S + S' .
 
 *** juxtapose two systems: identical places are merged only if their marking is the same, in that case it is retained
 op joinP : System System -> [System] [assoc comm] .
 eq joinP(N S, N' S') = (N ; N') join(S, S') . 
 *** simple system version
 op joinP : SimpleSys SimpleSys -> SimpleSys [assoc comm] .
 eq joinP(Sn S, Sn' S') = (Sn U Sn') join(S, S') . 
 
 *** "symmetric" juxtapostion: creates K (disjoint) replica of a system each one with suitably added labels denoting the "nesting" level
 op replica  : System NzNat String -> System . 
 eq replica(Sys, 1, W) = Sys . *** does nothing
ceq replica(Sys, K, W) = $replica(Sys, K - 1, W, addLab(Sys, < W ; K >)) if K > 1 .
 op $replica  : System Nat String System -> System .
 eq $replica(Sys, 0, W, Sys') = Sys' .
 eq $replica(Sys, K, W, Sys') = $replica(Sys, K - 1, W, join(Sys', addLab(Sys, < W ; K >))) .
 *** version for simple net representation
 op replica  : SimpleSys NzNat String -> SimpleSys . 
 eq replica(Ssys, 1, W) = Ssys . *** does nothing
ceq replica(Ssys, K, W) = $replica(Ssys, K - 1, W, addLab(Ssys, < W ; K >)) if K > 1 .
 op $replica  : SimpleSys Nat String SimpleSys -> SimpleSys .
 eq $replica(Ssys, 0, W, Ssys') = Ssys' .
 eq $replica(Ssys, K, W, Ssys') = $replica(Ssys, K - 1, W, join(Ssys', addLab(Ssys, < W ; K >))) .
 
 *** replaces the specified (1st) place with the 2nd place
 op replace : System Place Place -> System .
 op replace : SimpleSys Place Place -> SimpleSys .
 *** relabels the nodes whose labels match the specified (1st) suffix by replcing it with the 2nd one
 op relabsuf : System ModLab ModLab -> System .
 op relabsuf : SimpleSys ModLab ModLab -> SimpleSys .
 *** does the same by considering prefix
 op relabpre : System ModLab ModLab -> System .
 op relabpre : SimpleSys ModLab ModLab -> SimpleSys .
 
 
 
 *** merge two places of a PT system giving the merged place a new label (Note assumes that merged places hold the same marking, which is retained) .     
 var L : ModLab .
 op pmerge : System Place Place ModLab  -> [System] .
ceq pmerge(N S, P, P', L) = replace(replace(N, P, p(L)), P', p(L)) replace(set(S, P', 0), P, p(L)) if P =/= P' /\ S[P] == S[P'] .
 eq pmerge(N S, P, P, L) = N S .
 *** version taking two systems as arguments (exploits ;)
 op pmerge : System Place System Place ModLab  -> [System] .
 eq pmerge(N S, P, N' S', P', L) = (replace(N, P, p(L)) ; replace(N', P', p(L))) join(replace(S, P, p(L)), replace(S', P', p(L) )) .
endfm
