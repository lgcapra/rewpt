in PT-SYS

*** basic net-algebra operators
fmod NET-OP is
 pr PT-SYS .  
 vars P P' P'' : Place .
 vars T T' T'' : Tran .
 vars N N' : Net .
 vars B B' B'' : Pbag .
 var Sys Sys' : System .
 var Ssys Ssys' : SimpleSys .
 vars Sn Sn' : Snet .
 vars I J : Nat .
 vars K K' : NzNat .
 vars W W' W'' W''' : String .
 vars Lw Lw' : List{String} .
 vars Q Q' : Imatrix .

 *** join two nets by "merging" identical transitions and (implicitly) places, if any -- total op
 op join : Net Net -> Net [assoc comm] .
 eq join(N ; T |-> Q , N' ; T |-> Q') = T |-> Q + Q' ; join(N, N') .
 eq join(N, N') = N ; N' [owise] .
 *** join two systems by summing place markings
 op join : System System -> System [assoc comm] .
 eq join(N B, N' B') = join(N, N') B + B' .
 *** simple-system version of join (NOTE not defined for simple nets because equivalent to 'U')
 op join : SimpleSys SimpleSys -> SimpleSys [assoc comm] .
 eq join(Sn B, Sn' B') = (Sn U Sn') B + B' .
*** version of join for simple nets merging two given transitions
 op join : Snet Imatrix Snet Imatrix -> Snet . 
 eq join(Sn U Q, Q, Sn' U Q', Q') = Sn U Sn' U Q + Q' .
 eq join(Sn, Q, Sn', Q') = Sn U Sn' [owise] .
 *** version for simple systems
 op join : SimpleSys Imatrix SimpleSys Imatrix -> SimpleSys . 
 eq join(Sn B, Q, Sn' B', Q') = join(Sn, Q, Sn', Q') B + B' . 
 vars S S' : Pset .
 var TS : Tset .
 *** "symmetric" juxtaposition: creates K (disjoint) replica of a system each one with a suitably added label suffix (with index 0..K-1) denoting the "nesting" level
 ***  general version specifying elements to be shared among replicas
 op replica&share : System NzNat String Pset Tset -> System .
 eq replica&share(Sys, K, W, S, TS) = $replica&share(Sys, K, W, emptySys, S, TS)  .
 op $replica&share  : System Nat String System Pset Tset -> System .
 eq $replica&share(Sys, 0, W, Sys', S, TS) = Sys' .
 eq $replica&share(Sys, K, W, Sys', S, TS) = $replica&share(Sys, K - 1, W, join(Sys', addLab(Sys, < W ; K - 1 >, S, TS)), S, TS) .
 *** versions in which shared elements are specified through a suffix
 op replica&share : System NzNat String List{String} List{String} -> System .
 eq replica&share(Sys, K, W, Lw, Lw') = replica&share(Sys, K, W, places(Sys, Lw), transitions(net(Sys), Lw')) .
 *** default version
 op replica  : System NzNat String -> System . 
 eq replica(Sys, K, W) =  replica&share(Sys, K, W, emptyPset, emptyTset) .
 *** net versions (builds on system-replica)
 op replica&share : Net NzNat String Pset Tset -> Net .
 eq replica&share(N, K, W, S, TS) = net(replica&share(N nilP, K, W, S, TS)) .
 op replica&share : Net NzNat String List{String} List{String} -> Net .
 eq replica&share(N, K, W, Lw, Lw') = net(replica&share(N nilP, K, W, Lw, Lw')) .
 op replica  : Net NzNat String -> Net .
 eq replica(N, K, W) = replica&share(N, K, W, emptyPset, emptyTset) .
 
 *** general version for simple net representation
 op replica&share : SimpleSys NzNat String Pset -> SimpleSys .
 eq replica&share(Ssys, 1, W, S) = Ssys . *** does nothing
ceq replica&share(Ssys, K, W, S) = $replica&share(Ssys, K, W, S, emptySsys) if K > 1 .
 op $replica&share  : SimpleSys Nat String Pset SimpleSys -> SimpleSys .
 eq $replica&share(Ssys, 0, W, S, Ssys') = Ssys' .
 eq $replica&share(Ssys, K, W, S, Ssys') = $replica&share(Ssys, K - 1, W, S, join(Ssys', addLab(Ssys, < W ; K - 1 >, S) )) .
 *** shared elements are specified through a suffix
 op replica&share : SimpleSys NzNat String List{String}  -> SimpleSys .
 eq replica&share(Ssys, K, W, Lw) = replica&share(Ssys, K, W, places(Ssys, Lw)) . 
 *** default version
 op replica  : SimpleSys NzNat String -> SimpleSys . 
 eq replica(Ssys, 1, W) = replica&share(Ssys, 1, W, emptyPset) .
 *** simple-net version
 op replica  : Snet NzNat String -> Snet .
 eq replica(Sn, K, W) = net(replica(Sn nilP, K, W)) .
 
 *** elementary operators/operators acting on elementary nets
 var TQ : ImatrixT .
 var A : Atype .
 *** builds a transition's incidence matrix with a pre/post/inhibitor set of K (0..K-1) places of weight K' and with a given label
 op tnew : Tran String Atype NzNat NzNat  -> ImatrixT . 
 eq tnew(T, W, A, K, K') = $tnew(T |-> nilQ, W, A, K, K') . 
 op $tnew : ImatrixT String Atype Nat NzNat   -> ImatrixT .
 eq $tnew(TQ, W, A, 0, K) = TQ .
 eq $tnew(T |-> Q, W, A, K', K) = $tnew(T |-> set(Q, A, p(< W ; K' - 1 >), K), W, A, K' - 1, K) .
 *** symmetric version
 op tnew : String String Atype NzNat NzNat  -> ImatrixT . 
 eq tnew(W, W', A, K, K') = tnew(t(< W ; 0 >), W', A, K, K') .
 *** builds a "transition" with a given pre/post/inhibitor set of weight K
 op tnew : Tran Atype NePset NzNat   -> ImatrixT .
 eq tnew(T, A, NeS:NePset, K) = $tnew(T |-> nilQ, A, NeS:NePset, K) .
 op $tnew : ImatrixT Atype Pset NzNat   -> ImatrixT .
 eq $tnew(TQ, A, emptyPset, K) = TQ .
 eq $tnew(T |-> Q, A, P U S, K) = $tnew(T |-> set(Q, A, P, K), A, S, K) .
 *** set a marking for net places with label with a given suffix
 op setMark : Net List{String} NzNat -> System .
 eq setMark(N, Lw, K) = setMark(N nilP, Lw, K) . 
 op setMark : System List{String} NzNat -> System .
 eq setMark(N B, Lw, K) = N set(B, places(N B, Lw), K) . 
 
 *** version for simple systems
 op setMark : Snet List{String} NzNat -> SimpleSys .
 eq setMark(Sn, Lw, K) = Sn set(nilP, Lw, K) .  
 
 *** "connect" a net to a fresh, newly created transition: the transition's arcs type/weight and the net's places to connect are given 
 op connect : Net Pset Tran Atype NzNat -> [Net] . *** partial op
 eq connect(N, S, T, A, K) = N ; tnew(T, A, S, K) .
 *** overloaded op: connnect to net's places with a given label's suffix using the 2nd string as the fresh transition's lab
 op connect : Net String String Atype NzNat -> [Net] .
 eq connect(N, W, W', A, K) = connect(N, places(N, W), t(< W' ; 0 >), A, K) .
 *** overloaded op: connnect a system to a fresh transition
 op connect : System String String Atype NzNat -> [System] . 
 eq connect(N B, W, W', A, K) = connect(N, W, W', A, K) B .
 *** "synch" K replica of a system on a new fresh transition of given type 
 op synch  : System NzNat Atype String String String  -> System . 
ceq synch(Sys, K, A, W, W', W'') = connect(Sys', W, W', A, 1) if Sys' := replica(Sys, K, W'') .
 *** net version of synch
 op synch : Net NzNat Atype String String String  -> Net . 
 eq synch(N, K, A, W, W', W'') = net(synch(N nilP, K, A, W, W', W'')) .
 *** parallelize K replica of a system 
 op par  : System NzNat String String String String  -> System . 
 eq par(Sys, K, W, W', W'', W''') = connect(synch(Sys, K, o, W, W', "||"), W'',  W''', i, 1) . 

 *** replica of elementary nets (systems)
 op replica&share : ElSys NzNat Pset -> [System] . *** partial operation: works if labels are elementary
 var E : ElSys .
 var L : Lab .
 op replicable : ElSys -> Bool . *** all labels must be elementary (Elab with index 0)
ceq replicable(E) = false if S U p(L) := places(E) /\ elementary(L) == false .
 eq replicable(E) = true [owise] .
 *** set a given index for places with elementary labels (partial operations)
 op setIndex : Pbag NzNat -> [Pbag] .
 eq setIndex(B, K) = $setIndex(B, nilP, K) .
 op $setIndex : Pbag Pbag NzNat -> [Pbag] .
 eq $setIndex(nilP, B, K) = B .
 eq $setIndex(K' . p( < W ; 0 >) + B, B', K) = $setIndex(B, B' + K' . p( < W ; K >), K) . 
 op setIndex : Imatrix NzNat -> [Imatrix] .
 eq setIndex([B, B', B''], K) = [setIndex(B, K), setIndex(B', K), setIndex(B'', K)] . 
 op setIndex : ImatrixT NzNat -> [Net] .
 eq setIndex(t(< W ; 0 >) |-> Q, K) = t(< W ; K >) |-> setIndex(Q, K) .
 op setIndex : ElSys NzNat -> [ElSys] .
 eq setIndex(Qt:ImatrixT B, K) = setIndex(Qt:ImatrixT, K) setIndex(B, K) .
 
 
 *** joins two nets by merging two transitions (builds on rename/join) -- helpful?
 *** op merge : Net Tran Net Tran Tran  -> [Net] .
 *** eq merge(N, T, N', T', T'') = join(rename(N, T, T''), rename(N', T', T'') ) .
 *** version for simple nets
 *** op merge : Snet Imatrix Imatrix  -> Snet .
 *** eq merge(Sn U Q U Q', Q, Q') = Sn U Q + Q' . 
 
endfm
