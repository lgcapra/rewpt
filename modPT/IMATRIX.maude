in BAGP
in ATYPE

fmod IMATRIX is
 pr BAGP .
 pr ATYPE .
 sort Imatrix .
 op [_,_,_] : Pbag Pbag Pbag -> Imatrix [ctor] .
 op nilQ : -> Imatrix . *** alias
 eq nilQ = [nilP, nilP, nilP] .
 
 vars X Y Z X' Y' Z' : Pbag .
 vars P P' P'' : Place .
 vars N N' C1 C2 : Nat .
 vars K K' : NzNat .
 vars Q Q' : Imatrix .
 var L : ModLab .
 var S : Pset .
 
 ops I O H : Imatrix -> Pbag .
 eq I([X,Y,Z]) = X .
 eq O([X,Y,Z]) = Y .
 eq H([X,Y,Z]) = Z .

 op _(_) : Imatrix Atype -> Pbag [prec 23] . *** introduced for convenience
 var a : Atype .
 eq Q(i) = I(Q) .
 eq Q(o) = O(Q) . 
 eq Q(h) = H(Q) .

 op in :  Imatrix Place -> Bool . *** test the existence of a place
 eq in([X + K . P, Y, Z], P) = true .
 eq in([X, Y + K . P, Z], P) = true .
 eq in([X, Y, Z + K . P], P) = true .
 eq in(Q, P) = false [owise] .

 op dead : Imatrix -> Bool .  *** checks for structurally dead transitions 
 eq dead([K . P + X, Y, K' . P + Z]) = K >= K' [metadata "dead tq"] .
 eq dead(Q) = false [owise] .

 op places : Imatrix -> Pset .
 eq places([X,Y,Z]) = support(X) U support(Y) U support(Z) .
 var W : List{String} .

 *** pair-wise sum
 op _+_  : Imatrix Imatrix -> Imatrix [prec 41 assoc comm] .
 eq [X,Y,Z] + [X',Y',Z'] = [X' + X, Y' + Y, Z' + Z] .
 *** set a given place's arc type
 op set : Imatrix Atype Place Nat -> Imatrix .
 eq set([X,Y,Z], i, P, N) = [set(X,P,N), Y, Z] .
 eq set([X,Y,Z], o, P, N) = [X, set(Y,P,N), Z] .
 eq set([X,Y,Z], h, P, N) = [X, Y, set(Z,P,N)] .
 *** removes all places from a set
 op remove :  Imatrix Pset -> Imatrix .
 eq remove([X,Y,Z], S) = [remove(X, S),remove(Y, S),remove(Z, S)] .
 *** used in old canonization
 op swap : Imatrix Place Place -> Imatrix .
 eq swap([X,Y,Z], P, P') = [swap(X,P,P'),swap(Y,P,P'),swap(Z,P,P')] .
 
 *** net-algebra ops: add a new label to a matrix' elements
 op makecopy : Imatrix Place Place Place -> Imatrix . *** overloaded
 eq makecopy([X,Y,Z], P, P', P'') = [makecopy(X,P,P', P''),makecopy(Y,P,P', P''),makecopy(Z,P,P', P'')] .
 op addLab : Imatrix ModLab -> Imatrix . *** overloaded
 eq addLab([X,Y,Z], L) = [addLab(X, L), addLab(Y, L), addLab(Z, L)] .
 *** rename a place (build on BAGP.rename)
 op rename : Imatrix Place Place -> [Imatrix] .
 eq rename([X,Y,Z], P, P') = [rename(X, P, P'),rename(Y, P, P'),rename(Z, P, P')] . 
 *** set of places whose label's prefix matches the given one
 op places : List{String} Imatrix -> Pset .
 eq places(W, [X,Y,Z]) = support(X, W) U support(Y, W) U support(Z, W) .
  
endfm

view Imatrix from TRIV to IMATRIX is 
 sort Elt to Imatrix . 
endv
