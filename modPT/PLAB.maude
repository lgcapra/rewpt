in ../shared/BASE-SORTED-PAIR.maude
in ../shared/BASE-COMPARABLE-LIST.maude

*** defines structured labels for modular PT nets
fmod PLAB is 
 pr NAT .
 pr LIST{String} * (op nil to emptyLs) .
 pr COMPARABLE-LIST{SortedPair<{String<,Nat<}} * (sort Pair{String<,Nat<} to Elab, *** elementary lab  
                                                    sort NeList{SortedPair<{String<,Nat<}} to NeLab,
                                                    sort List{SortedPair<{String<,Nat<}} to Lab,
                                                    op nil to emptyLab).

 vars I J : Nat .
 vars W W' : String .
 vars Ls Ls' Ls'' : List{String} .
 vars L L' L''  : Lab .
 *** gets the text tags out of a lab
 op strLab : Lab -> List{String} .
 op strLab : NeLab -> NeList{String} .
 eq strLab(L) = $strLab(L, emptyLs) .
 op $strLab : Lab List{String} -> List{String} .
 eq $strLab(emptyLab, Ls) = Ls .
 eq $strLab(< W ; I > L, Ls) = $strLab(L, Ls W) .
 *** checks that the label's suffix matches the given one
 op hasSuffix : Lab List{String} -> Bool .
ceq hasSuffix(L, Ls) = true if Ls' Ls := strLab(L) . *** particular case: Ls empty
 eq hasSuffix(L, Ls) = false [owise] .
 *** checks if a non-empty label matches a (non-empty) suffix, whose last part is fully specified and whose tail is partially specified 
 op hasSuffix : Lab List{String} Lab -> Bool .
ceq hasSuffix(L'' L' L, Ls, L) = true if Ls == strLab(L') . 
 eq hasSuffix(L, Ls, L') = false [owise] .
 *** simplest version
 op hasSuffix : Lab Lab -> Bool .
 eq hasSuffix(L L', L') = true .
 eq hasSuffix(L, L') = false [owise] .
 *** checks both the suffix and the prefix of a label
 op match : Lab List{String} Lab -> Bool .
ceq match(L'' L' L, Ls, L) = true if Ls == strLab(L'') .
 eq match(L, Ls, L') = false [owise] .
 *** checks only the prefix 
 op match : Lab List{String} -> Bool .
ceq match(L' L, Ls) = true if Ls == strLab(L') .
 eq match(L, Ls) = false [owise] .
endfm

*** default view
view Plab from TRIV to PLAB is 
 sort Elt to NeLab . 
endv
