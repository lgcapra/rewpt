in TMATRIX
in shared/MAP-SET

*** simile a def in modSPT ma elementi invertiti, l e q al posto di t e Q ...
fmod PT-NET{L :: TRIV, PL :: TRIV} is
 pr MAP-SET{L,Tmatrix{PL}} * (sort Map{L,Tmatrix{PL}} to Net, sort Entry{L,Tmatrix{PL}} to Tran, op emptyM to emptyNet) .
 sort System .
 
 vars L L' : L$Elt . vars T T' : Tran . vars N N' : Net .
 vars P P' : Place . vars M I O H : Pbag . vars K K'  : NzNat .
 vars Q Q' : Tmatrix . var  S : Pset .
 
 op __ : Net Pbag -> [System] [ctor] .
 *** cmb N M : System if N =/= emptyNet and-then repeatedKeys?(N) == false . *** a PT system cannot be "empty" and have duplicated transitions
 cmb N M : System if N =/= emptyNet . *** a PT system cannot be "empty" and have duplicated transitions
 op n : System -> Net .
 op m : System -> Pbag .
 eq n(N M) = N .
 eq m(N M) = M .
 op l : Tran -> L$Elt .
 op q : Tran -> Tmatrix .
 eq l(L |-> Q) = L .
 eq q(L |-> Q) = Q .
 
 ceq N K . P + M = N M if in(N, P) = false . *** removes isolated places
 eq L |-> [nilP, nilP, nilP] = emptyNet . *** removes isolated transitions
*** eq L |-> [M,M,H] = emptyNet [metadata "null t"] . *** removes transitions not changing the marking
*** ceq L |-> [K . P + I, O, K' . P + H] = emptyNet if K >= K' [metadata "dead t"] . *** removes structurally dead transitions

 op enabled : Tran Pbag -> Bool .
 eq enabled(L |-> [I,O,H], M) = I <= M and-then H > M . 

 op firing : Tran Pbag -> Pbag .
 eq firing(L |-> [I,O,H], M) = (M - I) + O .
 
 op dead : Tran -> Bool .  *** checks for structurally dead transitions 
 eq dead(L |-> [K . P + I, O, K' . P + H]) = K >= K' [metadata "dead t"] .
 eq dead(Q:Tran) = false [owise] .

 op in :  Net Place -> Bool . *** test the existence of a place
ceq in(L |-> Q ; N, P) = true if in (Q, P) .
 eq in(N, P) = false [owise] .

 op in :  Net L$Elt -> Bool . *** test the existence of a transition
 eq in(N, L) = $hasMapping(N, L) .

 
 op places : Net -> Pset [memo] .
 eq places(N) = $places(N, emptyPset) .  
 op $places : Net Pset -> Pset . 
 eq $places(emptyNet, S) = S . 
 eq $places(L |-> Q ; N, S) = $places(N, S U places(Q)) .

 op transitions : Net -> Set{L} .
 eq transitions(N) = keySet(N) .

 *** computes the system's enabled transitions (outcome seen as a sub-Net) 
  op haveConcession : System -> Net [memo] .
  eq haveConcession(S:System) = $haveConcession(S:System, emptyNet) .
  op $haveConcession : System Net -> Net .
  eq $haveConcession(emptyNet M, N) = N .
ceq $haveConcession((T ; N) M, N') = $haveConcession(N M, T ; N') if enabled(T, M) .
 eq $haveConcession((T ; N) M, N') = $haveConcession(N M, N') [owise] . 

 ***  merges two transitions by assigning the resulting one the specified label
 op merge : Tran  Tran L$Elt -> Tran .
 eq merge(T, T', L) = L |-> q(T) + q(T') .
 *** aggregates two transitions by assigning the resulting one the specified label
 op aggr : Tran  Tran L$Elt -> Tran .
ceq aggr(T, T', L) = L |-> [I(Q), O(Q'), H(Q) + H(Q')] if Q := q(T) /\ Q' := q(T') .

endfm