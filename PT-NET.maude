in TMATRIX
in shared/MAP-SET

*** def. separata rete - sistema
fmod PT-NET{L :: TRIV, PL :: TRIV} is
 generated-by MAP-SET{L,Tmatrix{PL}} * (sort Map{L,Tmatrix{PL}} to Net, sort Entry{L,Tmatrix{PL}} to Tran, op emptyM to emptyNet,
                                        op emptyS to emptySlab) .
 
 vars L L' : L$Elt . vars T T' : Tran . vars N N' : Net .
 vars P P' : Place . vars M I O H : Pbag . vars K K'  : NzNat .
 var Q : Tmatrix . var  S : Pset .
 
 ops l lab : Tran -> L$Elt .
 eq lab(T) = l(T) .
 op q : Tran -> Tmatrix .
 eq l(L |-> Q) = L .
 eq q(L |-> Q) = Q .
 ops I O H : Tran -> Pbag .
 eq I(T) = I(q(T)) .
 eq O(T) = O(q(T)) .
 eq H(T) = H(q(T)) .
 
 eq L |-> [nilP, nilP, nilP] = emptyNet . *** removes isolated transitions
*** eq L |-> [M,M,H] = emptyNet [metadata "null t"] . *** removes transitions not changing the marking
ceq L |-> [K . P + I, O, K' . P + H] = emptyNet if K >= K' [metadata "dead t"] . *** removes structurally dead transitions

 op enabled : Tran Pbag -> Bool .
 eq enabled(L |-> [I,O,H], M) = I =/= O and-then I <= M and-then H > M . 

 op firing : Tran Pbag -> Pbag .
 eq firing(L |-> [I,O,H], M) = (M - I) + O .
 
 op dead : Tran -> Bool .  *** checks for structurally dead transitions 
 eq dead(L |-> [K . P + I, O, K' . P + H]) = K >= K' [metadata "dead t"] .
 eq dead(Q:Tran) = false [owise] .

 op in :  Net Place -> Bool . *** test the existence of a place
ceq in(L |-> Q ; N, P) = true if in (Q, P) .
 eq in(N, P) = false [owise] .

 op in :  Net L$Elt -> Bool . *** test the existence of a transition
 eq in(N, L) = $hasMapping(N, L) .

 ops isIn isOut isInH : Net Place -> Bool . *** check the existence of a place of given type
 eq isIn(L |-> [I + K . P, O, H] ; N, P) = true .
 eq isIn(N, P) = false [owise] .
 eq isOut(L |-> [I, O + K . P, H] ; N, P) = true .
 eq isOut(N, P) = false [owise] .
 eq isInH(L |-> [I, O, H + K . P] ; N, P) = true .
 eq isInH(N, P) = false [owise] .
 
 op places : Net -> Pset [memo] .
 eq places(N) = $places(N, emptyPset) .  
 op $places : Net Pset -> Pset . 
 eq $places(emptyNet, S) = S . 
 eq $places(L |-> Q ; N, S) = $places(N, S U places(Q)) .

 op transitions : Net -> Set{L} .
 eq transitions(N) = keySet(N) .

endfm