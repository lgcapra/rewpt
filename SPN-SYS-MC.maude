in SPN

*** rewrite rule encoding for deriving a CTMC


*** match for the firing rule
fmod FIREMATCH is
 pr SPN .
 sort Firematch .
 op <_,_,_> : Net Tran Pbag -> Firematch [ctor] .   
endfm


*** default view
view Firematch from TRIV to FIREMATCH is 
 sort Elt to Firematch . 
endv

*** match for the merge rule
fmod MERGEMATCH is
 pr SPN .
 sort Mergematch .
 op <_,_,_,_> : Net Tran Tran Pbag -> Mergematch [ctor] .   
endfm


*** default view
view Mergematch from TRIV to MERGEMATCH is 
 sort Elt to Mergematch . 
endv

mod SPN-SYS-MC is
 ***inc SPN . 
 inc SET+{Firematch} * (op emptyS to noMatch) .
 inc MAP+{Pbag,Float} * (op emptyM to  emptyMTR) .
 
  vars N  N' : Net .
  var S : System .
  var X : Set{Firematch} .
  vars M M' : Pbag .
  vars P P' : Place . 
  var L : Tlab .
  var Q : Tmatrix .
  vars T T' : Tran .
  vars K K' D : NzNat .
  var R : Float .
  var RS : Map{Pbag,Float} .
  
 *** firing rule matches: STESSA struttura per ogni regola
 op firing-matches : System -> Set{Firematch} [memo].
 eq firing-matches(S) = $firing-matches(S, noMatch) .
 op $firing-matches : System Set{Firematch} -> Set{Firematch} .
 ceq $firing-matches(S, X) = $firing-matches(S, < N,T,M > U X) if (T ; N) M := S /\ enabled(T, M) /\ < N,T,M > in X = false .
 eq $firing-matches(S, X) = X [owise] .
  *** rule application
 op firing-app : Firematch -> System .
 eq firing-app(< N,T,M >) = (T ; N) firing(T, M) .
 *** optimized
 op firing-app : Tran Pbag -> Pbag .
 eq firing-app(T, M) = firing(T, M) .
 *** state transitions due to the rule firing -- grouped by rate
  op firing-state-trans : System -> Map{Pbag,Float} [memo] .
  eq firing-state-trans (S) = $firing-state-trans (firing-matches(S),  emptyMTR) .
  op $firing-state-trans : Set{Firematch} Map{Pbag,Float} -> Map{Pbag,Float} .
  eq $firing-state-trans (noMatch, RS) = RS .
 ceq $firing-state-trans (< N,T,M > U X, M' |-> R ; RS) =  $firing-state-trans (X, M' |-> firing-rate(T, M) + R ; RS) if  M' := firing-app(T, M) .
  eq $firing-state-trans (< N,T,M > U X, RS) =  $firing-state-trans (X, firing-app(T,M) |-> firing-rate(T, M) ; RS) [owise] .

 sort SysState .
 *** description of a PT system pointing out the state-transitions, gathered by firing-rate
 op SYS:_ STRAN:_ : System Map{Pbag,Float} -> SysState [ctor format (n d n d d)] .
 *** translates a System term into a SysState
 op toSysState : System -> SysState .
 eq toSysState(S) = SYS: S STRAN: firing-state-trans (S) . 
*** firing rule encoded according to the new state representation
rl [firing] : SYS: N M STRAN: (M' |-> R ; RS)  => toSysState(N M') .
 
endm
