in ../PBAG
in ../SPN

*** abstract specification of a multiformalism network based on shared places (L is the place label)
fmod NETWORK{L :: TRIV} is 
 protecting PBAG{L}  .
 protecting EXT-BOOL .
 sorts Node Network NetSys .
 subsort Node < Network .
 op emptyNetW : -> Network .
 op _,_ : Network Network -> Network [ctor assoc comm prec 123 id: emptyNetW] .
 op __ : Network Pbag -> NetSys [ctor prec 125] . *** network with associated state (lowest priority)
 op netw : NetSys -> Network .
 op state : NetSys -> Pbag .
 var N : Network .
 var S : Pbag .
 eq netw((N S))  = N .
 eq state((N S)) = S .
endfm

*** single-server elementary queue
fmod EL-QUEUE{L :: TRIV} is
  protecting PLACE{L} .
  protecting FLOAT .
  sort ElQueue .
  op _@_ : Place{L} Float -> ElQueue [prec 19 ctor] . *** an elementary queue is described by a place and a service rate
  op mu : ElQueue -> Float .
  op p : ElQueue -> Place{L} .
  var P : Place{L} .
  var F : Float .
  eq mu(P @ F)  = F .
  eq p(P @ F) = P .
endfm

*** default view to EL-QUEUE
view ElQueue{L :: TRIV} from TRIV to EL-QUEUE{L} is
   sort Elt to ElQueue .
endv

in ../shared/ELIST

*** multi-class queues built over elementary queues 
fmod QUEUE{L :: TRIV} is 
  protecting ELIST{ElQueue{L}} * (op _,_ to __, sort Elist{ElQueue{L}} to Elist{ElQueue}, sort NeElist{ElQueue{L}} to NeElist{ElQueue}, 
                                  sort List{ElQueue{L}} to List{ElQueue}, sort NeList{ElQueue{L}} to NeList{ElQueue}) .
  protecting PBAG{L} . 
  sorts Queue Place* .
  subsort Place{L} < Place* .
  op null : -> Place* . *** represents a null end-point for a queue
  op _>_ : NeElist{ElQueue} Place* -> Queue [ctor] .
  vars Q Q' : ElQueue .
  vars LQ LQ' LQ'' : List{ElQueue} . 
  var NeLQ : NeList{ElQueue} .
  var B : Pbag . 
  var P : Place* .
  op well-def : NeList{ElQueue} -> Bool .
 ceq well-def(LQ Q LQ' Q' LQ'') = false if p(Q) = p(Q') .
  eq well-def(Q LQ) = true [owise] . 
  op clients : List{ElQueue} Pbag -> [Nat] .
 ceq clients(Q LQ, B) = B[p(Q)] + clients(LQ, B) if well-def(Q LQ) .
  eq clients(nil, B) = 0 .
endfm

*** signature of a network of queues and SPN
fmod QSPN{L :: TRIV} is
  protecting NETWORK{L} .
  protecting SPN-SIG{String, L} .
  protecting QUEUE{L} .
  subsort Net Queue < Node .
  vars N N' : Net .
  var NW : Network .
  eq N, N' = N ; N' . *** reduces equivalent terms to syntactically identical
endfm

*** system module describing the state-transitions of a network (including the corresponding rate) 
mod QSPN-REW{L :: TRIV} is 
   inc QSPN{L} .
   inc CONVERSION .
   var N : Network .
   vars Q Q' : ElQueue .
   vars LQ LQ' LQ'' : List{ElQueue} . 
   var NeLQ : NeList{ElQueue} . 
   var P : Place* .
   vars B B' : Pbag . 
   var K : NzNat .
   var rate : Float .
   var T : Tran .
   crl [q-inner] : (N, [NeLQ]> P) B => (N, [NeLQ]> P) (B - 1 . p(Q)) + 1 . p(Q') if LQ Q Q' LQ := NeLQ 
         /\ mu(Q) > 0.0 /\ K := B[p(Q)] /\ K > 0 /\ rate := mu(Q) * float(K) / float(clients(NeLQ, B)) .
   crl [q-final] : (N, [NeLQ]> P) B => (N, [NeLQ]> P) (B - 1 . p(Q)) + if P == null then nilP else 1 . P fi 
       if LQ Q := NeLQ /\ mu(Q) > 0.0 /\ K := B[p(Q)] /\ K > 0 /\ rate := mu(Q) * float(K) / float(clients(NeLQ, B)) .
   crl [spn-t] : (N, T) B => (N, T) firing(T, B) if enabled(T, B) /\ rate := firingrate(T, B) .

endm


mod QSPN-EXE is
  inc QSPN-REW{Nat} .
endm

*** example of search
***  search t("a", 1.0, 1 ) |-> [1 . p(3), 1 . p(0), nilP], [p(0) @ 1.0 p(1) @ 2.0]> null 1 . p(3) + 1 . p(1) =>! N:NetSys .