in ../PBAG
in ../shared/MSET
in ../../lambda/MONOID

*** the parameter defines a state as commutative monoid
fmod NETWORK{S :: C-MONOID} is 
 protecting EXT-BOOL .
 sorts Node Network NetSys .
 subsort Node < Network .
 op emptyNetW : -> Network [ctor] .
 op _,_ : Network Network -> Network [ctor assoc comm prec 123 id: emptyNetW] .
 op _:_ : Network S$Elt -> NetSys [ctor prec 125] . *** network with associated state (lowest priority)
 op netw : NetSys -> Network .
 op state : NetSys -> S$Elt .
 vars N N' : Network .
 var M : S$Elt .
 eq netw((N : M))  = N .
 eq state((N : M)) = M .
 op remove : Network Network -> Network .
 eq remove((N, N'), N) = N' .
 eq remove(N, N') = N [owise] .
 op in : Network Network -> Bool .
 eq in((N, N'), N) = true .
 eq in(N, N') = false [owise] .
endfm

view S-Pbag{PL :: TRIV} from C-MONOID to PBAG{PL} is 
 sort Elt to Pbag .
 op 0 to nilP .
endv

*** network using a multiset of places (a marking) as distributed state --  the parameter defines the place label
fmod NETWORK-MARKING{PL :: TRIV} is
  protecting NETWORK{S-Pbag{PL}} .
endfm