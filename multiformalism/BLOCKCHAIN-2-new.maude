*** the blockchain example (valuetools) -- based on solution 2 
in SPN-NODE-2
in MC-NODE-2

mod BLOCKCHAIN{PL :: TRIV} is
  inc NETWORK-SYS{SpnNode{PL}}   * (sort Network{SpnNode{PL}} to  Network{Net}, sort NetSys{SpnNode{PL}} to  NetSys{Net}) .
  inc NETWORK-SYS{JsqNode{PL}}   * (sort Network{JsqNode{PL}} to  Network{Jsq}, sort NetSys{JsqNode{PL}} to  NetSys{Jsq}) .
  inc NETWORK-SYS{QueueNode{PL}} * (sort Network{QueueNode{PL}} to  Network{Queue}, sort NetSys{QueueNode{PL}} to  NetSys{Queue}) .
  inc MC{PL} . *** or MC-NEW
  sort MMnetwork . *** markov modulated network
  op MM:_N:_ : Mc NetSys -> MMnetwork .
endm

*** model using Nat as place labels
mod BLOCKCHAIN-NAT is
  inc BLOCKCHAIN{Nat} .
  *** creates a pool of similar K elementary nets working in parallel 
  var q : ElQueue . vars Nq : Network . var K : NzNat . vars P P' : Place . var R : Float . vars i j : Nat .
  *** creates a new elementary queue (places may have a capacity)
  op newElQueue : Place Place Float -> [ElQueue] .
  *** creates a "copy" of the given place using the offset for the index
  op repl : Place Nat -> Place .
  eq repl(p(i, K), j) = p(i + j, K) .
  eq repl(p(i), j) = p(i + j) .
 ceq newElQueue(P, P', R) = P @ R > P' if P =/= P' . 
  op pool : ElQueue NzNat -> Network{Queue} .  
  eq pool(q, K) = $pool(q, K, emptyNetW) .
  op $pool  : ElQueue Nat Network -> Network{Queue} .
  eq $pool(q, 0, Nq) = Nq .
 ceq $pool(q, K, Nq) = $pool(q, K - 1, (Nq, newElQueue(repl(P', K - 1), P, R))) if P' @ R > P := q .

  
  *** the modulating MC
  op mmc : -> Mc .
  eq mmc = (1.0 |-> [1 . p(10), 1 . p(11)] ; 2.0 |-> [1 . p(11), 1 . p(10)]) s: p(10) .
  
  *** the buffer component
  ops net : -> Net  [memo] .
  op N : -> NzNat [memo] . *** timeout parameter
  eq N = 2 .
  eq net =  t("new", 2.0, 1) |-> [nilP, 1 . p(1,N)] ; 
            t("collect", 1.0, 1)  |-> [N . p(1,N), N . p(2,N)] ;
            t("timeout", 0.2, 1)  |-> [1 . p(3), 1 . p(3)] f: p(1,N) >> p(2,N) ;
            t("continue", 1.0, 1) |-> [nilP, nilP] f: p(2,N) >> p(4,1) .           
  
  *** JSQ
  op jsq1 : -> Jsq [memo] .
  eq jsq1 = p(4,1) |> p(6,N) U p(7,N) . 
  
  *** Queues
  ops q1 q2 : -> ElQueue  [memo] .
  eq  q1  = p(7, N) @ 1.0 > p(0, N) .
  eq  q2  = p(6, N) @ 1.0 > p(0, N) .
  op cpu : -> Network{Queue} .
  eq cpu = pool(q1, 6) .
 
  
  *** the network (blockchain)
  ops m0  : -> Pbag  [memo] .  
  op netsys : -> NetSys .
  eq netsys = (net, jsq1, q1, q2) : m0 .
  eq m0  =  1 . p(3) .

  *** MM network
  op MMnet : -> MMnetwork .
  eq MMnet = MM: mmc N: netsys .  
endm