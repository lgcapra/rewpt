in PT-NET

*** rewrite rule encoding for deriving a CTMC

*** match for the firing rule
fmod FIREMATCH is
 pr PT-NET .
 sort Match .
 op <_,_,_> : Net ImatrixT BagP -> Match [ctor] .   
endfm


*** default view
view Match from TRIV to FIREMATCH is 
 sort Elt to Match . 
endv

mod PT-SYS is
 
 inc SET+{Match} * (op emptyS to noMatch) .
 inc MAP+{BagP,Float} * (sort Entry{BagP,Float} to Fclass, sort Map{BagP,Float} to Rset-firing, 
                          op emptyM to emptyR, op _|->_ to _<-|_ ) .
 inc CONVERSION .

 vars N  N' : Net .
 var S : System .
 var X : Set{Match} .
 vars M M' : BagP .
 var P : Place .
 var T : Tran .
 var I : ImatrixT .
 var Q : Imatrix .
 var K : Nat .
 var R : Float .
 var RS : Rset-firing .
 *** firing rule rates
 op rates-firing : ImatrixT -> Float .
 eq rates-firing(I) = rate(t(I)) .
 op rates-firing : ImatrixT BagP -> Float . *** alternative (marking dependent, e.g., based on the enabling degree)
 eq rates-firing(I, M) = rate(t(I)) * float(enabdegree(Q(I), M)) .
 op enabdegree : Imatrix BagP -> NzNat .
 *** definition of enabdegree 

 *** firing rule matches
 op matches-firing : System -> Set{Match} [memo].
 eq matches-firing(S) = $matches-firing(S, noMatch) .
 op $matches-firing : System Set{Match} -> Set{Match} .
ceq $matches-firing((I ; N) M, X) = $matches-firing((I ; N) M, < N,I,M > U X) if enabled(I, M) /\ < N,I,M > in X = false .
 eq $matches-firing(S, X) = X [owise] .
 *** rule application
 *** op ruleapp-firing : Match -> System .
 *** eq ruleapp-firing(< N,I,M >) = (I ; N) firing(I, M) .
 *** optimized
 op ruleapp-firing : ImatrixT BagP -> BagP .
 eq ruleapp-firing(I, M) = firing(I, M) .
 *** state transitions due to the rule firing -- grouped by rate
  op state-trans-firing : System -> Rset-firing [memo] .
  eq state-trans-firing(S) = $state-trans-firing(matches-firing(S), emptyR) .
  op $state-trans-firing : Set{Match} Rset-firing -> Rset-firing .
  eq $state-trans-firing(noMatch, RS) = RS .
 ceq $state-trans-firing(< N,I,M > U X, M' <-| R ; RS) =  $state-trans-firing(X, M' <-| rates-firing(I) + R ; RS) if  M' := ruleapp-firing(I,M ) .
  eq $state-trans-firing(< N,I,M > U X, RS) =  $state-trans-firing(X, ruleapp-firing(I,M) <-| rates-firing(I) ; RS) [owise] .

 sort SysState .
 *** description of a PT system pointing out the state-transitions, gathered by rates-firing
 op SYS:_ STRAN:_ : System Rset-firing -> SysState [ctor format (n d n d d)] .
 *** translates a System term into a SysState
 op toSysState : System -> SysState .
 eq toSysState(S) = SYS: S STRAN: state-trans-firing(S) . 
*** firing rule encoded according to the new state representation
rl [firing] : SYS: N M STRAN: (M' <-| R ; RS)  => toSysState(N M') .
 
endm