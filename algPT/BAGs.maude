in ../shared/BAG
in ../shared/MAP+
in ../PLACE


*** marking of a single place 
fmod P-MARK{X :: TRIV} is
  protecting BOOL .
  protecting PLACE .
  protecting BAG{X} .
  sort Pmark{X} .
  op _|->_ : Place Bag{X} -> Pmark{X} [ctor] .
  var X : X$Elt .
  var B : Bag{X} .
  var P : Place .
  *** op mp : Pmark{X} -> Bag{X} .
  *** eq mp(P |-> B) = B .
endfm


*** marking of an algebraic net of uniform type
fmod MARK{X :: TRIV} is
  protecting P-MARK{X} .
  sort Mark{X} .
  subsort Pmark{X} < Mark{X} .

  op empty : -> Mark{X} [ctor] .
  op _,_ : Mark{X} Mark{X} -> Mark{X} [ctor assoc comm id: empty prec 121 format (d r os d)] .
  op undefined : -> [Bag{X}] [ctor] .

  var P : Place .
  vars B B' : Bag{X} .
  var M : Mark{X} .

  op insert : Place Bag{X} Mark{X} -> Mark{X} .
  eq insert(P, B, (M, P |-> B')) =
     if marked(M, P) then insert(P, B, M)
     else (M, P |-> B)
     fi .
  eq insert(P, B, M) = (M, P |-> B) [owise] .

  op _[_] : Mark{X} Place -> [Bag{X}] [prec 23] .
  eq (M, P |-> B)[P] =
     if marked(M, P) then undefined
     else B
     fi .
  eq M[P] = undefined [owise] .

  op marked : Mark{X} Place -> Bool .
  eq marked((M, P |-> B), P) = true .
  eq marked(M, P) = false [owise] .
endfm

*** marking of any algebraic net (an example)
fmod PN-MARK is 
 pr P-MARK{Nat} * ( op nil to nilN) .
 pr (P-MARK * (op nil to nilS)){List{Nat}}  .
 sorts Pmarking Marking Bag .
 subsort Pmark{Nat} Pmark{List{Nat}} < Pmarking < Marking .
 subsort Bag{Nat} Bag{List{Nat}} < Bag . 
 op empty : -> Marking [ctor] .
 op _,_ : Marking Marking -> Marking [ctor assoc comm id: empty prec 121 format (d r os d)] .
 *** op undefined : -> [Bag{X}] [ctor] .

 var P : Place .
 vars B B' : Bag .
 var M : Marking .
 var PM : Pmarking . 

*** op insert : Place Bag{X} Mark{X} -> Mark{X} .
*** eq insert(P, B, (M, P |-> B')) =
***      if marked(M, P) then insert(P, B, M)
***      else (M, P |-> B)
***      fi .
*** eq insert(P, B, M) = (M, P |-> B) [owise] .

*** op _[_] : Mark{X} Place -> [Bag{X}] [prec 23] .
*** eq (M, P |-> B)[P] =
***      if marked(M, P) then undefined
***      else B
***      fi .
*** eq M[P] = undefined [owise] .

op marked : Marking Place -> Bool .
eq marked((M, P |-> B), P) = true .
eq marked(M, P) = false [owise] .

endfm

mod ALG-NET is
 pr PN-MARK .
 var P : Place .
 var B : Bag{List{Nat}} .
 var M : Marking .
 var L : NeList{Nat} .
 *** rl [t1] : p(1) |-> B  => empty .
 rl [t1] : 1 . L  => nilS .
 *** rl [t2] : L  => nil .
endm