in ../shared/MSET
in ./ELIST
in ../PLACE

**** Algebraic PN specification ***

*** abstract specification of an algebraic net's marking
fmod ALGPN-MARKING{PL :: TRIV} is 
 protecting PLACE{PL}  .
 protecting EXT-BOOL .
 sorts Pmarking Marking .
 subsort Pmarking < Marking .
 op emptyM : -> Marking [ctor] .
 op _;_ : Marking Marking -> Marking [ctor assoc comm id: emptyM prec 121 format (d r os d)] .
 op place : Pmarking -> Place{PL} .
 var P  : Place{PL} .
 vars Mp Mp' : Pmarking .
 var M : Marking .
 op undefined : -> [Pmarking] .
 *** look-up
 op _[_] : Marking Place{PL} -> [Pmarking] [prec 23] .
ceq (M ; Mp)[P] = Mp if place(Mp) = P /\ not($marked(M, P)) .
 eq M[P] = undefined [owise] .
 op $marked : Marking Place{PL} -> Bool .
ceq $marked((M ; Mp), P) = true if place(Mp) = P .
  eq $marked(M, P) = false [owise] .
endfm

*** AL-PN submarking of specific type (1st parameter) parametric in the label of places
fmod MARKING{X :: TRIV, PL :: TRIV} is
  extending ALGPN-MARKING{PL} .
  protecting MSET-BAG{X}  .
  *** sorts Pmarking{X}  Marking{X} .
  **** subsort Pmarking{X} < Pmarking Marking{X} .
  *** subsort Marking{X}  < Marking .
  *** op _|->_ : Place{PL} Bag{X} -> Pmarking{X} [ctor] .
  op _|->_ : Place{PL} Bag{X} -> Pmarking [ctor] .
  **** op _;_ : Marking{X} Marking{X} -> Marking{X} [ctor ditto] . *** overloading
  var B  : Bag{X} .
  var P  : Place{PL} .
  eq place(P |-> B) = P .
  *** op mark : Pmarking{X} -> Bag{X} . *** careful! must be renamed when importing multiple times the module 
  op mark : Pmarking -> Bag{X} . *** careful! must be renamed when importing multiple times the module 
  eq mark(P |-> B) = B .
endfm


*** alternative representation of place marking based on MSET
fmod MSET-MARKING{X :: TRIV, PL :: TRIV} is
  extending ALGPN-MARKING{PL} .
  protecting MSET-BAG{X} .
  sorts PmsetMarking{X}  MsetMarking{X} .
  subsort PmsetMarking{X} < Pmarking MsetMarking{X} .
  subsort MsetMarking{X}  < Marking .
  op _|->_ : Place{PL} Mset{X} -> PmsetMarking{X} [ctor] .
  op _;_ : MsetMarking{X} MsetMarking{X} -> MsetMarking{X} [ctor ditto] . *** overloading
  var B  : Mset{X} .
  var P  : Place{PL} .
  eq place(P |-> B) = P .
  op mark : PmsetMarking{X} -> Mset{X} . *** careful! must be renamed when importing the module 
  eq mark(P |-> B) = B .
endfm


*** EXAMPLE 1: algebraic net using (embedded) lists of naturals 
mod ALG-PN-EXE is
 *** types of places
 *** we rename nil for convenience because it denotes both a BAG and a LIST
 pr MARKING{Nat,String} * (op nil to nilNat) . 
 pr MARKING{Elist{Nat},String} * (op nil : -> List{Nat} to nilL, op nil : -> Bag{Elist{Nat}} to nilB, op mark to markL) . *** renaming mark is mandatory !
 
 op init : -> Marking . *** alias - intial marking
 eq init =  p("1") |-> 1 . [nilL] ; p("2") |-> 2 . 1 + 3 . 2 . *** the list in p1 is initially empty 
 
 var M : Marking .
 var B : Bag{Nat} .
 var L : List{Nat} .
 var LB : Bag{Elist{Nat}} .
 var X : Nat .
 vars K K' K'' : NzNat .
 
  *** net transitions are encoded as rewrite rules

  *** given (at least) two occurrences of an element in p2, t1 withdraws one by appending it to the list in p1 
  crl [t1] : p("1") |-> 1 . [L]  ;  p("2") |-> K . X + B => p("1") |-> 1 . [L ; X] ; p("2") |-> sd(K,1) . X + B  if K > 1 . *** ok
  ***  rl  [t1-wrong] : p("1") |-> 1 . [L] ; p("2") |-> 2 . X + B => p("1") |-> 1 . [L X] ; p("2") |->  1 . X + B  . *** matches only the term 2 . X + B
  
  *** ncopies is defined in modified prelude 
 *** removes K elements from p2 by appending them to the list in p1 
 *** rl [t2] : p("1") |-> 1 . [L] ; p("2") |-> K . X + B => p("1") |-> 1 . [L ncopies(X, K)] ; p("2") |->  B  . *** works
 
  *** example of non deterministic-rule using TICK
  *** inc TICK .
 *** crl [t4] : p("1") |-> 1 . [L] ; p("2") |-> K . K'' + B => p("1") |-> 1 . [L ncopies(sd(K, K'), K'')] ; p("2") |-> K' . K'' + B if  @ K => @ K' /\ K' < K .
endm

*** same example using the alternative representation of multisets (only the 1st rule)
mod ALG-PN-EXE-2 is
 pr MSET-MARKING{Nat,String} . *** renaming mark is mandatory !
 pr MSET-MARKING{Elist{Nat},String} *  (op nil : -> List{Nat} to nilL, op nil : -> Bag{Elist{Nat}} to nilB, op mark to markL) . *** renaming mark is mandatory  
 
 op init : -> Marking . *** alias - intial marking
 eq init =  p("1") |-> [nilL] ; p("2") |-> 1 1 2 2 2 . 
 
 var M : Marking .
 var B : Mset{Nat} .
 var L : List{Nat} .
 var LB : Mset{Elist{Nat}} .
 var X : Nat .
 vars K K' K'' : NzNat .
 *** given (at least) two elements in p2, t1 withdraws one by appending it to the list in p1 
 rl [t1-bis] : p("1") |-> [L]  ;  p("2") |-> X X B => p("1") |-> [L ; X] ; p("2") |-> X B . *** ok
endm



*** redefinition of ALG-PN-EXE with sort-op renaming (so that the base and meta levels components of Marking are disjoint)
*** all (subs)orts and ops of Marking should be renamed (to avoid conflicts, warnings for multiple imports, etc)
*** the star symbol is appended to sorts and ops names - here the star means level 0, no star the meta-level 
*** the renaming of sorts Marking and Pmarking is mandatory, the others ara mndatory only if in the meta-level some places
*** have the same type as level-0 places: in the example below, Marking{Nat} is used in both levels (better an automatic renaming)
 mod ALG-PN-EXE* is 
    inc ALG-PN-EXE * (sort Marking to Marking*, sort Pmarking to Pmarking*,
                      sort Marking{Nat} to Marking*{Nat}, sort Pmarking{Nat} to Pmarking*{Nat},
                      sort Marking{Elist{Nat}} to Marking*{Elist{Nat}}, sort Pmarking{Elist{Nat}} to Pmarking*{Elist{Nat}},
                      op markN to markN*,  op markL to  markL*,
                      op emptyM to emptyM*, op init to init*, op undefined to undefined*, op _|->_ to _*|->_ ) .
endm

*** view to renamed  ALG-PN-EXE
view AlgPNexe* from TRIV to ALG-PN-EXE* is 
      sort Elt to Marking* . 
endv


***  EXAMPLE 2: nested algebraic net: two places have as domain the alg-net defined above; the third place share the domain (Nat) with the base-level
mod NEST-ALG-PN-EXE is
  inc MARKING{AlgPNexe*,String} .
  inc MARKING{Nat,String} * (op nil to nilNat , op mark to markN) .
  op init : -> Marking . *** meta-net initial marking
  eq init = p("0") |-> 1 . init* ; p("1") |-> 1 . init* ; p("3") |-> 2 . 3 .
  var M : Marking* .
  var K : NzNat .
  var B : Bag{AlgPNexe*} .
  rl [meta-r] : p("0") |-> K . M ; p("1") |-> B  => p("0") |-> sd(K,1) . M ; p("1") |->  1 . M + B . *** one algebraic net is moved from p("0") to p("1")
endm


