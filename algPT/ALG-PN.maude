in ./BAG
in ./ELIST
in ../PLACE

**** Algebraic PN specification ***

*** abstract specification of an algebraic net's marking
fmod ALGPN-MARKING is 
 protecting PLACE{Nat}  .
 protecting EXT-BOOL .
 sorts Pmarking Marking .
 subsort Pmarking < Marking .
 op emptyM : -> Marking [ctor] .
 op _;_ : Marking Marking -> Marking [ctor assoc comm id: emptyM prec 121 format (d r os d)] .
 op place : Pmarking -> Place .
 op welldef : Marking -> Bool .
 var P  : Place .
 vars Mp Mp' : Pmarking .
 var M : Marking .
ceq welldef((Mp ; Mp' ; M)) = false if place(Mp) = place(Mp') .
 eq welldef(M) = true  [owise] .
 op undefined : -> [Pmarking] .
 *** look-up
 op _[_] : Marking Place -> [Pmarking] [prec 23] .
ceq (M ; Mp)[P] = Mp if place(Mp) == P and-then $marked(M, P) = false .
 eq M[P] = undefined [owise] .
 op $marked : Marking Place -> Bool .
ceq $marked((M ; Mp), P) = true if place(Mp) = P .
  eq $marked(M, P) = false [owise] .
endfm

*** submarking of specific type
fmod MARKING{X :: TRIV} is
  extending ALGPN-MARKING .
  protecting BAG{X} .
  sorts Pmarking{X}  Marking{X} .
  subsort Pmarking{X} < Pmarking .
  subsort Marking{X}  < Marking .
  op _|->_ : Place Bag{X} -> Pmarking{X} [ctor] .
  op _;_ : Marking{X} Marking{X} -> Marking{X} [ctor ditto] . *** overloading
  var B  : Bag{X} .
  var P  : Place .
  eq place(P |-> B) = P .
  op mark : Pmarking{X} -> Bag{X} . *** careful! must be renamed when importing the module 
  eq mark(P |-> B) = B .
endfm

*** parameterized view to MARKING
view Marking{X :: TRIV} from TRIV to MARKING{X} is 
 sort Elt to Marking{X} . 
endv


*** count-down - used to simulate non-deterministic rewrites
mod TICK is
  protecting NAT .
  sort Tick .
  op @_ : Nat -> Tick .  
  rl [tick] : @ X:NzNat =>  @ sd(X:NzNat, 1)  .
endm

*** EXAMPLE 1: algebraic net using (embedded) lists of naturals 
mod ALG-PN-EXE is
 *** types of places
 *** we rename nil for convenience because it denotes both a BAG and a LIST
 pr MARKING{Nat} * (op nil to nilNat , op mark to markN) . *** renaming mark is mandatory !
 pr MARKING{Elist{Nat}} * (op nil : -> List{Nat} to nilLnat, op nil : -> Bag{Elist{Nat}} to nilELnat, op mark to markListN) .
 
 op init : -> Marking . *** alias - intial marking
 eq init =  p(1) |-> 1 . [nilLnat] ; p(2) |-> 2 . 1 + 3 . 2 . *** the list in p1 is initially empty 
 
 var M : Marking .
 var B : Bag{Nat} .
 var L : List{Nat} .
 var LB : Bag{Elist{Nat}} .
 var N : Nat .
 vars K K' K'' : NzNat .
 
  *** net transitions are encoded as rewrite rules

  *** given (at least) two elements in p2, t1 withdraws one by appending it to the list in p1 
  crl [t1] : p(1) |-> 1 . [L]  ;  p(2) |-> K . N + B => p(1) |-> 1 . [L N ] ; p(2) |-> sd(K,1) . N + B  if K > 1 . *** ok
  ***  rl  [t1-wrong] : p(1) |-> 1 . [L] ; p(2) |-> 2 . N + B => p(1) |-> 1 . [L N] ; p(2) |->  1 . N + B  . *** matches only the term 2 . N + B
 
 *** removes K elements from p2 by appending them to the list in p1 
  rl [t2] : p(1) |-> 1 . [L] ; p(2) |-> K . N + B => p(1) |-> 1 . [L ncopies(N, K)] ; p(2) |->  B  . *** works
 
  *** example of non deterministic-rule using TICK
  inc TICK .
  crl [t4] : p(1) |-> 1 . [L] ; p(2) |-> K . K'' + B => p(1) |-> 1 . [L ncopies(sd(K, K'), K'')] ; p(2) |-> K' . K'' + B if  @ K => @ K' /\ K' < K .
endm



*** redefinition of ALG-PN-EXE with sort-op renaming (so that the base and meta levels components of Marking are disjoint)
*** all (subs)orts and ops of Marking should be renamed (to avoid conflicts, warnings for multiple imports, etc)
*** the star symbol is appended to sorts and ops names - here the star means level 0, no star the meta-level 
*** the renaming of sorts Marking and Pmarking is mandatory, the others ara mndatory only if in the meta-level some places
*** have the same type as level-0 places: in the example below, Marking{Nat} is used in both levels (better an automatic renaming)
 mod ALG-PN-EXE* is 
    inc ALG-PN-EXE * (sort Marking to Marking*, sort Pmarking to Pmarking*,
                      sort Marking{Nat} to Marking*{Nat}, sort Pmarking{Nat} to Pmarking*{Nat},
                      sort Marking{Elist{Nat}} to Marking*{Elist{Nat}}, sort Pmarking{Elist{Nat}} to Pmarking*{Elist{Nat}},
                      op markN to markN*,  op markListN to  markListN*,
                      op emptyM to emptyM*, op init to init*, op undefined to undefined*, op _|->_ to _*|->_ ) .
endm

*** view to renamed  ALG-PN-EXE
view AlgPNexe* from TRIV to ALG-PN-EXE* is 
      sort Elt to Marking* . 
endv


***  EXAMPLE 2: nested algebraic net: two places have as domain the alg-net defined above; the third place share the domain (Nat) with the base-level
mod NEST-ALG-PN-EXE is
  inc MARKING{AlgPNexe*} .
  inc MARKING{Nat} * (op nil to nilNat , op mark to markN) .
  op init : -> Marking . *** meta-net initial marking
  eq init = p(0) |-> 1 . init* ; p(1) |-> 1 . init* ; p(3) |-> 2 . 3 .
  var M : Marking* .
  var K : NzNat .
  var B : Bag{AlgPNexe*} .
  rl [meta-r] : p(0) |-> K . M ; p(1) |-> B  => p(0) |-> sd(K,1) . M ; p(1) |->  1 . M + B . *** one algebraic net is moved from p(0) to p(1)
endm