in NET-TOKEN

*** signature of stochastic wfn used as net tokens
fmod WFN-TOKEN is
  pr NET-TOKEN{Ntlab} . *** place labels are strings
  sort Wfn .
  subsort Wfn < NetToken .
  vars L L' : Lab .
  vars K K' U U' : NzNat .
  vars N N' : Net .
  var BB : Bag{Pbag} . 
  vars I O H I' O' H' B B' : Pbag .
  var P : Place .
  *** var T : Tran .
  vars S S' S'' : String .
  *** var Y : System .
  
  ops isIn isOut isHin : Net Place -> Bool .
  eq isIn(L |-> [I + K . P, O, H] ; N, P) = true .
  eq isIn(N, P) = false [owise] .
  eq isOut(L |-> [I, O + K . P, H] ; N, P) = true .
  eq isOut(N, P) = false [owise] .
  eq isHin(L |-> [I, O, H + K . P] ; N, P) = true .
  eq isHin(N, P) = false [owise] .
  op wfnet? : Net -> Bool .
  eq wfnet?(N) = isIn(N,p("in")) and-then not(isOut(N,p("in")) or-else isHin(N, p("in"))) and-then 
                 isOut(N,p("out")) and-then not(isIn(N,p("out")) or-else isHin(N, p("out"))) .
  
  cmb N BB : Wfn if wfnet?(N) . *** characterizes workflow nets(-tokens)

 *** utilities
 op rename : Pbag String String -> Pbag .
 eq rename(K . p(S) + B, S, S') = K . p(S') + B .
 eq rename(B, S, S') = B [owise] .
 op renameIO : Net String String -> Net . *** optimized renaming of IO places of a wf net
 eq renameIO(L |-> [I, O, H], S, S') = L |-> [rename(I, "in", S), rename(O, "out", S'), H] .
ceq renameIO(N ; L |-> [I, O, H] ; L' |-> [I', O', H'], S, S') = 
         N ; L |-> [rename(I, "in", S), O, H] ; L' |-> [I', rename(O', "out", S'), H'] if I[p("in")] =/= 0 /\ O'[p("out")] =/= 0 .
 op renameIO : System String String -> System . *** system version
 eq renameIO(N B, S, S') = renameIO(N, S, S') rename(rename(B, "in", S), "out", S') .
 
 op cat : String String -> String . *** concatenates using a '-' if the first string is not empty 
 eq cat("",S) = S .
 eq cat(S, S') = S + "-" + S' [owise] .      
 op cat : String Nat -> String . *** append an index to a string
 eq cat(S, n:Nat) = cat(S, string(n:Nat, 10)) [owise] .

 *** pa operators
 op seq : Net Net String -> [Net]  . *** the string parameter is used to rename the merged Out/In places of the operands  
 op alt : Net Net -> [Net] [comm] . *** implicitly associative
 op par : Net Net String Lab Lab -> [Net]  . *** the string parameter is used to rename the In/Out places of the operands - the labels are those of the new fork-join transitions

 eq seq(L |-> [I, K . p("out") + O, H] ; N, L' |-> [I' + K' . p("in"),  O', H'] ; N', S) = L |-> [I, K . p(S) + O, H] ; N ; L' |-> [I' + K' . p(S),  O', H'] ; N' .
 *** rename(B, "out", S) + rename(B', "in", S) .
 eq alt(N, N') = N ; N' .
 *** B + B' . *** straightforward
 vars W W' W'' : Net . 
 vars in1 in2 out1 out2 : String .
 ceq par(N, N', S, L, L') = L |-> [1 . p("in"), 1 . p(in1) + 1 . p(in2), nilP] ; L' |-> [1 . p(out1) + 1 . p(out2), 1 . p("out"), nilP] ;
       renameIO(N, in1,  out1) ; renameIO(N', in2, out2) 
        if S' := cat(S ,"in") /\ S'' := cat(S,"out") /\ in1 := cat(S', 1) /\ in2 := cat(S', 2) /\ out1 := cat(S'', 1) /\ out2 := cat(S'', 2) .
***  the following equations are redundant: associativity, if given as equational attribute, may result in a warning 
***  eq alt(W,alt(W',W'')) = alt(alt(W,W'),W'') . 
 ***  eq sy:System + (sy':System + sy'':System) = (sy:System + sy':System) + sy'':System .
endfm

fmod EHORNET-WFN is
  pr EHORNET-GEN{Ntlab} .
  pr WFN-TOKEN .
endfm


*** examples of usage of pa operators
mod WFN-EXE is
 inc EHORNET-WFN .
 ops net net' net'' : -> Net  [memo] .
 ops m0 m0' m0'' : -> Pbag  [memo] .  
 ops wf wf' wf'' seq1 alt1 par1 : -> System [memo] .

 eq net =  t("a", "ch1", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net' = t("b", "ch1", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net'' = t("c", "", 2.0, 0) |-> [1 . p("a"), 1 . p("out"), nilP] .

 eq m0  =  1 . p("in") .
 eq m0'  = 2 . p("in")  .
 eq wf = net m0 .
 eq wf' = net' m0 .
 eq wf'' = net'' m0' .
 *** eq seq1 = seq(wf, wf', "in-out") .
 *** eq alt1 = alt(wf, wf')  .
 *** eq par1 = par(wf, wf', "",  t("par", "", 1.0, 0), t("synch", "", 1.0, 0)) .
endm