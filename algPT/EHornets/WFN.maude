in NET-TOKEN

*** signature of stochastic wfn net-tokens (parametric in transition's tag)
fmod WFN-TOKEN is
  pr NET-TOKEN{String, String}  .
  sort Wfn .
  subsort Wfn < NetToken .
  vars L L' : Lab .
  vars K K' U U' : NzNat .
  vars N N' : Net .
  var BB : Bag{Pbag} . 
  vars I O H I' O' H' B B' : Pbag .
  vars S S' S'' : String .
  var NT : NetToken .               
  
  op wfnet? : Net -> Bool .
  eq wfnet?(N) = isIn(N, p("in")) and-then isOut(N, p("out")) and-then not(isOut(N, p("in"))) and-then not(isIn(N, p("out"))) .
  cmb NT : Wfn if wfnet?(n(NT)) . *** characterizes workflow nets(-tokens)

 *** utilities
  op rename : Pbag String String -> Pbag .
  eq rename(K . p(S) + B, S, S') = K . p(S') + B .
  eq rename(B, S, S') = B [owise] .
 
  ops renameI renameO : Net String String -> Net . *** renaming restricted to Input/Output places of a net
  eq renameI(N, S, S') = $renameI(N, emptyNet, S, S') .
  op $renameI : Net Net String String -> Net .
  eq $renameI(emptyNet, N, S, S') = N .
  eq $renameI(N ; L |-> [I, O, H] , N', S, S') = $renameI(N, L |-> [rename(I, S, S'), O, H] ; N', S, S') .
  eq renameO(N, S, S') = $renameO(N, emptyNet, S, S') .
  op $renameO : Net Net String String -> Net .
  eq $renameO(emptyNet, N, S, S') = N .
  eq $renameO(N ; L |-> [I, O, H] , N', S, S') = $renameO(N, L |-> [I, rename(O, S, S'), H] ; N', S, S') .

  op cat : String String -> String . *** concatenates using a '-' if the first string is not empty 
  eq cat("",S) = S .
  eq cat(S, S') = S + "-" + S' [owise] .      
  op cat : String Nat -> String . *** append an index to a string
  eq cat(S, n:Nat) = cat(S, string(n:Nat, 10)) [owise] .

  *** PA operators (work as expected if the operands are workflow-nets)
  op seq : Net Net String -> Net  . *** the string parameter is used to rename the merged Out/In places of the operands  
  op alt : Net Net -> Net [assoc comm] . *** implicitly associative
  op par : Net Net String Lab Lab -> Net  . *** the string parameter is used to rename the In/Out places of the operands - the labels are those of the new fork-join transitions
  eq seq(N, N', S) = renameO(N, "out", S) ; renameI(N',"in", S)  .
  eq alt(N, N') = N ; N'  .
  vars W W' W'' : Net . 
  vars in1 in2 out1 out2 : String .
 ceq par(N, N', S, L, L') = L |-> [1 . p("in"), 1 . p(in1) + 1 . p(in2), nilP] ; L' |-> [1 . p(out1) + 1 . p(out2), 1 . p("out"), nilP] ;
        renameO(renameI(N, "in", in1), "out", out1) ; renameO(renameI(N, "in", in2), "out", out2) 
        if S' := cat(S ,"in") /\ S'' := cat(S,"out") /\ in1 := cat(S', 1) /\ in2 := cat(S', 2) /\ out1 := cat(S'', 1) /\ out2 := cat(S'', 2) .
endfm

*** maps the NT-TYPE theory to WFN-TOKEN
view Wfn from NT-TYPE to WFN-TOKEN is
  sort Token to Wfn .
endv 


*** an implementation of theory SYNCH
fmod SYNCH-EXE is
  pr NT-SIG{String, String} .
  var  N : Net . 
  var  T : Tran .
  var  L : Lab .
  vars  S C : String .
  op synch : String -> Mset{String} .
  op theta : Net -> Net . 
  eq synch("T1") = "ch1" "ch1" "ch2" . 
  eq  synch(W:String) = emptyMsetS [owise] . *** just an example
 ceq  theta(T ; N) = T ; T if 1st(tag(T)) == "a" .
 ceq  theta(T ; N) =  T if 1st(tag(T)) == "b" [owise] .
  eq  theta(N) = emptyNet [owise] .
endfm

*** view to SYNCH-EXE
view Synch from SYNCH to SYNCH-EXE is 
endv

*** simple example of stochastic EHornets, all places hold stochastic wfn
mod EHORNET-EXE is
 inc NET-TOKEN-SYS{String, String}  . *** includes net-tokens' autonomous firing
 inc EHORNET{Wfn, Nat, Synch} .
 ops net net' : -> Net  [memo] . 
 ops m0 m0' m0'' : -> Pbag  [memo] .  
 ops nt nt' nt'' : -> NetToken [memo] . *** the least sort is (should be) Wfn

 eq net =  t("a" @ "ch1", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net' = t("b" @ "ch2", 2.0, 0) |-> [1 . p("x") + 1 . p("in"), 1 . p("out"), nilP] ;
           t("c" @ "", 3.0, 0) |-> [1 . p("in"), nilP, nilP] .
 
 eq m0  =  1 . p("in") + 1 . p("out") .
 eq m0'  = 1 . p("in")  .
 eq m0'' = 1 . p("x") + 1 . p("in") .
 eq nt = net m0 nilP .
 eq nt' = net m0' .
 eq nt'' = net' m0'' .

 op init : -> Marking [memo] . *** system-net initial marking
 eq init = p(1) |-> nt ; p(2) |-> nt' ; p(3) |-> nt'' ; p(4) |-> emptyNT ;
           p(5) |-> emptyNT ; p(6) |-> emptyNT ; p(7) |-> emptyNT .
 vars B B' B'' B1 B2 B3 B4 : Mset{Wfn} .
 vars X Y Z W N N' : Net .
 vars k k' : NzNat .
 vars M1 M2 M3 M4 : Mset{Pbag} .
 vars b1 b2 b3 pre pre' Pi2 cum' newm newm' : Pbag .
 vars out1 out2 out3 out4 : Pmset .
  *** system net synchronization transition (encoded as a rule) - pre(T1) = {p1,p2,3}, post{T1} = {p4,p5,p6,p7}  
*** crl [T1] : p(1) |-> (X b1 M1) B ;  p(2) |-> (X b2 M2)  B' ; p(3) |-> (Y b3 M3) B'' ; p(4) |-> B1 ; p(5) |-> B2 ; p(6) |-> B3 ; p(7) |-> B4 
***          =>  
***           p(1) |-> (X M1) B ; p(2) |-> (X M2) B' ; p(3) |-> (Y M3) B'' ; p(4) |-> B1 (X bag(out1)) ; p(5) |-> B2 (X bag(out2)) ; p(6) |-> B3 (Y bag(out3)) ; p(7) |-> B4 (Y bag(out4))  
***           if X =/= Y /\ N  := theta(X) /\ N' := theta(Y) /\ synch("T1") = ch(N ; N') /\ Pi2 := b1 + b2 + b3 /\ pre := pre(N ; N') /\ pre <= Pi2 
***           /\ out1 out2 out3 out4 := mset(b1 + b2 + post(N) - pre(N)) mset(b3 + post(N') - pre(N')) /\ R:Float := 1.5 .
*** alternative
crl [T1] : p(1) |-> (X b1 M1) B ;  p(2) |-> (X b2 M2)  B' ; p(3) |-> (Y b3 M3) B'' ; p(4) |-> B1 ; p(5) |-> B2 ; p(6) |-> B3 ; p(7) |-> B4 
          =>  
           p(1) |-> (X M1) B ; p(2) |-> (X M2) B' ; p(3) |-> (Y M3) B'' ; p(4) |-> B1 (X bag(out1)) ; p(5) |-> B2 (X bag(out2)) ; p(6) |-> B3 (Y bag(out3)) ; p(7) |-> B4 (Y bag(out4))  
           if X =/= Y /\ N  := theta(X) ; theta(Y) /\ synch("T1") = ch(N) /\ Pi2 := b1 + b2 + b3 /\ pre := pre(N) /\ pre <= Pi2 
           /\ out1 out2 out3 out4 := mset(Pi2 + post(N) - pre) /\ R:Float := 1.5 .
 *** system net autonomous transition - pre(T2) = {p3}, post{T2} = {p7}
crl [T2] : p(3) |-> (X b3 M3) B ; p(7) |-> B' => p(3) |-> (X M3) B ; p(7) |-> B' (X b3) if synch("T2") == emptyMsetS /\ R:Float := 2.0 .
endm