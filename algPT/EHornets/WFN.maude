in ../../SPN

*** signature of stochastic wfn (parameterized in transition labels)
fmod WFN-SIG{TL :: STLAB} is
  pr SPN-SIG{TL} . *** place labels are strings
  *** sort Net .
  *** subsort Net < Net .
  vars L L' : TL$Lab .
  vars K K' U U' : NzNat .
  vars N N' : Net .
  vars I O H I' O' H' B B' : Pbag .
  var P : Place .
  *** var T : Tran .
  vars S S' S'' : String .
  *** var Y : System .

  ops isIn isOut isHin : Net Place -> Bool .
  eq isIn(L |-> [I + K . P, O, H] ; N, P) = true .
  eq isIn(N, P) = false [owise] .
  eq isOut(L |-> [I, O + K . P, H] ; N, P) = true .
  eq isOut(N, P) = false [owise] .
  eq isHin(L |-> [I, O, H + K . P] ; N, P) = true .
  eq isHin(N, P) = false [owise] .
  op wfnet? : Net -> Bool .
  eq wfnet?(N) = isIn(N,p("in")) and-then not(isOut(N,p("in")) or-else isHin(N, p("in"))) and-then 
                 isOut(N,p("out")) and-then not(isIn(N,p("out")) or-else isHin(N, p("out"))) .

 *** cmb Y : Net if wfnet?(n(Y)) . *** characterizes workflow-nets

 *** utilities
 op rename : Pbag String String -> Pbag .
 eq rename(K . p(S) + B, S, S') = K . p(S') + B .
 eq rename(B, S, S') = B [owise] .
 op renameIO : Net String String -> Net . *** optimized renaming of IO places of a wfn
 eq renameIO(L |-> [I, O, H], S, S') = L |-> [rename(I, "in", S), rename(O, "out", S'), H] .
ceq renameIO(N ; L |-> [I, O, H] ; L' |-> [I', O', H'], S, S') = 
         N ; L |-> [rename(I, "in", S), O, H] ; L' |-> [I', rename(O', "out", S'), H'] if I[p("in")] =/= 0 /\ O'[p("out")] =/= 0 .

*** eq renameIO(L |-> [I, O, H] B, S, S') = L |-> [rename(I, "in", S), rename(O, "out", S'), H] rename(rename(B, "in", S),"out", S') .
*** ceq renameIO((N ; L |-> [I, O, H] ; L' |-> [I', O', H'])  B, S, S') =  (N ; L |-> [rename(I, "in", S), O, H] ; L' |-> [I', rename(O', "out", S'), H'])  rename(rename(B, "in", S),"out", S')
***   if I[p("in")] =/= 0 /\ O'[p("out")] =/= 0 .
 
 op cat : String String -> String . *** concatenates using a '-' if the first string is not empty 
 eq cat("",S) = S .
 eq cat(S, S') = S + "-" + S' [owise] .      
 op cat : String Nat -> String . *** append an index to a string
 eq cat(S, n:Nat) = cat(S, string(n:Nat, 10)) [owise] .

 *** pa operators
 *** op _+_ : System System -> System [comm prec 121] . *** net juxtaposition and sum of markings (lowest priority)
 *** eq N B + N' B' = (N ; N') B + B' .
 op seq : Net Net String -> [Net]  . *** the string parameter is used to rename the merged Out/In places of the operands  
 op alt : Net Net -> [Net] [comm] . *** implicitly associative
 op par : Net Net String TL$Lab TL$Lab -> [Net]  . *** the string parameter is used to rename the In/Out places of the operands - the labels are those of the new fork-join transitions

 *** eq seq((L |-> [I, K . p("out") + O, H] ; N) B, (L' |-> [I' + K' . p("in"),  O', H'] ; N') B', S) = (L |-> [I, K . p(S) + O, H] ; N ; L' |-> [I' + K' . p(S),  O', H'] ; N') rename(B, "out", S) + rename(B', "in", S) .
 *** eq alt(N B, N' B') = (N ; N') B + B' . *** straightforward
 *** vars W W' W'' : Net . vars in1 in2 out1 out2 : String .
 *** ceq par(W, W', S, L, L') = (L |-> [1 . p("in"), 1 . p(in1) + 1 . p(in2), nilP] ; L' |-> [1 . p(out1) + 1 . p(out2), 1 . p("out"), nilP]) nilP +
 ***    (renameIO(W, in1,  out1) + renameIO(W', in2, out2)) 
 ***       if S' := cat(S ,"in") /\ S'' := cat(S,"out") /\ in1 := cat(S', 1) /\ in2 := cat(S', 2) /\ out1 := cat(S'', 1) /\ out2 := cat(S'', 2) .
*** the following equations are redundant: associativity, if given as equational attribute, may result in a warning 
***  eq alt(W,alt(W',W'')) = alt(alt(W,W'),W'') . 
 ***  eq sy:System + (sy':System + sy'':System) = (sy:System + sy':System) + sy'':System .
endfm

*** label for stochastic wfn (contains a channel, seen as string)
fmod WFLAB is
 pr STRING .
 pr FLOAT .
 sort Wflab .
 vars L C : String . *** tag and channel - the empty string means that no channel is associated with the tran.
 var R  : Float . var P  : Nat .  var W : Wflab .
 op t : String String Float Nat -> Wflab [ctor] . 
 op tag :  Wflab -> String .
 op pol :  Wflab  -> Nat . *** firing policy
 op rate : Wflab -> Float .
 op ch :   Wflab   -> String .
 eq tag (t(L,C,R,P)) =  L .
 eq pol(t(L,C,R,P))  =  P .
 eq rate(t(L,C,R,P)) =  R .
 eq ch (t(L,C,R,P))  =  C .
 op noCh :  Wflab -> Bool .
 eq noCh(W) = ch(W) == "" .
endfm

*** view to a WFLAB
view Wflab from STLAB to WFLAB is 
 sort Lab to Wflab .
 sort Tag to String .
endv

*** signature of stochastic wfn usable as net-tokens
fmod SWFN is
  pr  WFN-SIG{Wflab} .
  var L : Wflab .
  op ch : Tran -> String . *** the channel of a transition
  eq ch(L |-> Q:Tmatrix) = ch(L) .
endfm

*** this module defines the "autonomous" firing of stochastic wfn
in ../../PT-SYS

mod SWFN-SYS is
 inc SWFN .
 inc PT-SYS{STLAB,String}{Wflab} .
 var M : Pbag . var T : Tran . vars N N' : Net .
 crl [firing] : N M => N firing(T, M) if  T ; N' := N  /\ noCh(l(T)) /\ enabled(T, M) /\ R:Float := firing-rate(T, M) .
endm

*** trivial views to SWFN-SYS
view System from TRIV to SWFN-SYS is 
 sort Elt to System .
endv

view Net from TRIV to SWFN-SYS is 
  sort Elt to Net .
endv


*** examples of usage of pa operators
mod WFN-EXE is
 inc SWFN-SYS .
 ops net net' net'' : -> Net  [memo] .
 ops m0 m0' m0'' : -> Pbag  [memo] .  
 ops wf wf' wf'' seq1 alt1 par1 : -> System [memo] .

 eq net =  t("a", "ch1", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net' = t("b", "ch1", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net'' = t("c", "", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .

 eq m0  =  1 . p("in") .
 eq m0'  = 2 . p("in")  .
 eq wf = net m0 .
 eq wf' = net' m0 .
 eq wf'' = net'' m0' .
 *** eq seq1 = seq(wf, wf', "in-out") .
 *** eq alt1 = alt(wf, wf')  .
 *** eq par1 = par(wf, wf', "",  t("par", "", 1.0, 0), t("synch", "", 1.0, 0)) .
endm