in ../../PT-NET

fmod WFN{TL :: TRIV} is
  pr PT-NET{TL, String} . *** the place label is a string
  pr CONVERSION .
  sort Wfn .
  subsort Wfn < System .
  vars L L' : TL$Elt .
  vars K K' U U' : NzNat .
  vars N N' : Net .
  vars I O H I' O' H' B B' : Pbag .
  var P : Place .
  *** var T : Tran .
  vars S S' : String .
  var Y : System .

  ops isIn isOut isHin : Net Place -> Bool .
  eq isIn(L |-> [I + K . P, O, H] ; N, P) = true .
  eq isIn(N, P) = false [owise] .
  eq isOut(L |-> [I, O + K . P, H] ; N, P) = true .
  eq isOut(N, P) = false [owise] .
  eq isHin(L |-> [I, O, H + K . P] ; N, P) = true .
  eq isHin(N, P) = false [owise] .
  op wfnet? : Net -> Bool .
  eq wfnet?(N) = isIn(N,p("in")) and-then not(isOut(N,p("in")) or-else isHin(N, p("in"))) and-then 
                 isOut(N,p("out")) and-then not(isIn(N,p("out")) or-else isHin(N, p("out"))) .

 cmb Y : Wfn if wfnet?(n(Y)) . *** characterizes workflow-nets

 *** utilities
 op rename : Pbag String String -> Pbag .
 eq rename(K . p(S) + B, S, S') = K . p(S') + B .
 eq rename(B, S, S') = B [owise] .
 ops renameIO : Wfn String String -> System .
ceq renameIO((N ; L |-> [I, O, H]) B, S, S') = (N ; L |-> [rename(I, "in", S), rename(O, "out", S), H]) rename(rename(B, "in", S),"out", S) if I[p("in")] =/= 0 /\ O[p("out")] =/= 0 .
ceq renameOut((N ; L |-> [I, O, H]) B, S) = (N ; L |-> [rename(O, "out", S), O, H]) rename(B, "out", S) if O[p("out")] =/= 0 .

 ops getIn getOut : Wfn -> Tran .
 ceq getIn((N ; L |-> [I, O, H]) B) = L |-> [I, O, H] if I[p("in")] =/= 0 .
 ceq getOut((N ; L |-> [I, O, H]) B) = L |-> [I, O, H] if O[p("out")] =/= 0 .

 ops par seq : Wfn Wfn String -> Wfn  .
 op alt : Wfn Wfn -> Wfn [comm] . *** implicitly associative
 eq seq((L |-> [I, K . p("out") + O, H] ; N) B, (L' |-> [I' + K' . p("in"),  O', H'] ; N') B', S) = 
        (L |-> [I, K . p(S) + O, H] ; N ; L' |-> [I' + K' . p(S),  O', H'] ; N') rename(B, "out", S) + rename(B', "in", S) .
 eq alt(N B, N' B') = (N ; N') B + B' . *** straightforward
 
 eq par(N B, N' B', S) = renamerenameIn(N B, S + "in-1")  .
 
 *** the following equations are redundant
 vars W W' W'' : Wfn .
 eq alt(W,alt(W',W'')) = alt(alt(W,W'),W'') . *** associativity (given as equational attribute may result in a warning) 
 eq seq(W,seq(W',W'',S), S) = seq(seq(W,W',S),W'',S) . *** pseudo-associativity
 
endfm

in ../../TLAB

fmod SWFN is
  pr  WFN{Tlab} .
endfm

fmod WFN-EXE is
 pr SWFN .
 ops net net' : -> Net  [memo] .
 ops m0 m0' : -> Pbag  [memo] .  

 eq net =  t("a", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .

 eq net' = t("b", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .

 eq m0  =  1 . p("out") .
 eq m0'  = 2 . p("in")  .

endfm