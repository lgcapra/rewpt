in ../ALG-PN 
in NET-TOKEN

*** an implementation of theory SYNCH
fmod SYNCH-EXE is
  pr NT-STRUCT{Ntlab} .
  pr BAG{String} * (op nil to nilS) .
  op synch : Net String -> Bag{String} .
  op theta : Net -> Bag{Tran} .
  var  N : Net . 
  var  T : Tran .
  var  L : Lab .
 ceq  synch(T ; N, "T1") = (if tag(l(T)) == "a" then 2 else 1 fi) . ch(T)  if ch(T) =/= "" .
  eq  synch(N, W:String) = nilS [owise] . *** just an example
 ceq  theta(T ; N) = 2 . T if tag(l(T)) == "a" .
 ceq  theta(T ; N) = 1 . T if tag(l(T)) == "b" [owise] .
  eq  theta(N) = nilT [owise] .
endfm

*** view to a SYNCH-EXE
view Synch from SYNCH to SYNCH-EXE is 
endv

*** simple example of stochastic EHornets, all places hold stochastic wfn
mod EHORNET-EXE is
 inc EHORNET{Synch} .
 ops net net' net'' : -> Net  [memo] .
 ops m0 m0' m0'' : -> Pbag  [memo] .  
 ops nt nt' nt'' : -> NetToken [memo] .

 eq net =  t("a", "ch1", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net' = t("b", "ch2", 2.0, 0) |-> [1 . p("x") + 1 . p("in"), 1 . p("out"), nilP] ;
           t("c", "", 3.0, 0) |-> [1 . p("in"), nilP, nilP] .
**** eq net'' = t("c", "", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 
 eq m0  =  1 . p("in") + 1 . p("out") .
 eq m0'  = 1 . p("in")  .
 eq m0'' = 1 . p("x") + 1 . p("in") .
 eq nt = net m0 nilP .
 eq nt' = net m0' .
 eq nt'' = net' m0'' .

 op init : -> Marking [memo] . *** system-net initial marking
 eq init = p("sys-1") |-> nt ; p("sys-2") |-> nt' ; p("sys-3") |-> nt'' ; p("sys-4") |-> emptyNT ;
           p("sys-5") |-> emptyNT ; p("sys-6") |-> emptyNT ; p("sys-7") |-> emptyNT .
 vars B B' B'' B1 B2 B3 B4 : Mset{NetToken} .
 vars X Y Z W N N' : Net .
 vars k k' : NzNat .
 vars M1 M2 M3 M4 : Mset{Pbag} .
 vars TB TB' : Bag{Tran} .
 vars b1 b2 b3 pre pre' cum cum' newm newm' : Pbag .
 vars out1 out2 out3 out4 : Pmset .
  *** system net synchronization transition (encoded as a rule)
  *** pre(T1) = {p1,p2,3}, post{T1} = {p4,p5,p6,p7}  
crl [T1] : p("sys-1") |-> (X b1 M1) B ;  p("sys-2") |-> (X b2 M2)  B' ; p("sys-3") |-> (Y b3 M3) B'' ; p("sys-4") |-> B1 ; p("sys-5") |-> B2 ; p("sys-6") |-> B3 ; p("sys-7") |-> B4 
          =>  
           p("sys-1") |-> (X M1) B ; p("sys-2") |-> (X M2) B' ; p("sys-3") |-> (Y M3) B'' ; p("sys-4") |-> B1 (X bag(out1)) ; p("sys-5") |-> B2 (X bag(out2)) ; p("sys-6") |-> B3 (Y bag(out3)) ; p("sys-7") |-> B4 (Y bag(out4))  
           if TB  := theta(X) /\ synch(X,"T1") = ch(TB) /\ cum := b1 + b2 /\ pre := pre(TB) /\ pre <= cum /\ out1 out2 := mset(cum + post(TB) - pre) /\
             TB' := theta(Y) /\ synch(Y,"T1") = ch(TB') /\ cum' := b3 /\ pre' := pre(TB') /\ pre' <= cum' /\ out3 out4 := mset(cum' + post(TB') - pre') .
 *** system net autonomous transition
crl [T2] : p("sys-3") |-> (X b3 M3) B ; p("sys-7") |-> B' => p("sys-3") |-> (X M3) B ; p("sys-7") |-> B' (X b3) if synch(X, "T2") == nilS .
endm