in ../ALG-PN 
in NET-TOKEN

fmod SYNCH-EXE is
  pr NT-STRUCT{Ntlab} .
  pr BAG{String} * (op nil to nilS) .
  op synch : Net String -> Bag{String} .
  var N : Net . 
  var T : Tran .
  var L : Lab .
 ceq  synch((T ; N), "T1") = (if tag(l(T)) == "a" then 2 else 1 fi) . ch(T)  if ch(T) =/= "" .
  eq  synch(N, W:String) = nilS [owise] . *** just an example
endfm

*** view to a SYNCH-EXE
view Synch from SYNCH to SYNCH-EXE is 
endv

*** simple example of stochastic EHornets, all places hold stochastic wfn
mod EHORNET-EXE is
 inc EHORNET{Synch} .
 ops net net' net'' : -> Net  [memo] .
 ops m0 m0' m0'' : -> Pbag  [memo] .  
 ops nt nt' nt'' : -> NetToken [memo] .

 eq net =  t("a", "ch1", 1.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 eq net' = t("b", "ch2", 2.0, 0) |-> [1 . p("x") + 1 . p("in"), 1 . p("out"), nilP] .
**** eq net'' = t("c", "", 2.0, 0) |-> [1 . p("in"), 1 . p("out"), nilP] .
 
 eq m0  =  1 . p("in") + 1 . p("out") .
 eq m0'  = 1 . p("in")  .
 eq m0'' = 1 . p("x") + 1 . p("in") .
 eq nt = net m0 nilP .
 eq nt' = net m0' .
 eq nt'' = net' m0'' .

 op init : -> Marking . *** system-net initial marking
 eq init = p("1") |-> nt ; p("2") |-> nt' ; p("3") |-> nt'' ; p("4") |-> emptyNT ;
           p("5") |-> emptyNT ; p("6") |-> emptyNT ; p("7") |-> emptyNT .
 vars B B' B'' B1 B2 B3 B4 : Mset{NetToken} .
 vars X Y Z W N N' : Net .
 vars k k' : NzNat .
 vars M1 M2 M3 M4 : Mset{Pbag} .
  *** system net transitions (encoded as rules)
  *** pre(t1) = {p1,p2}, post{t1} = p3 ; removes one wfn from p1 and one from p2 and puts their alt in p2 (system autonomous) 
  rl [T1] : p("1") |-> (X M1) B ;  p("2") |-> (X M2)  B' ; p("3") |-> (Y M3) B'' ; p("4") |-> B1 ; p("5") |-> B2 ; p("6") |-> B3 ; p("7") |-> B4 
          =>  
            p("1") |-> B ; p("2") |-> B' ; p("3") |-> B'' ; p("4") |-> B1 (X M1) ; p("5") |-> B2 (X M2) ; p("6") |-> B3 (Y M3) ; p("7") |-> B4 (Y M3)  .
  
  *** synchronization tran.: like t1 but puts a seq of removed net-tokens in p3 if there are two object-net transitions that use the same channel    
  vars T T' : Tran .      
  *** crl [t2-synch] : p("1") |-> k . X  + B ;  p("2") |-> k' . Y + B' ; p("3") |-> B''  =>  
  ***          p("1") |-> sd(k,1) . X + B ; p("2") |-> sd(k',1) . Y + B' ; p("3") |-> B'' + 1 . seq(n(X) firing(T,m(X)), n(Y) firing(T',m(Y)),"") 
  ***          if  T ; N := n(X)  /\  T' ; N' := n(Y) /\ ch(T) = ch(T') /\ enabled(T,m(X)) /\ enabled(T',m(Y)) .

  *** simply moves a net-token from p2 to p4
  *** rl [t3] : p("2") |-> k . X  + B ;  p("4") |-> B'  =>  p("2") |-> sd(k,1) . X + B ; p("4") |-> B' + 1 . X . 
endm