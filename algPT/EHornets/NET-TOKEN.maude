in ../../SPN
in ../../shared/MSET
in ../ALG-PN

*** tag of net-token transition, built of a parametric tag followed by a string representing a channel
fmod TAG{L :: TRIV} is
  protecting PAIR{L,String} * (sort Pair{L,String} to Tag, op <_;_> to _@_) .
endfm

view Tag{L :: TRIV} from TRIV to TAG{L} is 
 sort Elt to Tag .
endv

*** signature of (stochastic) net-tokens (derived from that of SPN)
fmod NT-SIG{L :: TRIV, PL :: TRIV} is
  pr SPN-SIG{Tag{L}, PL} .
  pr MSET-BAG{String} * (op nil to nilS, op empty to emptyMsetS) .
  var TL : Lab .
  var T  : Tran .
  var N  : Net .
  var PB : Pbag .
  var S  : String .
  var MS : Mset{String} .
  op ch : Lab  -> String .
  eq ch(TL) = 2nd(tag(TL)) .
  op hasInhibitor : Net -> Bool .
  eq hasInhibitor(N ; TL |-> [I:Pbag,O:Pbag,H:NePbag]) = true .
  eq hasInhibitor(N) = false [owise] . 
  op pre : Net -> Pbag . *** cumulative pre-set
  eq pre(N) = $pre(N, nilP) .
  op $pre : Net Pbag -> Pbag .
  eq $pre(emptyNet, PB) = PB .
  eq $pre(T ; N, PB) = $pre(N, PB + I(T)) . 
  op post : Net -> Pbag . *** cumulative post-set
  eq post(N) = $post(N, nilP) .
  op $post : Net Pbag -> Pbag .
  eq $post(emptyNet, PB) = PB .
  eq $post(T ; N, PB) = $post(N, PB + O(T)) .
  op ch : Net -> Mset{String} . *** channel(s) (2nd part of tag) - the empty string means that no channel is associated with a tran.
  eq ch(N) = $ch(N, emptyMsetS) .
  op $ch : Net Mset{String} -> Mset{String} .
  eq $ch(emptyNet, MS) = MS .
 ceq $ch(T ; N, MS) = $ch(N, if S =/= "" then S MS else MS fi) if S := ch(l(T)) .
endfm

*** compact net-token marking description (multiset of markings) parametric in place labels
fmod NT-MARKING{PL :: TRIV} is
   pr MSET-BAG{Pbag{PL}} * (sort Mset{Pbag{PL}} to Mset{Pbag}, op empty to emptyMNT,
                            sort Bag{Pbag{PL}} to Bag{Pbag}, sort NeBag{Pbag{PL}} to NeBag{Pbag}, sort ElBag{Pbag{PL}} to ElBag{Pbag}, op nil to nilMNT).
endfm 

*** net-token representation with compact state (markings) description parametric in node labels 
fmod NET-TOKEN{L :: TRIV, PL :: TRIV} is 
  pr NT-MARKING{PL} .
  pr NT-SIG{L, PL} .
  sort NetToken .
  var N : Net .
  var B : Mset{Pbag} . *** nested multiset of markings
  op __ : Net Mset{Pbag} -> [NetToken] [ctor] .
  op n : NetToken -> Net .
  op m : NetToken -> Mset{Pbag} .
  cmb N B : NetToken if hasInhibitor(N) = false . *** net-tokens do not have inhibitor arcs
  eq n(N B) = N .
  eq m(N B) = B .
endfm

view NetToken{L :: TRIV, PL :: TRIV} from TRIV to NET-TOKEN{L, PL} is
  sort Elt to NetToken .
endv

*** net-token including the object-autonomous firing rule
mod NET-TOKEN-SYS{L :: TRIV, PL :: TRIV} is
 inc NET-TOKEN{L, PL} .
 var N  : Net .
 var B  : Mset{Pbag} . 
 var M  : Pbag .
 var T  : Tran .
 var NT : NetToken .
 crl [aut-firing] : (T ; N) B M => (T ; N) B firing(T, M) if ch(T) = "" /\ I(T) <= M /\ R:Float := firing-rate(T, M) .
endm

*** definition of an eHornet marking parametric vs the net-tokens' and system net's place labels -- net-tokems may be of any type and parametric in turn in node labels
fmod EHORNET-GEN{L :: TRIV, PL :: TRIV, PL' :: TRIV} is
   generated-by MSET-MARKING{NetToken{L, PL}, PL'} * (sort Mset{NetToken{L, PL}} to Mset{NetToken}, 
                            sort Bag{NetToken{L, PL}} to Bag{NetToken}, sort NeBag{NetToken{L, PL}} to NeBag{NetToken}, sort ElBag{NetToken{L, PL}} to ElBag{NetToken},
                            sort MsetMarking{NetToken{L, PL}} to  MsetMarking{NetToken}, sort  PmsetMarking{NetToken{L, PL}} to  PmsetMarking{NetToken},
                            op nil to nilNT, op empty to emptyNT ) .
   var N : Net .
   vars B B' : Mset{Pbag} . *** compact net-token markings' representation
   eq (N B) (N B') = N (B B') . 
   eq (N emptyMNT) = emptyNT .
endfm

*** theory for particular types of net-tokens, defined through subsorting -- net-tokens' nodes' labels must be fixed
fth NT-TYPE is
 inc NET-TOKEN{String,String} * (sort Place{String} to Place ).
 sort Token .
 subsort Token < NetToken .
endfth 

*** trivial view to NT-TYPE (with the same name as the theory)
view NT-TYPE from TRIV to NT-TYPE is
 sort Elt to Token .
endv

*** alternative eHORNET definition parameterized in the (sub)type of net-tokens and system-net transitions' lab is NTLAB 
fmod EHORNET{NT :: NT-TYPE, PL :: TRIV} is
   generated-by MSET-MARKING{NT-TYPE, TRIV}{NT, PL} * (op nil to nilNT, op empty to emptyNT) .
   var N : Net .
   vars B B' : Mset{Pbag} . 
   eq (N B) (N B') = N (B B') . 
   eq (N emptyMNT) = emptyNT .
endfm 