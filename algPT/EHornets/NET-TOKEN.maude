in ../../SPN

*** theory of stochastic net-token transitions' labels
fth NTHLAB is
 inc STHLAB .
 pr STRING .
 op ch :  Lab -> String . *** channel
endfth

view NTHLAB from STHLAB to NTHLAB is
endv

*** label for stochastic net-tokens (contains a channel, seen as a string)
fmod NTLAB is
 pr STRING .
 pr FLOAT .
 sort Lab .
 vars L C : String . *** tag and channel - the empty string means that no channel is associated with the tran.
 var R  : Float . var P  : Nat .  var W : Lab .
 op t : String String Float Nat -> Lab [ctor] . 
 op tag :  Lab -> String .
 op pol :  Lab  -> Nat . *** firing policy
 op rate : Lab -> Float .
 op ch :   Lab   -> String .
 eq tag (t(L,C,R,P)) =  L .
 eq pol(t(L,C,R,P))  =  P .
 eq rate(t(L,C,R,P)) =  R .
 eq ch (t(L,C,R,P))  =  C .
endfm

*** view to a NTLAB
view Ntlab from NTHLAB to NTLAB is 
 sort Tag to String .
endv

in ../../shared/MSET

*** compact net-token marking description (multiset of markings) parametric in place labels
fmod NT-MARKING{PL :: TRIV} is
   pr BAG{Pbag{PL}} * (sort Bag{Pbag{PL}} to Bag{Pbag}, sort NeBag{Pbag{PL}} to NeBag{Pbag}, sort ElBag{Pbag{PL}} to ElBag{Pbag}, op nil to nilMNT) .
   *** pr MSET-BAG{Pbag{PL}} * (sort Mset{Pbag{PL}} to Mset{Pbag}, op empty to emptyMNT).
endfm 

view Tran{L :: NTHLAB} from TRIV to SPN-GEN{NTHLAB}{L} is
  sort Elt to Tran .
endv

*** net-token representation with compact state (markings) description parametric in transition labels 
fmod NET-TOKEN{L :: NTHLAB} is 
  pr NT-MARKING{String} .
  *** pr SPN-GEN{NTHLAB}{L} . *** net plus marking
  pr MSET-BAG{Tran{L}} * (op nil to nilT, op empty to emptyMsetT, sort Bag{Tran{L}} to Bag{Tran}, sort ElBag{Tran{L}} to ElBag{Tran},
                         sort NeBag{Tran{L}} to NeBag{Tran}, sort Mset{Tran{L}} to Mset{Tran} ) .
  sort NetToken .
  var N : Net .
  var B : Bag{Pbag} . *** nested multiset
  var TB : Bag{Tran} .
  var T : Tran .
  var PB : Pbag .
  var K : NzNat .
  op __ : Net Bag{Pbag} -> [NetToken] [ctor] .
  op hasInhibitors : Net -> Bool .
  eq hasInhibitors(N ; L:L$Lab |-> [I:Pbag,O:Pbag,H:NePbag]) = true .
  eq hasInhibitors(N) = false [owise] .
  op n : NetToken -> Net .
  op m : NetToken -> Bag{Pbag} .
  cmb N B : NetToken if hasInhibitors(N) = false . *** we suppose that net-tokens do not have inhibitor arcs
  eq n(N B) = N .
  eq m(N B) = B .
  op ch : Tran -> String . *** channel of a transition
  eq ch(T:Tran) = ch(l(T:Tran)) .
  op enabled : Bag{Tran} Pbag -> Bool . *** cumulative enabling
  op pre : Bag{Tran} -> Pbag .
  eq pre(TB) = $pre(TB, nilP) .
  op $pre : Bag{Tran} Pbag -> Pbag .
  eq $pre(nilT, PB) = PB .
  eq $pre(K . T + TB, PB) = $pre(TB, PB + K * I(T)) . 
  op post : Bag{Tran} -> Pbag .
  eq post(TB) = $post(TB, nilP) .
  op $post : Bag{Tran} Pbag -> Pbag .
  eq $post(nilT, PB) = PB .
  eq $post(K . T + TB, PB) = $post(TB, PB + K * O(T)) . 

endfm

*** net-token including the object-autonomous firing rule
mod NET-TOKEN-SYS{L :: NTHLAB} is
 inc NET-TOKEN{L} .
 vars N N' : Net .
 var B : Bag{Pbag} . 
 vars M M' : Pbag .
 var K : NzNat .
 var T : Tran .
 var NT : NetToken .
 *** crl [ntaut-firing] : N B + K . M => N B + sd(K,1) . M + 1 . firing(T, M) if  T ; N' := N  /\ ch(T) == "" /\ I(T) <= M /\ R:Float := firing-rate(T, M) .
 crl [ntaut-firing] : NT => (T ; N) B + sd(K,1) . M + 1 . firing(T, M) if (T ; N) B + K . M := NT /\ ch(T) = "" /\ I(T) <= M /\ R:Float := firing-rate(T, M) .
endm

in ../ALG-PN

view NetToken{L :: NTHLAB} from TRIV to NET-TOKEN{L} is
 sort Elt to NetToken .
endv

*** definition of an eHornet marking parametric vs the net-tokens' transitions lab
fmod EHORNET-GEN{L :: NTHLAB} is
   generated-by MSET-MARKING{NetToken{L}} * (sort Mset{NetToken{L}} to Mset{NetToken}, 
                            sort Bag{NetToken{L}} to Bag{NetToken}, sort NeBag{NetToken{L}} to NeBag{NetToken}, sort ElBag{NetToken{L}} to ElBag{NetToken},
                            sort MsetMarking{NetToken{L}} to  MsetMarking{NetToken}, sort  PmsetMarking{NetToken{L}} to  PmsetMarking{NetToken},
                            op nil to nilNT, op empty to emptyNT ) .
   var N : Net .
   vars B B' : Bag{Pbag} . *** compact net-token markings
   eq (N B) (N B') = N (B + B') . 
endfm

fth SYNCH is
 inc SPN-SIG{NTHLAB}{Ntlab} .
 inc BAG{String} * (op nil to nilS) .
 op synch : Net String -> Bag{String} . *** maps each rule (label) to a bag of channels
endfth

mod EHORNET{S :: SYNCH} is 
  inc EHORNET-GEN{Ntlab} .
  inc NET-TOKEN-SYS{Ntlab} .
endm