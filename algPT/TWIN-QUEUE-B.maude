in ../shared/ELIST
in ALG-PN

*** EXAMPLE:  algebraic net using two (embedded) lists where some tasks are non-deterministically picked up fairly from a repository

*** version 1 using BAG
mod TWIN-QUEUE-B{X :: TRIV} is
 *** types of places
 pr B-MARKING-STR{X} . 
 pr B-MARKING-STR{Elist{X}} * (op mark to markL) . *** renaming mark is mandatory !
 
 *** op m0 : -> Marking . *** alias - intial marking and implicilty net's places' structure
 *** eq m0 =  p("queue") |-> 2 . [nil] ; p("task") |-> 1 . 0 + 2 . 1 + 3 . 2 . *** the lists in p1 are initially empty 
 
 var M : Marking .
 var B : Bag{X} .
 vars L L' : List{X} .
 var LB : Bag{Elist{X}} .
 var X : X$Elt .
 var K : NzNat .
 var N : Nat .
 
  *** the algebraic net's transitions are encoded as rewrite rules

  *** witdraws two occurrences of an element from p("task"), by appending each occurrence to one of the list in p("queue")
*** crl [d1] : p("queue") |-> 1 . [L]  + 1 . [L'] ;  p("task") |-> K . X + B => p("queue") |-> 1 . [L, X] + 1 . [L', X] ; p("task") |-> sd(K,2) . X + B  if K > 1 .
rl [d1] : p("queue") |-> 1 . [L]  + 1 . [L'] ;  p("task") |-> s(s(N)) . X + B => p("queue") |-> 1 . [L, X] + 1 . [L', X] ; p("task") |-> N . X + B  .

  *** the same as above, necessary to consider the case of identical queues 
*** crl [d2] : p("queue") |-> 2 . [L] ;  p("task") |-> K . X + B => p("queue") |-> 2 . [L, X] ; p("task") |-> sd(K,2) . X + B  if K > 1 . 
rl [d2] : p("queue") |-> 2 . [L] ;  p("task") |-> s(s(N)) . X + B => p("queue") |-> 2 . [L, X] ; p("task") |-> N . X + B . 

*** withdraws residual single elements from p("task"), by appending them to one of the two lists (randomly chosen) 
rl [l1] : p("queue") |-> 1 . [L]  + 1 . [L'] ;  p("task") |-> 1 . X + B => p("queue") |-> 1 . [L, X] + 1 . [L'] ; p("task") |-> B .

*** the same as l1 ...
rl [l2] : p("queue") |-> 2 . [L]  ;  p("task") |-> 1 . X + B => p("queue") |-> 1 . [L, X] + 1 . [L] ; p("task") |-> B .

*** removes the head element from one of the queues (chosen nondeterministically)
rl [s1] : p("queue") |-> 1 . [X, L]  + 1 . [L'] ;  p("task") |-> B => p("queue") |-> 1 . [L] + 1 . [L'] ; p("task") |-> B + 1 . X .

*** the same as s1 ...
rl [s2] : p("queue") |-> 2 . [X, L] ;  p("task") |-> B => p("queue") |-> 1 . [X, L] + 1 . [L] ; p("task") |-> B + 1 . X .
  
endm

mod TWIN-QUEUE-NAT-B is
  inc TWIN-QUEUE-B{Nat} . 
  op m0 : -> Marking . *** alias - intial marking and implicilty net's places' structure
  op ms0 : -> Bag{Nat} .
  eq ms0 = 3 . 0 + 2 . 1 + 1 . 2 .
  eq m0 =  p("queue") |-> 2 . [nil] ; p("task") |-> ms0 . *** the lists in p1 are initially empty 

endm


