in ../ALG-PN
in RR-QUEUE

*** EXAMPLE:  algebraic net shema for a multilevel feedback queue 

*** version using MSET
mod MFQ{X :: TRIV} is
 pr MS-MARKING-STR{Task{X}} *  (sort PmsMarking{Task{X}} to PmsMarking{Task}, 
                               sort  Mset{Task{X}} to  Mset{Task}, op empty{Task{X}} to empty{Task}) .
 pr MS-MARKING-STR{Queue{X}} * (sort PmsMarking{Queue{X}} to PmsMarking{Queue}, sort Mset{Queue{X}} to Mset{Queue},
                                op empty{Queue{X}} to  empty{Queue}, op mark to markQ ) . *** renaming mark is mandatory

 vars Q Q' : Queue .
 vars MQ MQ' : Mset{Queue} .
 
 op repeated : Mset{Queue} -> Bool . *** checks for repeated priority
 ceq repeated(Q Q' MQ) = true if pi(Q) = pi(Q') .
 eq repeated(MQ) = false [owise] .

 op in : Mset{Queue} Nat -> Bool . *** check that a queue with the given priority is present in the network
 var N : Nat .
 eq in((Q: L:List{Task} TS: K:NzNat PI: N) MQ, N) = true .
 eq in(MQ, N) = false [owise] .

 op normalize : Mset{Queue} -> [Mset{Queue}] . *** normalizes the priority values of a network of queue so that they fall in 0..len-1
 ceq normalize(MQ) = $normalize(MQ, 0, empty{Queue}) if repeated(MQ) = false .
 op $normalize : Mset{Queue} Nat Mset{Queue} -> Mset{Queue} .
 ceq $normalize(MQ, N, MQ') = MQ if N == len(MQ) .
 ceq $normalize(Q MQ, N, MQ') = $normalize(MQ, s(N), Q MQ') if pi(Q) = s(N) .
 ceq $normalize(Q MQ, N, MQ') = $normalize(MQ, N, Q MQ') if pi(Q) <= N .
 eq $normalize(MQ, N, MQ') = $normalize(MQ, s(N), MQ') [owise] .
   
 op maxPi : Mset{Queue} -> [Queue] . *** the queue with the highest priority
 eq maxPi(Q MQ) = $maxPi(MQ, Q) .
 op $maxPi : Mset{Queue} Queue -> Queue .
 eq $maxPi(Q MQ, Q') = if pi(Q) > pi(Q') then $maxPi(MQ, Q) else $maxPi(MQ, Q') fi .
 eq $maxPi(empty{Queue}, Q) = Q .

endm

*** example of instantiation with Nat

mod MFQ-STR is
   inc MFQ{String} . 
   op m0 : -> Marking [memo] . 
   eq m0 =  p("queue") |-> (Q: nil TS: 2 PI: 0) (Q: nil TS: 3 PI: 1) (Q: nil TS: inf PI: 3) ; p("task") |-> ("a" @ 0) ("a" @ 0) ("a" @ 0) ("b" @ 1) ("b" @ 1)  . 

endm
