in TASK

*** Round Robin (FIFO) queue - builds on predefined LIST and on TASK
fmod RR-QUEUE{X :: TRIV} is
 protecting LIST{Task{X}} * (sort List{Task{X}} to List{Task}, sort NeList{Task{X}} to NeList{Task}, op __  to _`,_ ) .
 sort Queue .
 op Q:_TS:_PI:_ : List{Task} NzNat Nat -> Queue .
 op inf : -> NzNat [memo] . *** alias for a big value representing the infinity
 eq inf = 1000000000000000000000000000000000000000 .
 vars N : Nat . var K : NzNat .
 var L : List{Task} .
 op ts : Queue -> NzNat . *** time slice of the queue (infinite means fifo)
 op pi : Queue -> Nat . *** priority of the queue
 op q :  Queue -> List{Task} . *** list of tasks
 eq ts(Q: L TS: K PI: N) = K .
 eq pi(Q: L TS: K PI: N) = N .
 eq q(Q: L TS: K PI: N)  = L .
endfm

*** parameterized trivial view
view Queue{X :: TRIV} from TRIV to RR-QUEUE{X} is 
 sort Elt to Queue . 
endv

