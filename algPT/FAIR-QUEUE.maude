in ./ELIST
in ALG-PN

*** EXAMPLE:  algebraic net using two (embedded) lists where some tasks are non-deterministically picked up fairly from a repository

*** version 1 using BAG
mod FAIR-QUEUE is
 *** types of places
 *** we rename nil for convenience because it denotes both a BAG and a LIST
 pr MARKING{Nat,String} * (op nil to nilNat) . 
 pr MARKING{Elist{Nat},String} * (op nil : -> List{Nat} to nilL, op nil : -> Bag{Elist{Nat}} to nilB, op mark to markL) . *** renaming mark is mandatory !
 
 op init : -> Marking . *** alias - intial marking and implicilty net's places' structure
 eq init =  p("queue") |-> 2 . [nilL] ; p("task") |-> 1 . 0 + 2 . 1 + 3 . 2 . *** the lists in p1 are initially empty 
 
 var M : Marking .
 var B : Bag{Nat} .
 vars L L' : List{Nat} .
 var LB : Bag{Elist{Nat}} .
 var X : Nat .
 vars K K' K'' : NzNat .
 
  *** the algebraic net's transitions are encoded as rewrite rules

  *** witdraws two occurrences of an element from p("task"), by appending each occurrence to one of the list in p("queue")
  crl [distribute-1] : p("queue") |-> 1 . [L]  + 1 . [L'] ;  p("task") |-> K . X + B => p("queue") |-> 1 . [L, X] + 1 . [L', X] ; p("task") |-> sd(K,2) . X + B  if K > 1 .

  *** the same as above, necessary to consider the case of identical queues 
crl [distribute-2] : p("queue") |-> 2 . [L] ;  p("task") |-> K . X + B => p("queue") |-> 2 . [L, X] ; p("task") |-> sd(K,2) . X + B  if K > 1 . 

*** withdraws residual single elements from p("task"), by appending them to one of the thw lists (randomly chosen) 
rl [pick-up-1] : p("queue") |-> 1 . [L]  + 1 . [L'] ;  p("task") |-> 1 . X + B => p("queue") |-> 1 . [L, X] + 1 . [L'] ; p("task") |-> B .

*** the same as pick-up-1 ...
rl [pick-up-2] : p("queue") |-> 2 . [L]  ;  p("task") |-> 1 . X + B => p("queue") |-> 1 . [L, X] + 1 . [L] ; p("task") |-> B .

*** serves (removes) the head element from one of the queues (chosen nondeterministically)
rl [serve-1] : p("queue") |-> 1 . [X, L]  + 1 . [L'] ;  p("task") |-> B => p("queue") |-> 1 . [L] + 1 . [L'] ; p("task") |-> B + 1 . X .

*** the same as serve-1 ...
rl [serve-2] : p("queue") |-> 2 . [X, L] ;  p("task") |-> B => p("queue") |-> 1 . [X, L] + 1 . [L] ; p("task") |-> B + 1 . X .

  
endm

