in ./ELIST
in ALG-PN

*** EXAMPLE:  algebraic net using two (embedded) lists where some tasks are non-deterministically picked up fairly from a repository

*** version 2 using MSET
mod FAIR-QUEUE-2 is
 pr MS-MARKING-STR{Nat} .
 pr MS-MARKING-STR{Elist{Nat}} *  (op mark to markL) . *** renaming mark is mandatory  
 
 op m0 : -> Marking [memo] . *** alias - intial marking
 eq m0 =  p("queue") |-> [nil] [nil] ; p("task") |-> 0 1 1 2 2 2 . 
 
 var M : Marking .
 var B : Mset{Nat} .
 vars L L' : List{Nat} .
 var LB : Mset{Elist{Nat}} .
 var X : Nat .
 *** withdraws two occurrences of an element from p("task"), by appending each to one of the list in p("queue")
 rl [distribute] : p("queue") |-> [L] [L']  ;  p("task") |-> X X B => p("queue") |-> [L, X] [L', X] ; p("task") |-> B .
 
 *** withdraws residual single elements from p("task"), by appending them to one of the thw lists (randomly chosen) 
crl [pick-up] : p("queue") |-> [L] [L'] ;  p("task") |-> X B => p("queue") |-> [L, X] [L'] ; p("task") |-> B if not(X leq B) .

*** serves (removes) the head element from one of the queues (chosen nondeterministically)
rl [serve] : p("queue") |-> [X, L]  [L'] ;  p("task") |-> B => p("queue") |->  [L] [L'] ; p("task") |-> B X .
endm

