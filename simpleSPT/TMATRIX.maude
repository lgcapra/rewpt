in PBAG
in ATYPE

fmod TMATRIX is
 pr PBAG .
 pr ATYPE .
 sort Tmatrix .
 op [_,_,_] : Pbag Pbag Pbag -> Tmatrix [ctor] .
 
 var  P : Place .
 vars X Y Z X' Y' Z' : Pbag .
 vars K K' : NzNat .
 vars Q Q' : Tmatrix .
 
 ops I O H : Tmatrix -> Pbag .
 eq I([X,Y,Z]) = X .
 eq O([X,Y,Z]) = Y .
 eq H([X,Y,Z]) = Z .

 op hasConcession : Tmatrix Pbag -> Bool .
 eq hasConcession([X,Y,Z], X') = X <= X' and-then Z > X' .

 op fire : Tmatrix Pbag -> Pbag .
 eq fire([X,Y,Z], X') = X' + Y - X .
 
 op _(_) : Tmatrix Atype -> Pbag [prec 23] . *** introduced for convenience
 var a : Atype .
 eq Q(i) = I(Q) .
 eq Q(o) = O(Q) . 
 eq Q(h) = H(Q) .

 op in :  Tmatrix Place -> Bool . *** test the existence of a place
 eq in([X + K . P, Y, Z], P) = true .
 eq in([X, Y + K . P, Z], P) = true .
 eq in([X, Y, Z + K . P], P) = true .
 eq in(Q, P) = false [owise] .

 op dead : Tmatrix -> Bool .  *** checks for structurally dead transitions 
ceq dead([K . P + X, Y, K' . P + Z]) = true if K >= K'  .
 eq dead(Q) = false [owise] .

 op places : Tmatrix -> Pset .
 eq places([X,Y,Z]) = support(X) U support(Y) U support(Z) .
  
endfm

view Tmatrix from TRIV to TMATRIX is 
 sort Elt to Tmatrix . 
endv
