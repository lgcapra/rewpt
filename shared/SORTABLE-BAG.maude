in ../shared/BAG
in LEX-PAIR<
in COMPARABLE-LIST

fmod SORTABLE-BAG{X :: STRICT-TOTAL-ORDER} is
 pr BAG{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} * (sort Bag{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to Bag{X},
    sort NeBag{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeBag{X},
    sort Set{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to Set{X}, sort NeSet{STRICT-WEAK-ORDER}{STRICT-TOTAL-ORDER}{X} to NeSet{X}) .
 pr COMPARABLE-LIST{LEX-PAIR<{X,Nat<}} * (sort Pair{X,Nat<} to Pair{X,Nat}, sort List{LEX-PAIR<{X,Nat<}} to List{X,Nat},
    sort NeList{LEX-PAIR<{X,Nat<}} to NeList{X,Nat}, op nil to []) .

 vars B B' : Bag{X} .
 var L : List{X,Nat} .  
 var E : X$Elt .
 var N : NzNat .
 
 op makeList  : Bag{X} -> List{X,Nat} .
 op makeList  : NeBag{X} -> NeList{X,Nat} .
 op $makeList : Bag{X} List{X,Nat} -> List{X,Nat} . 
 op $makeList : NeBag{X} List{X,Nat} -> NeList{X,Nat} . 
 op $makeList : Bag{X} NeList{X,Nat} -> NeList{X,Nat} . 
 eq makeList(B) = $makeList(B, []) . 
 eq $makeList(nil, L) = sort(L) . 
 eq $makeList((N . E + B), L) = $makeList(B, < E ; N > L) . 

 op _le_  : Bag{X} Bag{X} -> Bool . 
 op _leq_ : Bag{X} Bag{X} -> Bool .
 eq B le B' = makeList(B) lex makeList(B') .
 eq B leq B' = B == B' or-else B le B' .
endfm