fmod MAP+{X :: TRIV, Y :: TRIV} is 
  inc MAP{X,Y} * (op empty to emptyM).
  protecting SET{X} .
  pr NAT .
  vars R R' : Y$Elt .
  var D : X$Elt .
  var E : Entry{X,Y} .
  var M : Map{X,Y} .
  var K : Nat .
  
  eq E, E = E . *** duplicates are removed (a map is a set of entries)

  op remove : X$Elt Map{X,Y} -> Map{X,Y} . *** removes a key from a map 
  eq remove (D, (M, D |-> R)) = remove(D, M) .
  eq remove (D, M) = M [owise] .
    
  op repeatedKeys? : Map{X,Y}  -> Bool . *** cheks for repeated keys
  eq repeatedKeys?((D |-> R, D |-> R', M)) = true .
  eq repeatedKeys?(M) = false [owise] .

  op msize : Map{X,Y} -> Nat .
  op $msize : Map{X,Y} Nat -> Nat . 
  eq msize(M) = $msize(M, 0) .  
  eq $msize(emptyM, K) = K . 
  eq $msize((E, M), K) = $msize(M, K + 1) .

  var S : Set{X} .
  op keySet : Map{X,Y} -> Set{X} .
  eq keySet(M) = $keySet(M, empty) .  
  op $keySet : Map{X,Y} Set{X} -> Set{X} . 
  eq $keySet(emptyM, S) = S . 
  eq $keySet((D |-> R, M), S) = $keySet(M, (S, D)) .
endfm