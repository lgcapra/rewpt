in SET+

fmod BAG{X :: TRIV} is
 protecting INT .
 protecting EXT-BOOL .
 
 sorts Bag{X} NeBag{X} .
 subsorts NeBag{X} < Bag{X} .

 vars N M : NzNat .
 var K : Nat .
 vars X Y : X$Elt .
 var B B' : Bag{X} .

 op nil : -> Bag{X} [ctor] .
 op _._  : NzNat X$Elt ->  NeBag{X} [prec 35 ctor] .

 op _`[_`] : Bag{X} X$Elt -> Nat [prec 23] .
 op _+_  : Bag{X} Bag{X} -> Bag{X} [prec 39 ctor assoc comm id: nil] .
 op _+_  : NeBag{X} Bag{X} -> NeBag{X} [ctor ditto] .
 eq (N . X + B)[X] = N .
 eq B[X] = 0 [owise] .
 eq N . X + M . X = (N + M) . X .
 
 op _-_  : Bag{X} Bag{X} -> Bag{X} [prec 41 gather (E e) right id: nil] .
 eq N . X + B - M . X + B' = if N > M then N - M . X + (B - B') else B - B' fi  .
 eq B - M . X + B' = B - B' [owise] .

 op _∩_ : Bag{X} Bag{X} -> Bag{X} [prec 43 assoc comm] .  *** intersection
 eq B ∩ B = B .
 eq B ∩ nil = nil .
 eq N . X + B ∩ M . X + B' = min(N,M) . X + (B ∩ B') .
 eq N . X + B ∩ B' = B ∩ B' [owise] .
 op _I_ : Bag{X} Bag{X} -> Bag{X} [prec 43 assoc comm] .  *** intersection (aliasing)
 eq B I B' = B ∩ B' .
 

*** scalar product
 op _*_ : Nat Bag{X} -> Bag{X}  [prec 37] . *** higher priority than the sum (in any case parenthese needed to disambiguate)
 eq 0 * B = nil .
 eq M * nil = nil .
 eq M * (N . X + B) = (M * N) . X + M * B .
 
 *** scalar division (by a nonzero nat) 
 op _/_ : Bag{X} NzNat -> Bag{X} [prec 37]. *** higher priority than the sum (for symmetry with *)
 eq nil / M = nil .  
ceq (N . X + B) / M = B / M if N quo M == 0 .
 eq (N . X + B) / M = N quo M . X + B / M [owise] .

 op _<=_ : Bag{X} Bag{X} -> Bool [prec 43] .
 ceq N . X + B <= B' = false if N > B'[X] .
 eq B <= B' = true [owise] . 
 *** eq nil <= B = true .
 *** eq N . X + B <= M . X + B' = N <= M and-then B <= B' .
 *** eq B <= B' = false [owise] . 
 
 op _>'_ : Bag{X} Bag{X} -> Bool [prec 43] .
 ceq N . X + B >' B' = false if N <= B'[X] .
 eq B >' B' = true [owise] .
 *** eq nil >' B = true .
 *** eq N . X + B >' M . X +  B' = N > M and-then B >' B' .
 *** eq B >' B' = true [owise] .
 
 op set  : Bag{X} X$Elt Nat -> Bag{X} . 
 eq set(B + N . X, X, K) = if K == 0 then B else B + K . X fi . 
 eq set(B, X, K) =  if K == 0 then B else B + K . X fi [owise] .

 op ||_|| : Bag{X} -> Nat . 
 op ||_|| : NeBag{X} -> NzNat . 
 eq || B || = $bcard(B, 0) . 
 op $bcard : Bag{X} Nat -> Nat . 
 eq $bcard(nil, K) = K . 
 eq $bcard(N . X + B, K) = $bcard(B, K + N) .
 
 op bsize : Bag{X} -> Nat . *** bag's size 
 op bsize : NeBag{X} -> NzNat . 
 eq bsize(B) = $bsize(B, 0) .  
 op $bsize : Bag{X} Nat -> Nat . 
 eq $bsize(nil, K) = K . 
 eq $bsize(N . X + B, K) = $bsize(B, K + 1) .

 *** checks whether two bags have the same multiplicities
 op _eqw_ : Bag{X} Bag{X} -> Bool [ comm ] .
 eq B eqw B = true .
 eq N . X + B eqw N . Y + B' = B eqw B' .
 eq B eqw B' = false [owise] . 

 op join : Bag{X} Bag{X} -> [Bag{X}] [assoc comm id: nil] . *** join two bags: elements present in both must have equal multeplicity (otherwise the result in unfefined) 
 vars NeB NeB' : NeBag{X} .
 eq join(NeB, NeB) = NeB .
ceq join(N . X + B, NeB) = N . X + join(B, NeB)  if NeB[X] == 0 .
endfm

*** parameterized trivial view to BAG{X}
view Bag{X :: TRIV} from TRIV to BAG{X} is 
 sort Elt to Bag{X} . 
endv