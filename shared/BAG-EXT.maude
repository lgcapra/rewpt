in BAG

fmod BAG-EXT{X :: TRIV} is
 protecting BAG{X}.
 protecting SET{Bag{X}} * (sort Set{Bag{X}} to SetBag{X}, sort NeSet{Bag{X}} to NeSetBag{X}, op empty to emptySetB) .

 vars N K : NzNat .
 var I : Nat .
 vars X Y : X$Elt .
 vars B B' : Bag{X} .
 var NeB   : NeBag{X} .
 vars S S' : SetBag{X} .
 
 op split : Bag{X} Nat -> SetBag{X} . *** splits a bag into sub-bags of a given card 
 op $forsplit  : Nat X$Elt Bag{X} NzNat -> SetBag{X} .

 eq split(B, 0) = nil . *** base case 1)
ceq split(NeB, K) = NeB if || NeB || == K . *** base case 2) 
ceq split(B, K) = emptySetB if  || B || < K .  *** base case 3)
 eq split(N . X + B, K) = $forsplit(min(N,K), X, B, K) [owise] . *** || B || > K
 eq $forsplit(0, X, B, K) = split(B, K) .
 eq $forsplit(N, X, B, K) = addall(N . X, split(B, K - N)), $forsplit(N - 1, X, B, K) .


 op addall  : Bag{X} SetBag{X}  -> SetBag{X} . *** sum the specified bag to every bag in the set
 eq addall(B, S) = $addall(B, S, emptySetB) .
 op $addall : Bag{X} SetBag{X} SetBag{X} -> SetBag{X} .
 eq $addall(B, emptySetB, S) = S .
 eq $addall(B, (B' , S'), S) = $addall(B, S', (B + B', S)) .
  
endfm

fmod BAG-STRING is
 protecting BAG-EXT{String} .
endfm

