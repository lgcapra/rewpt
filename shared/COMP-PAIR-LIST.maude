*** this module defines sortable-comparable lists of pairs
in COMPARABLE-LIST
in PAIR<

fmod COMP-PAIR-LIST{X :: STRICT-TOTAL-ORDER, Y :: STRICT-TOTAL-ORDER} is 
 pr COMPARABLE-LIST{PAIR<{X,Y}} * (sort List{PAIR<{X,Y}} to List{X,Y}, sort NeList{PAIR<{X,Y}} to NeList{X,Y}, op nil to emptyListXY ) .
    
    op _cmp1_  : List{X,Y} List{X,Y} -> Nat . *** lexicographically comparison based on 1st element of a pair: returns 1, 0, 2 if the 1st list is "equal", less than, or greater than the 2nd one
    op _cmp2_  : List{X,Y} List{X,Y} -> Nat . *** lexicographically comparison based on 2nd element (analogous)
    op _lex12_ : List{X,Y} List{X,Y} -> Bool .  *** lexicographical ordering first considering the sequence of X elements then the sequence of Ys.
    
    vars A A' : X$Elt .
    vars B B' : Y$Elt .
    vars L L' : List{X,Y} .
    var NeL : NeList{X,Y} .
    var P P' : Pair{X,Y} .
    
    eq L cmp1 L = 0 .
    eq emptyListXY cmp1 NeL = 1 .
    eq NeL cmp1 emptyListXY = 2 .
    eq < A ; B > L cmp1 < A ; B' > L'  =  L cmp1 L' [owise] .
    eq < A ; B > L cmp1 < A' ; B' > L' =  if A < A' then 1 else 2 fi [owise] .

    eq L cmp2 L = 0 .
    eq emptyListXY cmp2 NeL = 1 .
    eq NeL cmp2 emptyListXY = 2 .
    eq < A ; B > L cmp2 < A' ; B > L'  =  L cmp2 L' [owise] .
    eq < A ; B > L cmp2 < A' ; B' > L' =  if B < B' then 1 else 2 fi [owise] .
    *** defined in addition to COMPARABLE-LIST's lex (which performs a classical pair-wise comparison) 
    var N : Nat .
   ceq L lex12 L' = if N == 1 then true else if N == 2 then false else (L cmp2 L') == 1 fi fi   if N := L cmp1 L' .

endfm
 