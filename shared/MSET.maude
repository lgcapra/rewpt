in BAG

*** multisets implemented as commutative monoids
fmod MSET{X :: TRIV} is
 pr NAT . 
 sorts Mset{X} . 
 subsort X$Elt < Mset{X} . 
 op empty{X} : -> Mset{X} [ctor] . 
 op __ : Mset{X} Mset{X} -> Mset{X} [ctor assoc comm id: empty{X}] .
 op len : Mset{X} -> Nat .
 eq len(empty{X}) = 0 .
 vars M M' : Mset{X} .
 var X : X$Elt .
 eq len(M X) = 1 + len(M) .
 op _leq_ : Mset{X} Mset{X} -> Bool . *** checks that the 1st mset is contained in the 2nd
 eq M leq M M' = true .
 eq M leq M' = false [owise] .
 op supp : Mset{X} -> Mset{X} . *** support
 eq supp(empty{X}) = empty{X} .
 eq supp(M X X) = supp(M X) . 
 eq supp(M) = M [owise] . 
endfm

*** links the two representations of multisets
fmod MSET-BAG{X :: TRIV} is
 pr MSET{X} .
 pr BAG{X} .
 op bag :  Mset{X} -> Bag{X} .
 op mset : Bag{X} -> Mset{X} . 
 var X : X$Elt .
 var K : NzNat .
 vars B B' : Bag{X} .
 vars M M' : Mset{X} .
 eq mset(B) = $mset(B, empty{X}) .
 eq bag(M) = $bag(M, nil) .
 op $mset : Bag{X} Mset{X} -> Mset{X} .
 eq $mset(nil, M) = M .
 eq $mset(K . X + B, M) = $mset(sd(K,1) . X + B, M X) . 
 op $bag :  Mset{X} Bag{X} -> Bag{X} .
 eq $bag(empty{X}, B) = B .
 eq $bag(M X, B) = $bag(M, B + 1 . X) . 
endfm

*** trivial views to MSET-BAG (one to Mset{X}, the other to Bag{X}) 
view Mset{X :: TRIV} from TRIV to MSET-BAG{X} is
   sort Elt to Mset{X} .
endv

view MsetBag{X :: TRIV} from TRIV to MSET-BAG{X} is
   sort Elt to Bag{X} .
endv
