*** lexicographically ordered lists
fmod COMPARABLE-LIST{X :: STRICT-TOTAL-ORDER} is 
 pr SORTABLE-LIST{X} .
 pr EXT-BOOL . 
 
 op lex : List{X} List{X} -> Bool .  *** we use the name lex instead of < to avoid a conflict
 op cmp : List{X} List{X} -> Nat .   *** compare method  -- results in {0,1,2}
 
 vars E E' : X$Elt .
 vars L L' L'' : List{X} .
 vars  NeL NeL' : NeList{X} .
 
 eq  lex(L, L) = false .
 eq  lex(L, L') = cmp(L, L') == 1 [owise] . 
 eq  cmp(nil, NeL) = 1 .
 eq  cmp(NeL, nil) = 2 .
 eq  cmp(nil, nil) = 0 .
 eq  cmp(NeL L', NeL L'') = cmp(L', L'') .
 eq  cmp(E L, E' L') = if E < E' then 1 else 2 fi [owise] .
endfm


view ComparableList<{X :: STRICT-TOTAL-ORDER} from STRICT-TOTAL-ORDER to COMPARABLE-LIST{X} is 
 sort Elt to  List{X} .
 op _<_ to lex .
endv