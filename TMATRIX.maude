in PBAG
in ATYPE

fmod TMATRIX{L :: TRIV} is
 pr PBAG{L} .
 pr ATYPE .
 sort Tmatrix .
 op [_,_,_] : Pbag Pbag Pbag -> Tmatrix [ctor] .
 
 var P  : Place .
 vars I O H M I' O' H' : Pbag .
 vars K K' : NzNat .
 var Q  : Tmatrix .
 var S  : Pset .
  
 ops I O H : Tmatrix -> Pbag .
 eq I([I,O,H]) = I .
 eq O([I,O,H]) = O .
 eq H([I,O,H]) = H .

 op _(_) : Tmatrix Atype -> Pbag [prec 23] . *** introduced for convenience
 var a : Atype .
 eq Q(i) = I(Q) .
 eq Q(o) = O(Q) . 
 eq Q(h) = H(Q) .

 op in :  Tmatrix Place -> Bool . *** test the existence of a place
 eq in(Q, P) = isIn(Q, P) or-else isOut(Q, P) or-else isH(Q, P) .
 ops isIn isOut isH : Tmatrix Place -> Bool .
 eq isIn([I + K . P, O, H], P) = true .
 eq isIn(Q, P) = false [owise] .
 eq isOut([I, O + K . P, H], P) = true .
 eq isOut(Q, P) = false [owise] .
 eq isH([I, O, H + K . P], P) = true .
 eq isH(Q, P) = false [owise] .

 op places : Tmatrix -> Pset .
 eq places([I,O,H]) = support(I) U support(O) U support(H) .

 op enabled : Tmatrix Pbag -> Bool .
 eq enabled([I,O,H], M) = I <= M and-then H > M .

 op firing : Tmatrix Pbag -> Pbag .
 eq firing([I,O,H], M) = M + O - I .

 op dead : Tmatrix -> Bool .  *** checks for structurally dead transitions 
 eq dead([K . P + I, O, K' . P + H]) = K >= K' [metadata "dead tq"] .
 eq dead(Q) = false [owise] .

 *** pair-wise sum
 op _+_  : Tmatrix Tmatrix -> Tmatrix [prec 41 assoc comm] .
 eq [I,O,H] + [I',O',H'] = [I' + I, O' + O, H' + H] .

 *** set a given place's arc type
 op set : Tmatrix Atype Place Nat -> Tmatrix .
 eq set([I,O,H], i, P, K) = [set(I,P,K), O, H] .
 eq set([I,O,H], o, P, K) = [I, set(O,P,K), H] .
 eq set([I,O,H], h, P, K) = [I, O, set(H,P,K)] .

 *** removes the specified places from a local matrix
 op remove :  Tmatrix Pset -> Tmatrix .
 eq remove([I,O,H], S) = [remove(I, S),remove(O, S),remove(H, S)] .

endfm

*** default view
view Tmatrix{L :: TRIV} from TRIV to TMATRIX{L} is 
 sort Elt to Tmatrix . 
endv

view PsetTM{L :: TRIV} from TRIV to TMATRIX{L} is 
 sort Elt to Pset . 
endv
