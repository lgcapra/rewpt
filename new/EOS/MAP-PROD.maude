in ../../shared/SET+
in ../../shared/MAP+
in ../BagP

fmod MAP-OF-SET{X :: TRIV,Y :: TRIV} is
  pr MAP+{X,Set+{Y}} * (sort Map{X,Set+{Y}} to Map{X,Set{Y}}, sort Entry{X,Set+{Y}} to Entry{X,Set{Y}}, 
                         op emptyM to emptyMSet, op undefined to undefMSet) . 
endfm

fmod SET-OF-MAP{X :: TRIV,Y :: TRIV} is
  pr SET+{Map+{X,Y}} * (sort Set{Map+{X,Y}} to Set{Map{X,Y}}, sort NeSet{Map+{X,Y}} to NeSet{Map{X,Y}},
                        op emptyS to emptySetM) .   
endfm

fmod MAP-PROD{X :: TRIV,Y :: TRIV} is
  pr SET-OF-MAP{X,Y} .
  pr MAP-OF-SET{X,Y} * (op _|->_ to _>>_ ) .
  vars S S' : Set{Y} .
  vars K K' : X$Elt .
  vars V V' : Y$Elt .
  vars E E' : Entry{X,Set{Y}} .
  var M : Map{X,Y} .
  var SM SM' : Set{Map{X,Y}} .
  var NeSM : NeSet{Map{X,Y}} .
  var MS : Map{X,Set{Y}} .
  
  *** transforms an entry (having a set as value) to a set of entries (empty if the set-value is)
  op toset : Entry{X,Set{Y}} -> Set{Map{X,Y}} . *** actually the range set is a set of entries (elementary maps) ...
  eq toset(E) = $toset(E, emptySetM) .
  op $toset : Entry{X,Set{Y}} Set{Map{X,Y}} -> Set{Map{X,Y}} .
  eq $toset(K >> emptyS, SM) = SM .
  eq $toset(K >> V U S,  SM) = $toset(K >> S, (K |-> V) U SM) .

  *** a kind of Cartesian product of maps of set-values
  op prod  : Map{X,Set{Y}}  -> [Set{Map{X,Y}}] .  *** undefined if the map is empty
  eq prod(E) = toset(E) . *** base case
  eq prod(K >> S ; MS) = join(K, S, prod(MS)) [owise] . 
  op join : X$Elt Set{Y} Set{Map{X,Y}}  -> Set{Map{X,Y}} .
  eq join(K, S, emptySetM) = emptySetM .
  eq join(K, S, NeSM) = $join(K, S, NeSM, emptySetM) .
  op $join : X$Elt Set{Y} NeSet{Map{X,Y}} Set{Map{X,Y}} -> NeSet{Map{X,Y}} .
  eq $join(K, emptyS, NeSM, SM) = SM .
  eq $join(K, V U S,  NeSM, SM)  = $join(K, S, NeSM, SM U eljoin(K, V, NeSM))  .
   *** add the entry K |-> V to each map of the set
  op eljoin : X$Elt Y$Elt NeSet{Map{X,Y}}  -> NeSet{Map{X,Y}} .
  eq eljoin(K, V, NeSM) = $eljoin(K, V, NeSM, emptySetM) .
  op $eljoin : X$Elt Y$Elt Set{Map{X,Y}} Set{Map{X,Y}} -> Set{Map{X,Y}} .
  eq $eljoin(K, V, emptySetM, SM) = SM .
  eq $eljoin(K, V, SM U M, SM')  = $eljoin(K, V, SM, (M ; K |-> V) U SM')  .
 
endfm