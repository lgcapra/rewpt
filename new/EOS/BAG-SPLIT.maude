*** extension of BAG with a few operators helpful in EOS nets
*** set of bags are defined too
in ../../shared/BAG

fmod BAG-SPLIT{X :: TRIV} is
 protecting SET+{Bag{X}} * (op emptyS : -> Set{Bag{X}} to emptySetB) .
 vars N K : NzNat .
 var I : Nat .
 vars X Y : X$Elt .
 vars B B' : Bag{X} .
 var NeB   : NeBag{X} .
 vars S S' : Set{Bag{X}} .
 
 op split : Bag{X} Nat -> Set{Bag{X}} . *** splits a bag into sub-bags of a given cardinality 
 op $forsplit  : Nat X$Elt Bag{X} NzNat -> Set{Bag{X}} .

 eq split(B, 0) = nil . *** base case 1)
ceq split(NeB, K) = NeB if || NeB || == K . *** base case 2) 
ceq split(B, K) = emptySetB if  || B || < K .  *** base case 3)
 eq split(N . X + B, K) = $forsplit(min(N,K), X, B, K) [owise] . *** || B || > K
 eq $forsplit(0, X, B, K) = split(B, K) .
 eq $forsplit(N, X, B, K) = addall(N . X, split(B, K - N)) U $forsplit(N - 1, X, B, K) .


 op addall  : Bag{X} Set{Bag{X}}  -> Set{Bag{X}} . *** sum the specified bag to every bag in the set
 eq addall(B, S) = $addall(B, S, emptySetB) .
 op $addall : Bag{X} Set{Bag{X}} Set{Bag{X}} -> Set{Bag{X}} .
 eq $addall(B, emptySetB, S) = S .
 eq $addall(B, B' U S', S) = $addall(B, S', B + B' U S) .
  
endfm
