*** example used in EOS paper (the EOS net consists of a single transition)
fmod WF-EOS is
  pr EOSYS . 
  *** inc EOS-EMU .
 ops net and seq xor atom : -> Net .
 op netype  : -> NeTypeS . *** basic object-net types
  op m0  : -> Map{Place,Bag{Bag{Place}}} .
  op eosnet  : -> Sysnet .
  op sync : -> Syncmap .

  var S : String .
  var Ty : NeTypeS . 
  *** this operator is built on a netype map: maps a "op@loc" string to the correspondig op-net
  *** if the string doesn't contain '@' it is used (as a whole) as a search key in netype map
  op wftype : NeTypeS String -> [Net] .
  eq wftype(Ty, S) = Ty[prefix(S,find(S, "@", 0))] .
  op prefix : String FindResult -> String . *** ayxiliary op
  eq prefix(S, notFound) = S .
  eq prefix(S, K:Nat) = substr(S, 0, K:Nat) .
  *** top operator (overloaded version searching in map netype) 
  op wftype : String -> [Net] .
  eq wftype(S) = wftype(netype, S) . 
  

  eq atom =  t(1, "start") |-> [emptyPbag, 1 . p(1, "i"), emptyPbag] ; t(2, "task") |-> [1 . p(1, "i"), 1 . p(2, "o"), emptyPbag] ;
             t(3, "stop") |-> [1 . p(2, "o"), emptyPbag, emptyPbag] .
  
  eq and =  t(1, "start") |-> [emptyPbag, 1 . p(1, "i"), emptyPbag] ; t(2, "abort") |-> [1 . p(1, "i"), emptyPbag, emptyPbag] ;
            t(3, "doAndSplit") |-> [1 . p(1, "i"), 1 . p(2, "wait") + 1 . p(3, "wait"), emptyPbag] ;
             t(4, "doAndJoin") |-> [1 . p(2, "wait") + 1 . p(3, "wait"), 1 . p(4, "o"), emptyPbag] ;
                  t(5, "stop") |-> [1 . p(4, "o"), emptyPbag, emptyPbag] .

  eq seq = t(1, "start") |-> [emptyPbag, 1 . p(1, "i"), emptyPbag] ; t(2, "abort") |-> [1 . p(1, "i"), emptyPbag, emptyPbag] ;
           t(2, "doSeqBegin") |-> [1 . p(1, "i"), 1 . p(2, "begin"), emptyPbag] ;
           t(3, "doSeqStep")  |-> [1 . p(2, "begin"), 1 . p(3, "end") , emptyPbag] ;
           t(4, "doSeqEnd")   |-> [1 . p(3, "end"), 1 . p(4, "o"), emptyPbag] ;
                 t(5, "stop") |-> [1 . p(4, "o"), emptyPbag, emptyPbag] .

  **** eq xor = ... 
  
  eq netype = "and" |-> and  ; "seq" |-> seq ; "a" |-> atom ; "b" |-> atom ; "c" |-> atom .
  *** eq sync = ... . 

  eq net = t(0,"init") |-> [1 . p(0, ""), 1 . p(1, "and@"), emptyPbag] ;
           t(1,"open And block") |-> [1 . p(1, "and@"), 1 . p(2, "atom@1") + 1 . p(3, "seq@2") + 1 . p(4, "and@"), emptyPbag] .
  eq eosnet = net netype sync .
  *** eq m0 =  ... .
endfm