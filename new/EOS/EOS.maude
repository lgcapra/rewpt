in ../PT-NET2
in BAG-SPLIT
in MAP-PROD


*** this definition of EOS uses an alternative (simpler) definition of object-net types and introduces
*** a synchronization map between EOS transitions and object-net transitions 
*** trivial view of a PT-Net
view Net from TRIV to PT-NET is 
 sort Elt to Net .
endv

*** net-types are defined as a map from strings (place-labels) to nets
fmod NET-TYPES is
   pr MAP+{String,Net} * (sort Map{String,Net} to NeTypeS, sort Entry{String,Net} to EntrySN, op emptyM to emptyNeTypeS) .
   var L : String .
   var N : Net .
   var T : NeTypeS .
   op welldef : NeTypeS -> Bool . *** characterizes well defined net-types
 ceq welldef(T) = false if repeatedKeys?(T)  .
 ceq welldef(L |-> N ; T) = false if not(welldef(N)) .
  eq welldef(T) = true [owise] .
endfm


*** this module defines the synchronization between EOS transitions and (sets of) object-net transitions
fmod SYNCHRO is
   pr SET+{Tran} . 
   pr MAP+{Tran,Map+{String,Bag{Tran}}} * (sort Map{Tran,Map+{String,Bag{Tran}}} to Syncmap, sort Entry{Tran,Map+{String,Bag{Tran}}} to EntrySync, 
                                         op emptyM : -> Map{Tran,Map+{String,Bag{Tran}}} to emptySync,
                                         op emptyM : -> Map{String,Bag{Tran}} to emptyMapSTbag, op nil to emptyTbag) .

   vars M M' : Syncmap .
   var MS MS' : Map{String,Bag{Tran}} .
   vars T T' : Tran .
   var S : String .
   var B : Bag{Tran} .
   var E : EntrySync .
   op synchronized : Syncmap Tran -> Bool .
   eq synchronized(emptySync, T) = false .
   eq synchronized(E ; M , T) = $synchronized(E, T) or-else synchronized(M, T) [owise] .
   op $synchronized : EntrySync Tran -> Bool .
  ceq $synchronized(T' |-> (S |-> B ; MS), T) = true if B[T] > 0 .
   eq $synchronized(E, T) = false [owise] .     
endfm


*** structure of a system-net
fmod EOS-NET is
   pr PT-NET .
   pr NET-TYPES .
   pr SYNCHRO .
   pr SET+{Imatrix} * (op emptyS to emptySetQ) .
   sort Sysnet .
   op ___ : Net NeTypeS Syncmap -> [Sysnet] [ctor] . *** juxtaposition of a net and net-types -- note the use of a kind
   op net : Sysnet -> Net .
   op netypes : Sysnet -> NeTypeS .
   op synchro : Sysnet -> Syncmap .
   var N  : Net .
   var Ty : NeTypeS .
   var Sy  : Syncmap .
   var T  : Tran .
   var Q  : Imatrix .
   var MS : Map{String,Bag{Tran}} .
   eq net(N Ty Sy) = N .
   eq netypes(N Ty Sy) = Ty .
   eq synchro(N Ty Sy) = Sy .
 cmb N Ty Sy : Sysnet if welldef(N) and-then welldef(Ty) and-then not(repeatedKeys?(Sy)) and-then submap(N, Sy) 
                        and-then coherent(Sy, Ty) . *** characterization of well-formed EOS nets
   op submap : Net Syncmap -> Bool . *** verifies that Net keys are a subset of Syncmap keys 
   eq submap(T |-> Q ; N, T |-> MS ; Sy) = submap(N, Sy) .
   eq submap(emptyN, Sy) = true .
   eq submap(N, Sy) = false [owise] .
   op coherent : Syncmap NeTypeS -> Bool . *** verifies the coherence of a synch map vs a net-types map
   eq coherent(Sy, Ty) = true .
   *** definition of coherent
   *** ...
   op partition : ImatrixT NeTypeS -> Set{Imatrix} [memo] . *** partition a transition's incidence matrix into sub-matrices with places of the same type
   *** definition of partition
   *** ...
  endfm

*** this module defines the firing-map for an EOS, which associates to each EOS transition a
*** set of possible (i.e., enabled) firing modes
fmod FIRING-MAP is 
  pr MAP+{Tran,Set+{Map+{Place,Bag{Bag{Place}}}}} * (
    sort Set{Map+{Place,Bag{Bag{Place}}}} to Set{Map{Place,Bag{Bag{Place}}}}, sort NeSet{Map+{Place,Bag{Bag{Place}}}} to NeSet{Map{Place,Bag{Bag{Place}}}} ,
    sort Map{Tran,Set+{Map+{Place,Bag{Bag{Place}}}}} to Map{Tran,Set{Map{Place,Bag{Bag{Place}}}}},
    sort Entry{Tran,Set+{Map+{Place,Bag{Bag{Place}}}}} to Entry{Tran,Set{Map{Place,Bag{Bag{Place}}}}},
    op emptyM : -> Map{Tran,Set+{Map+{Place,Bag{Bag{Place}}}}} to emptyFiringMap,
    op emptyS to emptySetMapPbag2 ) .
endfm

*** marked system-net, i.e., EOS
 fmod EOSYS is
   pr EOS-NET + (MAP-PROD{Place,Bag{Bag{Place}}} + BAG-SPLIT{Bag{Place}} + BAG-DECOMP{Place} + FIRING-MAP) * 
                    (op nil : -> Bag{Place} to emptyPbag, 
                     op nil : -> Bag{Bag{Place}} to emptyPbag2, op emptySetBag to emptySetPbag2,
                     op emptyS to emptySetPbag2, op emptyM to emptyEosMark, 
                     op emptyMapS to emptyMapSetPbag2, op emptySetM to emptySetMapPbag2,
                     op emptySetBag2 to emptySetPbag2, op emptyBag2 to emptyPbag2
                     ***, sort Map{Place,Bag{Bag{Place}}} to Sysnetmark, sort Entry{Place,Bag{Bag{Place}}} to SysnetmarkP,
                    ) .  

 
   sort Eosystem .
   *** op __ : Sysnet Sysnetmark -> [Eosystem] [ctor] . 
   op __ : Sysnet Map{Place,Bag{Bag{Place}}} -> [Eosystem] [ctor] . 
   op sysnet  : Eosystem -> Sysnet .
   *** op sysmark : Eosystem -> Sysnetmark .
   op sysmark : Eosystem -> Map{Place,Bag{Bag{Place}}} .
   
   var S : Sysnet .
   var M : Map{Place,Bag{Bag{Place}}} .
   var E : Eosystem .
   var MS :  Map{Place,Set{Bag{Bag{Place}}}} .
   var SM :  Set{Map{Place,Bag{Bag{Place}}}} .
   vars B B' : Bag{Place} .
   var BB : Bag{Bag{Place}} .
   var P : Place .
   var T : Tran .
   vars K K' : NzNat .
   eq sysnet(S M)  = S .
   eq sysmark(S M) = M .

  cmb S M : Eosystem if not(repeatedKeys?(M)) . *** and-then places(net(S)) subset keySet(M) .
   
   op keySet : Map{Place,Bag{Bag{Place}}} -> Set{Place} . *** to remove - use MAP-SET instead 
   *** the following operators help calculate the firing instances of an EOS transition

   *** calculates the set of EOS firing instance (each denoted by a map (input) places-bags of Pbags)
   *** given an Input function (i.e., a bag) and an EOS marking (a map places-bags of Pbags)
   op firinginstances : Bag{Place} Map{Place,Bag{Bag{Place}}}  -> [Set{Map{Place,Bag{Bag{Place}}}}] . *** undefined if the map is empty
   eq firinginstances(B, M) = prod(localinstances(B, M)) .
   op localinstances  : Bag{Place} Map{Place,Bag{Bag{Place}}}  -> Map{Place,Set{Bag{Bag{Place}}}} .
   eq localinstances(B, M) = $localinstances(B, M, emptyMapSetPbag2) .
   op $localinstances : Bag{Place} Map{Place,Bag{Bag{Place}}}  Map{Place,Set{Bag{Bag{Place}}}} -> Map{Place,Set{Bag{Bag{Place}}}} .
   eq $localinstances(emptyPbag, M, MS) = MS .
   eq $localinstances(K . P + B, (P |-> BB ; M), MS) = $localinstances(B, M, (MS ; P >> split(BB, K))) .  *** core equation: place P of I(O) inc. matrix is marked
   eq $localinstances(K . P + B, M, MS) = emptyMapSetPbag2 [owise].  *** place P of I(O) inc. matrix is NOT marked
   
   *** main version of firinginstances (builds on the overloaded operator above) 
   op firinginstances : Eosystem Tran -> [Set{Map{Place,Bag{Bag{Place}}}}] .
   eq firinginstances(E, T) = firinginstances(I(net(sysnet(E))[T]), sysmark(E)) .
   
   *** calculates the set of firing instances for each EOS transition (taking account of synchronizations)
   op firingmap :  Eosystem -> Map{Tran, Set{Map{Place,Bag{Bag{Place}}}}} [memo] .

   *** auxiliary op: sum the (nested) bags involved in a firing instance referring to places of the same type to get the flat bag to distribute over the output places  
   op flat : Map{Place,Bag{Bag{Place}}} String -> Bag{Place} .
   *** should be defined in a generico module
   op flat : Bag{Bag{Place}} -> Bag{Place} .
   *** distributes the pre-calculated sum of markings corresponding to an EOS firing instance (1st arg)
   *** to the output places (2nd arg); the places of two bags (i.e., the firing instance and the ouput places) are assumed of the same type
   *** builds on decompose(sub) defined in BAG-SPLIT 
   op distribute : Bag{Place} Bag{Place} ->  [Set{Map{Place,Bag{Bag{Place}}}}] . *** undefined if the 2nd arg is null
   
   *** operators performing the sum/difference between EOS markings (firing instances)
   op _+_ : Map{Place,Bag{Bag{Place}}} Map{Place,Bag{Bag{Place}}} -> Map{Place,Bag{Bag{Place}}} [assoc comm id: emptyEosMark] .
   op _-_ : Map{Place,Bag{Bag{Place}}} Map{Place,Bag{Bag{Place}}} -> Map{Place,Bag{Bag{Place}}} [gather (E e) right id: emptyEosMark] .
   

   *** calculates the possible firing effects of a transition instance (taking synchronizations into account) 
   op firings : ImatrixT Map{Place, Bag{Bag{Place}}} Syncmap -> [Set{Map{Place, Bag{Bag{Place}}}}] . 
endfm

in ../PT-EMU2

mod EOS-EMU is
  pr EOSYS .
  inc PT-EMU .
  var FM : Map{Tran, Set{Map{Place,Bag{Bag{Place}}}}} . *** the whole firing map
  var TI : Entry{Tran, Set{Map{Place,Bag{Bag{Place}}}}} . *** a transition firing instance (firing map's entry)
  var T : Tran .
  var NeFS : NeSet{Map{Place,Bag{Bag{Place}}}} .
  var FS : Set{Map{Place,Bag{Bag{Place}}}} . *** a firing set
  vars I O M M' : Map{Place,Bag{Bag{Place}}} . *** a firing instance/EOS marking
  vars N N' : Net .
  vars SN SN' : Sysnet .
  var Ty : NeTypeS .
  var Sy : Syncmap .
  var Q : Imatrix .
  var S : String .
  vars J K : NzNat .
  vars B B' : Bag{Place} .
  var B2 : Bag{Bag{Place}} .

  rl [selectinst] : I U NeFS => I . *** non-deterministic extraction of a firing instance from a set 
  
 *** crl [fireinst] : N Ty Sy M (T |-> I U FS ; FM) => E firingmap(E) 
 ***                   if N' ; T |-> Q := N /\ firings(T |-> Q, I, Sy) => O /\ E := N Ty Sy ((M - I) + O)   .

 crl [firetinst] : N Ty Sy M  => N Ty Sy (M - I) + O
                    if N' ; T |-> Q := N /\ firingmap(N Ty Sy M)[T] => I /\ firings(T |-> Q, I, Sy) => O  .

 crl [firetaut] : SN (p(J,S) |-> K . B + B2) => SN (p(J,S) |-> (K . B - 1 . B) + 1 . B' + B2)
                    if N (S |-> (T |-> Q ; N') ; Ty) Sy := SN /\ not(synchronized(Sy, T)) /\ (T |-> Q) B => (T |-> Q) B' .  
endm

*** example used in EOS paper (the EOS net consists of a single transition)
mod SIMPLE-EOS is
  inc EOS-EMU . 
 ops net type1 type2 : -> Net .
  op netype  : -> NeTypeS .
  op m0  : -> Map{Place,Bag{Bag{Place}}} .
  op eosnet  : -> Sysnet .
  op sync : -> Syncmap .

  eq net =  t(1, "sys") |-> [1 . p(1,"net1") + 1 . p(2,"net1")+ 1 . p(3, "net2"), 1 . p(4, "net1") + 1 . p(5, "net2")+ 1 . p(6, "net2"), emptyPbag]  .
  eq type1 = t(1, "") |-> [1 . p(1, "a1"), 1 . p(2, "b1"), emptyPbag] .
  eq type2 = t(2, "") |-> [1 . p(1, "a2") + 1 . p(2, "b2"), 1 . p(3, "c2"), emptyPbag] .
  eq netype = "net1" |-> type1  ; "net2" |-> type2 .
  eq sync = t(1, "sys") |-> ("net1" |-> 1 . t(1, "") ; "net2" |-> 1 . t(2, "") ) .  
  eq eosnet = net netype sync .
  eq m0 =  p(1,"net1") |-> 1 . emptyPbag + 1 . (1 . p(1, "a1") + 1 . p(2, "b1"));  
           p(2,"net1") |-> 1 . 1 . p(1, "a1") ; p(3,"net2") |-> 1 . (1 . p(1, "a2") + 1 . p(2, "b2")) .
endm