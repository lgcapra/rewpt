in ../PT-SYS+

*** a multi-marking is defined as a bag of bags on net places
fmod MULTI-MARKING is
 pr BAG{BagP} * ( sort Bag{BagP} to Multimark, sort NeBag{BagP} to NeMultimark, sort Set{BagP} to SetBagP, sort NeSet{BagP} to NeSetBagP,
                   op nil to nilMultiM, op empty to emptySetBagP) .
  
endfm

*** trivial view of a PT-Net
view Net from TRIV to PT-NET is 
 sort Elt to Net .
endv

*** map from places to net-types
fmod NET-TYPE is
  pr MAP+{Place,Net} * (sort Map{Place,Net} to NeType, sort Entry{Place,Net} to EntryPN, op emptyM to emptyNeType)
                     * (sort Set{Place} to SetP, sort NeSet{Place} to NeSetP, op empty to emptyP ) .
endfm

*** alternative map from strings (place-labels) to net-types
fmod NET-TYPES is
   pr MAP+{String,Net} * (sort Map{String,Net} to NeTypeS, sort Entry{String,Net} to EntrySN, op emptyM to emptyNeTypeS) .
endfm

*** a multi-marked PT net
fmod MULTI-SYS is
   pr PT-NET .
   pr MULTI-MARKING .
   sort Multisys .
   op __ : Net Multimark -> Multisys [ctor] . *** juxtaposition of a net and a multi-marking
endfm

*** structure of a system-net
fmod EOS-NET is
  pr PT-NET .
  pr NET-TYPE .
  sort Sysnet .
  op __ : Net NeType -> [Sysnet] [ctor] . *** juxtaposition of a net and net-types
  
  vars N N'  : Net .
  vars S S' : Sysnet .
  vars T T' : NeType .
  var P : Place .
 
cmb N (P |-> N', T) : Sysnet if welldef(N) and-then repeatedKeys?((P |-> N', T)) == false and-then in(N, P) .
endfm


*** trivial view of a multi-marking
view Multimark from TRIV to MULTI-MARKING is 
 sort Elt to Multimark .
endv

*** marking of a system-net
fmod EOS-MARKING is
  pr MAP+{Place,Multimark} * (sort Map{Place,Multimark} to Sysnetmark, sort Entry{Place,Multimark} to SysnetmarkP, op emptyM to emptySysnetM) .
endfm

*** marked system-net, i.e., EOS
fmod EOSYS is
  pr EOS-NET .
  pr EOS-MARKING .
  sort Eosystem .
  op __ : Sysnet Sysnetmark -> Eosystem [ctor] . *** juxtaposition of a net and net-types
endfm