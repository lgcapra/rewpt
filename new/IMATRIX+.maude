in BAGP+
in TRAN
in ATYPE

fmod IMATRIX is
 pr BAGP .
 pr ATYPE .
 sort Imatrix .
 op [_,_,_] : BagP BagP BagP -> Imatrix [ctor] .
 vars X Y Z X' Y' Z' : BagP .
 var P P' : Place .
 
 op remove : Imatrix Place -> Imatrix .
 eq remove([X,Y,Z], P) = [set(X,P,0),set(Y,P,0),set(Z,P,0)] .
 
 op _<_ : Imatrix Imatrix -> Bool . *** strict total-order between matrices based on lt relation between bags (based in turn on lex12)
 eq [X,Y,Z] < [X',Y',Z'] = X lt X' or-else X == X' and-then (Y lt Y' or-else Y == Y' and-then Z lt Z') .

 ops I O H : Imatrix -> BagP .
 eq I([X,Y,Z]) = X .
 eq O([X,Y,Z]) = Y .
 eq H([X,Y,Z]) = Z .

 op _(_) : Imatrix Atype -> BagP . *** introduced for convenience
 var Q : Imatrix .
 var a : Atype .
 eq Q(i) = I(Q) .
 eq Q(o) = O(Q) .
 eq Q(h) = H(Q) .

 op in :  Imatrix Place -> Bool . *** test the existence of a place
 var K : NzNat .
 eq in([X + K . P, Y, Z], P) = true .
 eq in([X, Y + K . P, Z], P) = true .
 eq in([X, Y, Z + K . P], P) = true .
 eq in(Q, P) = false [owise] .

 op places : Imatrix -> SetP .
 eq places([X,Y,Z]) = support(X), support(Y), support(Z) .
 
 op swap : Imatrix Place Place -> Imatrix .
 eq swap([X,Y,Z], P, P') = [swap(X,P,P'),swap(Y,P,P'),swap(Z,P,P')] .
endfm