in ../shared/BAG-AND-SET
*** in ../shared/COMP-PAIR-LIST
in ../shared/COMP-PAIR-LIST-NEW
in PLACE

fmod BAGP is
 *** pr BAG{Place} * ( op nil to nilP) .
 pr BAG-AND-SET{Place} * ( sort Bag{Place} to Pbag, sort NeBag{Place} to NePbag, op nil to nilP, 
                           sort Set{Place} to Pset, sort NeSet{Place} to NePset, op emptyS to emptyPset) .
 pr COMP-PAIR-LIST+{Nat<, Place<} * (sort Pair{Nat<,Place<} to PairNP, sort NeList{Nat<,Place<} to NeListNP, sort List{Nat<,Place<} to ListNP, op emptyListXY to emptyListNP) .
 
 vars P P' $P : Place . 
 vars K K' : NzNat .
 vars N N' : Nat .
 vars B B' : Pbag .
 var W : String .
 var S : Pset .
 var LNP : ListNP . 
 
 *** operators helpful for canonization
 op swap : Pbag Place Place -> Pbag .  *** swaps two places
 op replace : Pbag Place Place -> Pbag . *** replaces the first place with the second one
 eq swap(K . P  + K' . P' + B, P, P')  = K . P' +  K' . P + B .
 eq swap(K . P  + B, P, P')  = K . P' + B [owise] .
 eq swap(K . P' + B, P, P')  = K . P  + B [owise] .
 *** eq swap(K . P  + B, P, P')  = K . P' + swap(B, P, P')  . *** slightly less efficient
 *** eq swap(K . P' + B, P, P')  = K . P  + swap(B, P, P')  .
 eq swap(B, P, P')  = B [owise] .
 
 eq replace(K . P + B, P, P') = K . P' + B .
 eq replace(B, P, P') = B [owise] .
 
 *** helpful?
 *** op labMap  : Pbag String -> Pset . *** returns the set of places with a certain label
 *** eq labMap(B, W) = $labMap(B, W, emptyPset) .
 *** op $labMap : Pbag String Pset ->  Pset .
 *** eq $labMap(nilP, W, S) = S . 
 *** eq $labMap(K . p(N,W) + B, W, S) = $labMap(B, W, S U p(N,W)) .
 *** eq $labMap(K . P + B, W, S) = $labMap(B, W, S)  [owise] .

 *** extracts the sub-bag with a certain label out of a bag
 op extract : Pbag String -> Pbag .
 eq extract(B, W) = $extract(B, W, nilP) .
 op $extract : Pbag String Pbag -> Pbag .
 eq $extract(nilP, W, B) = B .
 eq $extract(K . p(N,W) + B, W, B') = $extract(B, W, K . p(N,W) +  B') . 
 eq $extract(K . P + B, W, B') = $extract(B, W, B') [owise] .
 
 *** in alternative, we might define toList in BAG, then reuse extract
 op toList : Pbag String -> ListNP . *** builds an (unordered) list of pairs < weight ; el > out of a bag -- considers places with a certain label
 eq toList(B, W) = $toList(B, W, emptyListNP) .
 op $toList : Pbag String ListNP -> ListNP .
 eq $toList(nilP, W, LNP) = LNP .
 eq $toList(K . p(N,W) + B, W, LNP) = $toList(B, W, < K ; p(N,W) > LNP) . 
 eq $toList(K . P + B, W, LNP) = $toList(B, W, LNP) [owise] .
 
 ops toList toListS toListS1 : Pbag -> ListNP . *** builds (un)ordered list of pairs < weight ; el > out of a bag, by considering places with empty label
 eq toList(B) = toList(B, "") .
 eq toListS(B) = sort(toList(B)) . *** builds an ordered list of pairs out os a bag  
 eq toListS1(B) = sort1(toList(B)) . *** builds an ordered list of pairs out os a bag 


 op _lt_ : Pbag Pbag -> Bool . *** maps to the lexicographic order of lists of (comparable) pairs
 eq B lt B' = toListS(B) lt toListS(B') . 
 op cmp1 : Pbag Pbag -> Nat . *** compares the wights of the corresponding (sorted1) lists
 eq cmp1(B, B') = cmp1(toListS1(B), toListS1(B')) .
 op _<1_ : Pbag Pbag -> Bool . *** maps to the lexicographic order of weights 
 eq B <1 B' = cmp1(B, B') == 1 .
endfm


view Pbag from TRIV to BAGP is 
 sort Elt to Pbag .
endv

*** default total-order
view Pbag< from STRICT-TOTAL-ORDER to BAGP is 
 sort Elt to Pbag .
 op _<_ to _lt_ . 
endv
