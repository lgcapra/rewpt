in ../shared/BAG-AND-SET
in ../shared/MAP+
in LIST-NAT-PLACE

fmod BAGP is
 pr BAG-AND-SET{Place} * ( sort Bag{Place} to Pbag, sort NeBag{Place} to NePbag, op nil to nilP, 
                           sort Set{Place} to Pset, sort NeSet{Place} to NePset, op emptyS to emptyPset) .
 pr LIST-NAT-PLACE .
 
 vars P P' $P : Place . 
 vars K K' : NzNat .
 vars N N' : Nat .
 vars B B' : Pbag .
 vars W W' : String .
 var S : Pset .
 var LNP : List{Nat,Place} . 
 *** set of places with a given label
 op support : Pbag String -> Pset . 
 eq support(B, W) = $support(B, W, emptyPset) .  
 op $support : Pbag String Pset -> Pset . 
 eq $support(nilP, W, S) = S . 
 eq $support(K . p(N,W) + B, W, S) = $support(B, W, S U p(N,W)) .
ceq $support(K . p(N,W') + B, W, S) = $support(B, W, S) if W =/= W' .
 *** used in net algebra 
 op prefix : Pbag String -> Pbag .
 eq prefix(B, W) = prefix&offset(B, 0, W) . 
 op prefix&offset : Pbag Nat String -> Pbag .
 eq prefix&offset(nilP, N, W) = nilP .
 eq prefix&offset(K . P + B, N, W) = K . prefix&offset(P, N, W) + prefix&offset(B, N, W) .    
 
 *** canonization part
 op replace : Pbag Place Place -> Pbag . *** replaces the first place with the second one
 eq replace(K . P + B, P, P') = K . P' + B .
 op swap : Pbag Place Place -> Pbag .  *** swaps two places
 eq replace(B, P, P') = B [owise] .
 eq swap(K . P  + K' . P' + B, P, P')  = K . P' +  K' . P + B .
 eq swap(K . P  + B, P, P')  = K . P' + B [owise] .
 eq swap(K . P' + B, P, P')  = K . P  + B [owise] .
 *** eq swap(K . P  + B, P, P')  = K . P' + swap(B, P, P')  . *** slightly less efficient
 *** eq swap(K . P' + B, P, P')  = K . P  + swap(B, P, P')  .
 eq swap(B, P, P')  = B [owise] .
 
 *** in alternative, we might define toList in BAG, then reuse extract
 op toList : Pbag String -> List{Nat,Place} . *** builds an (unordered) list of pairs < weight ; el > out of a bag -- considers places with a certain label
 eq toList(B, W) = $toList(B, W, emptyListNP) .
 op $toList : Pbag String List{Nat,Place} -> List{Nat,Place} .
 eq $toList(nilP, W, LNP) = LNP .
 eq $toList(K . p(N,W) + B, W, LNP) = $toList(B, W, < K ; p(N,W) > LNP) . 
 eq $toList(K . P + B, W, LNP) = $toList(B, W, LNP) [owise] .
 op toList  : Pbag -> List{Nat,Place} .     *** builds (un)ordered list of pairs < weight ; el > out of a bag, by considering places with ANY (before empty) label
 eq toList(B) = $toList(B, emptyListNP) .
 op $toList : Pbag List{Nat,Place} -> List{Nat,Place} .
 eq $toList(nilP, LNP) = LNP .
 eq $toList(K . P + B, LNP) = $toList(B, < K ; P > LNP) . 
 
 var C : Nat .
 op toListS : Nat Pbag -> List{Nat,Place} . *** the 1st arg identifies the sorting 
 eq toListS(C, B)  = sort(C, toList(B)) .   *** builds an ordered list of pairs out of a bag  using the usual list lex order (0) ([memo] ?) or the lex order based on weights (1)
 *** the same as above, for the list-view
 var L  : List{Nat,Place} . var X : Pair{Nat,Place} .
 op replace : List{Nat,Place} Place Place -> List{Nat,Place} . 
 eq replace(emptyListNP, P, P') = emptyListNP . 
 eq replace(< K ; P > L, P , P') = < K ; P' > L .
 eq replace(X L, P, P') = X replace(L, P, P') [owise] .
 op swap : List{Nat,Place} Place Place -> List{Nat,Place} . 
 eq swap(emptyListNP, P, P') = emptyListNP . 
 eq swap(< K ; P > L, P , P') = < K ; P' > replace(L, P', P) .
 eq swap(< K ; P' > L, P , P') = < K ; P > replace(L, P, P') .
 eq swap(X L, P, P') = X swap(L, P, P') [owise] .
 *** back conversion (places with a given label)
 op toBag : List{Nat,Place} String -> Pbag .
 eq toBag(LNP, W) = $toBag(LNP, W, nilP) .
 op $toBag : List{Nat,Place} String Pbag  -> Pbag  .
 eq $toBag(emptyListNP, W, B) = B .
 eq $toBag(< K ; p(N,W) > LNP, W, B) = $toBag(LNP, W, B + K . p(N,W)) . 
 eq $toBag(< K ; P > LNP, W, B) = $toBag(LNP, W, B) [owise] .
 *** back conversion 
 op toBag : List{Nat,Place}  -> Pbag . 
 eq toBag(LNP) = $toBag(LNP, nilP) .
 op $toBag : List{Nat,Place} Pbag  -> Pbag  .
 eq $toBag(emptyListNP, B) = B .
 eq $toBag(< K ; P > LNP, B) = $toBag(LNP, B + K . P) . 

 *** defined for convenience (and to satisfy th STRICT-WEAK-ORDER+)
 op lt : Nat Pbag Pbag -> Bool . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq lt(C, B , B') = lex(C, toListS(C, B), toListS(C, B')) .
 *** defined for convenience 
 op cmp : Nat Pbag Pbag -> Nat . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq cmp(C, B , B') = cmp(C, toListS(C, B), toListS(C, B')) .
 *** defined for convenience
 ops _<_  _<1_  _<2_ : Pbag Pbag -> Bool .
 eq B <  B' = lt(0, B, B') .
 eq B <1 B' = lt(1, B, B') .
 eq B <2 B' = lt(2, B, B') .
endfm


view Pbag from TRIV to BAGP is 
 sort Elt to Pbag .
endv

*** strict-total-order view
view Pbag< from STRICT-TOTAL-ORDER to BAGP is 
 sort Elt to Pbag . 
endv

*** strict-weak-order view
view Pbag+< from STRICT-WEAK-ORDER+ to BAGP is 
 sort Elt to Pbag . 
endv

*** set-view of a bag (defined for convenience)
view Pset from TRIV to BAGP is
 sort Elt to Pset .
endv

*** modular definition of a Pbag, based on place labels
fmod BAGP-MOD is
 pr MAP+{String,Pbag} * (sort Map{String,Pbag} to PbagMap, sort Entry{String,Pbag} to PbagLab, op emptyM to nilPmap) .
  *** extracts the sub-bag with a certain label out of a bag
 vars B B' : Pbag .
 vars P P' $P : Place . 
 vars K K' : NzNat .
 vars N N' : Nat . 
 var W : String .
 *** extracts the sub-bag of a given label from a bag
 op extract : Pbag String -> Pbag .
 eq extract(B, W) = $extract(B, W, nilP) .
 op $extract : Pbag String Pbag -> Pbag .
 eq $extract(nilP, W, B) = B .
 eq $extract(K . p(N,W) + B, W, B') = $extract(B, W, K . p(N,W) +  B') . 
 eq $extract(K . P + B, W, B') = $extract(B, W, B') [owise] .
 var M : PbagMap .
 *** gets the label map out of a bag -- places in the map have all an empty label (for efficiency)
 op toLabMap : Pbag -> PbagMap .
 eq toLabMap(B) = $toLabMap(B, nilPmap) .
 op $toLabMap : Pbag PbagMap -> PbagMap .
 eq $toLabMap(nilP, M) = M .
 eq $toLabMap(K . p(N, W) + B, M ; W |-> B') = $toLabMap(B, M ; W |-> B' + K . p(N, ""))  .  
 eq $toLabMap(K . p(N, W) + B, M) = $toLabMap(B, M ;  W |-> K . p(N, "")) [owise] .

endfm