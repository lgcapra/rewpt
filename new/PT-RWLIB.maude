in PT-SYS+
*** in CAN-PT-SYS.maude

fmod PT-RWLIB is
 protecting PT-SYS .
 *** protecting CAN-PT-SYS .
 sort Atype . *** arc type
 ops i o h : -> Atype [ctor] .
 op w : Net Tran Place Atype -> [Nat] . ***get an arc's weight
 op setw : Net Tran Place Atype Nat  -> Net . ***set an arc
 op setwS : Net Tran Place Atype Nat  -> Net . ***set an arc in a safe way
 ops remove : Place Net -> Net .
 var N N' : Net .
 var T : Tran .
 var P : Place .
 var I O H M : BagP .
 var Q : Imatrix .
 var K K' : NzNat .
 var Y : Nat .
 var A : Atype .
 eq w(N, T, P, i) =  In(N,T)[P] .
 eq w(N, T, P, o) = Out(N,T)[P] .
 eq w(N, T, P, h) = Inh(N,T)[P] .
 ceq setw(N, T, P, i, Y) =  N, T |-> [Y . P, nilP, nilP] if N[T] = undefined .
 eq setw((N, T |-> [I,O,H]), T, P, i, Y) =  N, T |-> [set(I, P, Y), O, H]  .
ceq setw(N, T, P, o, Y) =  N, T |-> [nilP, Y . P, nilP] if N[T] = undefined .
 eq setw((N, T |-> [I,O,H]), T, P, o, Y) =  N, T |-> [I, set(O, P, Y), H]  .
ceq setw(N, T, P, h, Y) =  N if N[T] = undefined .
 eq setw((N, T |-> [I,O,H]), T, P, h, Y) =  N, T |-> [I, O, set(H, P, Y)]  .
 eq remove(P, (T |-> Q, N) ) = T |-> remove(Q, P), remove(P, N) .
 eq remove(P, emptyN) = emptyN .
ceq setwS(N, T, P, A, Y) = N' if N' := setw(N, T, P, A, Y) /\ N' =/= emptyN .  
 eq setwS(N, T, P, A, Y) = N [owise] .
endfm