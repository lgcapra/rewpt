in BAGP
in TRAN
in ATYPE

fmod IMATRIX is
 pr BAGP .
 pr ATYPE .
 sort Imatrix .
 op [_,_,_] : Pbag Pbag Pbag -> Imatrix [ctor] .
 
 vars X Y Z X' Y' Z' : Pbag .
 vars P P' : Place .
 vars N N' C1 C2 : Nat .
 vars Q Q' : Imatrix .
 
 op remove : Imatrix Place -> Imatrix .
 eq remove([X,Y,Z], P) = [set(X,P,0),set(Y,P,0),set(Z,P,0)] .
 
 ops I O H : Imatrix -> Pbag .
 eq I([X,Y,Z]) = X .
 eq O([X,Y,Z]) = Y .
 eq H([X,Y,Z]) = Z .

 op _(_) : Imatrix Atype -> Pbag [prec 23] . *** introduced for convenience
 var a : Atype .
 eq Q(i) = I(Q) .
 eq Q(o) = O(Q) . 
 eq Q(h) = H(Q) .

 op in :  Imatrix Place -> Bool . *** test the existence of a place
 var K : NzNat .
 eq in([X + K . P, Y, Z], P) = true .
 eq in([X, Y + K . P, Z], P) = true .
 eq in([X, Y, Z + K . P], P) = true .
 eq in(Q, P) = false [owise] .

 op places : Imatrix -> Pset .
 eq places([X,Y,Z]) = support(X) U support(Y) U support(Z) .

 *** canonization ops
 op swap : Imatrix Place Place -> Imatrix .
 eq swap([X,Y,Z], P, P') = [swap(X,P,P'),swap(Y,P,P'),swap(Z,P,P')] .
endfm

view Imatrix from TRIV to IMATRIX is 
 sort Elt to Imatrix . 
endv


fmod LIMATRIX is *** list(s)-view of a local incidence matrix
 pr IMATRIX .
 sort Limatrix .
 op [_,_,_] : List{Nat,Place} List{Nat,Place} List{Nat,Place} -> Limatrix [ctor] . 
 
 vars Q Q' : Imatrix .
 vars X Y Z X' Y' Z' : Pbag .
 vars P P' : Place .
 vars N N' C1 C2 : Nat .
 vars IL IL' OL OL' HL HL' : List{Nat,Place} .
 vars LX LY LZ LX' LY' LZ' : List{Nat,Place} .
 vars LQ LQ' : Limatrix . 
 *** lists-view 
 op toList : Imatrix String -> Limatrix . *** takes places with a given label
 op toList : Imatrix -> Limatrix . *** takes places with label ""
 var  S : String . 
 eq toList([X,Y,Z], S)  = [toList(X,S),  toList(Y,S),  toList(Z,S) ] .
 eq toList(Q)  = toList(Q, "") .
 *** anologous to Imatrix
 ops I O H : Limatrix -> List{Nat,Place} .
 eq I([LX,LY,LZ]) = LX .
 eq O([LX,LY,LZ]) = LY .
 eq H([LX,LY,LZ]) = LZ .
 op _(_) : Limatrix Atype -> List{Nat,Place} [prec 23] . 
 eq LQ(i) = I(LQ) .
 eq LQ(o) = O(LQ) . 
 eq LQ(h) = H(LQ) . 
 *** canonization
 op swap : Limatrix Place Place -> Limatrix .
 eq swap([LX,LY,LZ], P, P') = [swap(LX,P,P'),swap(LY,P,P'),swap(LZ,P,P')] .
 
 op sort : Nat Limatrix -> Limatrix .
 eq sort(N, [LX, LY, LZ]) = [sort(N, LX), sort(N, LY), sort(N, LZ)] .

 op cmpQ : Nat Limatrix Limatrix -> Nat . *** maps to the lexicographic order defined on lists of (comparable) pairs -- we need to use a different name
ceq cmpQ(N, [LX,LY,LZ], [LX',LY',LZ']) = C1 if C1 := cmp(N, LX, LX') /\ C1 =/= 0 . 
ceq cmpQ(N, [LX,LY,LZ], [LX',LY',LZ']) = C1 if C1 := cmp(N, LY ,LY') /\ C1 =/= 0 [owise]. 
 eq cmpQ(N, [LX,LY,LZ], [LX',LY',LZ']) = cmp(N, LZ, LZ') [owise] .
 
 op lt : Nat Limatrix Limatrix -> Bool . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq lt(N, LQ, LQ') = cmpQ(N, LQ, LQ') == 1 .
 *** defined for convenience
 op lt : Nat Imatrix Imatrix -> Bool . *** maps to the lexicographic orders defined on lists of (comparable) pairs
 eq lt(N, Q, Q') = cmpQ(N, sort(N, toList(Q)), sort(N, toList(Q'))) == 1 .

 ops _<_  _<1_ : Limatrix Limatrix -> Bool .
 eq LQ < LQ'  = lt(0, LQ , LQ') .
 eq LQ <1 LQ' = lt(1, LQ , LQ') .
 *** defined for convenience
 ops _<_  _<1_ : Imatrix Imatrix -> Bool .
 eq Q < Q'  = lt(0, Q , Q') .
 eq Q <1 Q' = lt(1, Q , Q') .
endfm

view Limatrix from TRIV to LIMATRIX is 
 sort Elt to Limatrix . 
endv

*** strict weak order
view Imatrix< from STRICT-WEAK-ORDER to LIMATRIX is 
 sort Elt to Imatrix . 
endv

*** parametric strict weak order
view Limatrix+< from STRICT-WEAK-ORDER+ to LIMATRIX is 
 sort Elt to Limatrix . 
endv

*** strict total order
view Limatrix< from STRICT-TOTAL-ORDER to LIMATRIX is 
 sort Elt to Limatrix . 
endv

*** parametric strict total order
view Imatrix< from STRICT-TOTAL-ORDER+ to LIMATRIX is 
 sort Elt to Imatrix . 
endv