in PT-FMS.maude

mod RWPT-FMS is
 *** NOTE constant op M denotes the model's parameter 
 pr PT-FMS .
 vars N N' : Net .
 vars Tload Tfail Tass Tline : Tran .
 vars P0 P1 P2 P3 P4 P5 P6 P7 P8 PF : Place .
 var S : BagP .
 var K : NzNat .
 *** crl [r1] : (N, t(0,"load") |-> [2 . p(1,"start"), 1 . P2 + 1 . P3, nilP], Tline |-> [1 . P3, 1 . P5, 1 . PF] , t(3,"ass") |-> [1 . P4 + 1 . P5, 1 . p(6,"end"), nilP], Tfail |-> [1 . p(0,"focc"), 1 . PF, nilP]) S + 1 . PF
 ***        => (N, t(0,"load") |-> [1 . p(1,"start"), 1 . P2, nilP],  t(3,"ass") |-> [2 . P4, 1 . p(6,"end"), nilP]) set(S, P3, 0) + S[P3] . P2 + 1 . p(0,"focc") if S[P5] = 0 .
 *** crl [r2] : N S  => net S + 1 . p(0,"focc") + M . P3 - M . P2 - 1 . p(7,"faulty") - 1 . p(8,"faulty")  if 1 . P2 := Out(N, t(0,"load")) /\  1 . P2 + 1 . P3 := Out(net, t(0,"load"))  /\ dead(N S) .
 
 *** version with null labels
 crl [r1] : (N, t(0,"") |-> [2 . p(1,""), 1 . P2 + 1 . P3, nilP], Tline |-> [1 . P3, 1 . P5, 1 . PF] , t(3,"") |-> [1 . P4 + 1 . P5, 1 . p(6,""), nilP], Tfail |-> [1 . p(0,""), 1 . PF, nilP]) S + 1 . PF
         => (N, t(0,"") |-> [1 . p(1,""), 1 . P2, nilP],  t(3,"") |-> [2 . P4, 1 . p(6,""), nilP]) set(S, P3, 0) + S[P3] . P2 + 1 . p(0,"") if S[P5] = 0 .
 crl [r2] : N S  => net S + 1 . p(0,"") + M . P3 - M . P2 - 1 . p(7,"") - 1 . p(8,"")  if 1 . P2 := Out(N, t(0,"")) /\  1 . P2 + 1 . P3 := Out(net, t(0,""))  /\ dead(N S) .
 
 *** alternative versions
 *** crl [r2] : N S   => net S + 1 . p(0,"focc") + M . P3 - M . P2 - 1 . p(7,"faulty") - 1 . p(8,"faulty")  if 1 . P2 := Out(N, t(0,"load")) /\  1 . P2 + 1 . P3 := Out(net, t(0,"load"))  /\ dead(N S) 
 ***                   /\ (net S + 1 . p(0,"focc") + M . P3 - M . P2 - 1 . p(7,"faulty") - 1 . p(8,"faulty") :: System) .
 *** crl [r3] : N S  => setw(N, t(0,"load"), p(9), i, 1) S if S[p(0,"focc")] = 0 /\ S[p(9)] = 0 /\ K . p(1,"start") := In(N,t(0,"load")) .
 *** crl [r3] : N S  => setw(N, t(0,"load"), p(9), i, 1) S if S[p(0,"focc")] = 0 /\ S[p(9)] = 0  /\ in(N, p(9)) = false .

 *** paramatric rules (with null labels) using canonization
 var C : Bool .
 crl [pr1] : (N, Tload |-> [2 . P1, 1 . P2 + 1 . P3, nilP] , Tline |-> [1 . P3, 1 . P5, 1 . PF], Tass |-> [1 . P4 + 1 . P5, 1 . P6, nilP], Tfail |-> [1 . P0, 1 . PF, nilP]) S + 1 . PF C 
         =>  (N, Tload |-> [1 . P1, 1 . P2, nilP], Tass |-> [2 . P4, 1 . P6, nilP]) set(S, P3, 0) + S[P3] . P2 + 1 . P0 false if S[P5] = 0 .
 crl [pr2] : (N, Tline |-> [1 . P2, 1 . P4, 1 . PF], Tass |-> [2 . P4, 1 . P6, nilP]) S + K . P2 + 1 . PF C => net 1 . p(0,"") + M . p(3,"") + (K - M . p(2,"")) + S[P4] . p(4,"") false if  K >= 2 * M - 1 .
endm

