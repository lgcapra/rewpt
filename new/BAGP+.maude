in ../shared/Vplace
in ../shared/BAG
in ../shared/COMP-PAIR-LIST

in PLACE<

fmod BAGP is
 pr BAG{Place} * ( sort Bag{Place} to BagP, sort NeBag{Place} to NeBagP, sort Set{Place} to SetP, sort NeSet{Place} to NeSetP,
                   op nil to nilP, op empty to emptyP) .
 pr COMP-PAIR-LIST{Nat<, PLACE<} * (sort Pair{Nat<,PLACE<} to PairNP, sort NeList{Nat<,PLACE<} to NeListNP,
                                       sort List{Nat<,PLACE<} to ListNP, op emptyListXY to emptyListNP) .
 
 vars P P' $P : Place . 
 vars K K' : NzNat .
 vars B B' : BagP .
 vars N N' : Nat .
 var W : String .
 var S : SetP .
 *** operators helpful for canonization
 *** swap two elements, if one is missing operates like a replace 
 op swap : BagP Place Place -> BagP .  *** swaps two places in a bag
 eq swap(K . P  + B, P, P')  = K . P' + swap(B, P, P')  .
 eq swap(K . P' + B, P, P')  = K . P  + swap(B, P, P')  .
 eq swap(B, P, P')  = B [owise].

 op labMap  : BagP String -> SetP . *** returns the set of places with a certain label
 eq labMap(B, W) = $labMap(B, W, emptyP) .
 op $labMap : BagP String SetP ->  SetP .
 eq $labMap(nilP, W, S) = S . 
 eq $labMap(K . p(N,W) + B, W, S) = $labMap(B, W, (S, p(N,W)) ) .
 eq $labMap(K . P + B, W, S) = $labMap(B, W, S)  [owise] .

 op makeList : BagP -> ListNP . *** builds an (unordered) list of pairs < weight ; el > out of a bag
 eq makeList(B) = $makeList(B, emptyListNP) .
 var LNP : ListNP . 
 op $makeList : BagP ListNP -> ListNP .
 eq $makeList(nilP, LNP) = LNP .
eq  $makeList(K . P + B, LNP) = $makeList(B, < K ; P > LNP) . 
 op makeSList : BagP -> ListNP . *** builds an ordered list of pairs < weight ; el > out of a bag
 eq makeSList(B) = sort(makeList(B)) .

 op _lt_ : BagP BagP -> Bool . *** maps on the order relation of lists of comparable pairs (the sequence of weights is considered first)
 eq B lt B' = makeSList(B) lex12 makeSList(B') . 
endfm