in PT-SYS


fmod CAN-PT-SYS is
 inc PT-SYS .
 
 vars Q Q' : Imatrix .
 vars S S' : String .
 vars I J : Nat .
 var K : NzNat .
 vars P P' P'' : Place .
 vars T T' : Tran .
 vars SYS  SYS' : System .
 vars N  N' : Net .
 vars B M0 M0' : Pbag .
 vars SP SP' : Pset .
 vars LP LP' : Plist .
 vars LT LT'  : Tlist .
 var NeLP : NePlist .
 var NeSP : NePset .
 var NeLT : NeTlist .
 vars Sy Sy' Sy'' : System .
 var C : Bool .
 var A : Atype .
 
 *** new: top-level canonization ops
 var LNP : List{Nat,Place} .
 vars QL QL' : Limatrix .
 vars LQL LQL'  : List{Limatrix} .
 vars LELQL LELQL' : ListOfList{Limatrix} .
 vars NeLELQL NeLELQL' : NeListOfList{Limatrix} .
 
 
 op canonize : Net Pbag -> NeListOfList{Limatrix} . *** defined for convenience/debug
 eq canonize(N, B) = canonize( regroup(N, B), placeList(N)) .
 op canonize : System -> System . 
 eq canonize(N B) = toSys(canonize(N, B) ) .
 op toSys : NeListOfList{Limatrix} -> [System] .
 eq toSys({[LNP, emptyListNP, emptyListNP]} NeLELQL) = toNet(NeLELQL) toBag(LNP) . 
 op toNet : NeListOfList{Limatrix} -> Net .
 eq toNet(NeLELQL) = $toNet(toOrdList(NeLELQL), 0, emptyN) .
 op $toNet : List{Limatrix} Nat Net -> Net .
 eq $toNet(emptyListQL, I, N) = N .
 eq $toNet(QL LQL, I, N) = $toNet(LQL, I + 1, t(I,"") |-> toMat(QL) ; N) .
 

 *** RICONTROLLARE (per ora non usato)
 *** the following operators replace place indices so that they lie in 0...n-1
 *** assume that the list of places holds all and only the nodes with a certain label, sorted in increasing order
 *** DOMANDA: SI POSSONO DEFINIRE SENZA USARE Plist? ANOCORA NECESSARI? 
 op replacePindices : System String -> System . *** replace the place indices (with a given label) so that they range throug 0..n-1 
 op replaceIndexP : System Plist -> System . 
 eq replaceIndexP(Sy, emptyPlist) = Sy .
ceq replaceIndexP(Sy, NeLP) = Sy if subscript(last(NeLP)) + 1 == size(NeLP) .
 eq replaceIndexP(Sy, NeLP) = $replaceIndexP(Sy, NeLP, 0) [owise] .
 op $replaceIndexP : System Plist Nat -> System . 
 eq $replaceIndexP(Sy, emptyPlist, I) = Sy .
 eq $replaceIndexP(Sy, p(I, S) LP, I) = $replaceIndexP(Sy, LP, I + 1) . 
*** ceq $replaceIndexP(Sy, p(J, S) LP, I) = $replaceIndexP(replace(Sy, p(J, S), p(I, S)), LP, I + 1) if I =/= J .

 op replaceIndexP : System -> System .
 eq replaceIndexP(Sy) = replaceIndexP(Sy, placeList(Sy)) .

endfm