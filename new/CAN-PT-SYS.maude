*** partially ordered set
fmod PO-SET{X :: STRICT-WEAK-ORDER+} is
   pr SET{STRICT-WEAK-ORDER+}{X} * (sort Set{STRICT-WEAK-ORDER+}{X} to Set{X}, sort NeSet{STRICT-WEAK-ORDER+}{X} to NeSet{X}) .
   vars X X' : X$Elt .
   vars S S' : Set{X} .
   var K : Nat .
   *** calculates the minimum (set) w.r.t. a given partial order (better, swo); in the case of a total order, the minimum is a singleton
   op min  : Nat NeSet{X} -> NeSet{X} . 
   eq min(K, (X , S)) =  $min(K, S, X) .
   op $min : Nat Set{X} NeSet{X} -> NeSet{X} .
   var Y : NeSet{X} .
   eq $min(K, empty, Y) = Y .
  ceq $min (K, (X , S), (X', S')) = $min(K, S, X) if lt(K, X, X') . *** X less than X': clears up the current minimum
  ceq $min (K, (X , S), (X', S')) = $min(K, S, (X', S')) if lt(K, X', X)  . *** X' less than X
   eq $min (K, (X , S), Y) = $min(K, S, (X, Y))  [owise] . *** X and X' are "equivalent"
endfm

*** p.o. set of lists of lists of incidence matrices  
fmod PO-SET-LIST-MAT is 
  pr PO-SET{NestedMatList+<} * (sort Set{NestedMatList+<} to SetOfListOfList{Limatrix}, sort NeSet{NestedMatList+<} to NeSetOfListOfList{Limatrix},
                          op empty to emptySetOfNestedQL, op _,_ to _U_)  .
  
  vars ELQL  : Elist{Limatrix} .
  vars LELQL : ListOfList{Limatrix} .
  vars SLELQL SLELQL' :  SetOfListOfList{Limatrix} . 
  var I : Nat .
  op $reorder  : Nat SetOfListOfList{Limatrix} ->  SetOfListOfList{Limatrix} . *** reorder a set of lists of lists of matrices (views) -- naming it $reorder instead of reorder avoids inf. rec.
  op $reorder  : Nat NeSetOfListOfList{Limatrix} ->  NeSetOfListOfList{Limatrix} . 
  eq $reorder (I, SLELQL) = $reorder (I, SLELQL, emptySetOfNestedQL) .  
  op $reorder : Nat SetOfListOfList{Limatrix} SetOfListOfList{Limatrix} ->  SetOfListOfList{Limatrix} . *** reorder a lists of lists of matrices (views)
  eq $reorder(I, emptySetOfNestedQL, SLELQL) = SLELQL . 
  eq $reorder(I, LELQL U SLELQL, SLELQL') = $reorder(I, SLELQL, reorder(I, LELQL) U SLELQL') . 
endfm


in PT-SYS

*** canonization algorithm for PT systems
fmod CAN-PT-SYS is
 pr PT-SYS .
 pr PO-SET-LIST-MAT .
 vars I J : Nat .
 vars K K' : NzNat .
 vars P P' P'' : Place .
 vars T T' : Tran .
 vars B M0 M0' : Pbag .
 vars Q Q' : Imatrix .
 vars SYS  SYS' Sy Sy' Sy'' : System .
 vars N  N' : Net .
 vars SP SP' : Pset .
 vars LP LP' : Plist .
 vars LT LT'  : Tlist .
 var NeSP : NePset .
 var NeLP : NePlist .
 var NeLT : NeTlist .
 var A : Atype .
 vars W W' : String .
 var  LNP : List{Nat,Place} .
 vars QL QL' : Limatrix .
 vars LQL LQL'  : List{Limatrix} .
 var ELQL  : Elist{Limatrix} .
 var LELQL : ListOfList{Limatrix} .
 var NeLELQL  : NeListOfList{Limatrix} .
 
 *** new: top-level canonization ops
 op canonize : System -> System . 
 eq canonize(N B) = toSys(canonize( regroup(N B), placeList(N)) ) .
 op toSys : NeListOfList{Limatrix} -> [System] .
 eq toSys({[LNP, emptyListNP, emptyListNP]} NeLELQL) = toNet(NeLELQL) toBag(LNP) . 
 op toNet : NeListOfList{Limatrix} -> Net .
 eq toNet(NeLELQL) = $toNet(toOrdList(NeLELQL), 0, emptyN) .
 op $toNet : List{Limatrix} Nat Net -> Net .
 eq $toNet(emptyListQL, I, N) = N .
 eq $toNet(QL LQL, I, N) = $toNet(LQL, I + 1, t(I,"") |-> toMat(QL) ; N) .

 *** regroups PT's (list-views of) matrices into similarity blocks prefixed by the marking (convenience op)
 op regroup : System -> ListOfList{Limatrix} .
 eq regroup(N B) = {[toListS(0,B),emptyListNP,emptyListNP]} reorder(0, partition(1, matListS(1, N))) .
  *** real top operator : canonizes a list of (list-views of) incidence matrices
 op canonize : NeListOfList{Limatrix} NePlist -> NeListOfList{Limatrix} .
 eq canonize(NeLELQL, P) = NeLELQL . *** canonization makes sense if there are at least two places
 eq canonize(NeLELQL, P NeLP) = canonize(min(0, $reorder(0, canonizeP(NeLELQL, P, NeLP))), NeLP) . *** 0 aggiunto per provare PO-SET-.. 
 *** single canonization step (builds on $minGtIdxNet) -- acts recursively (see case 3 below)
 op canonizeP : NeListOfList{Limatrix} Place NePlist -> NeSetOfListOfList{Limatrix} .
 eq canonizeP(NeLELQL, P, NeLP) = canonizeP(NeLELQL, P, $minGtIdxNet(NeLELQL, P), NeLP) .
 op canonizeP : NeListOfList{Limatrix} Place Pset NePlist -> SetOfListOfList{Limatrix} . *** overloaded op (for convenience)
 eq [case1] : canonizeP(NeLELQL, P, emptyPset, NeLP) = NeLELQL . *** base case 1
 eq [case2] : canonizeP(NeLELQL, P, P', NeLP) = swap(NeLELQL, P, P') . *** base case 2
 eq [case3] : canonizeP(NeLELQL, P, NeSP, NeLP) = $canonizeP(NeLELQL, P, NeSP, NeLP) [owise] . *** card(NeSP) > 1, possible branches (potentially critical)
 op $canonizeP : NeListOfList{Limatrix} Place Pset NePlist -> SetOfListOfList{Limatrix} . *** iterates over the Pset
 eq $canonizeP(NeLELQL, P, P' U SP, NeLP) = canonize(swap(NeLELQL, P, P'), NeLP) U $canonizeP(NeLELQL, P, SP, NeLP) .
 eq $canonizeP(NeLELQL, P, emptyPset, NeLP) = emptySetOfNestedQL .
 
 op minGtIdxSys : System Place -> Pset . *** convenience op (for debug)
 eq minGtIdxSys(N B, P) = $minGtIdxNet(regroup(N B), P) .
 op $minGtIdxNet : ListOfList{Limatrix} Place -> Pset .
 eq $minGtIdxNet({ }, P) = emptyPset .
ceq $minGtIdxNet(ELQL LELQL, P) = SP if SP := minGtIdxLM(arg(ELQL), P) /\ SP =/= emptyPset . *** standard
*** ceq $minGtIdxNet(ELQL LELQL, P) = SP if SP := minGtiIdxLM2(arg(ELQL), P) /\ SP =/= emptyPset . *** new -- considers one element at a time
 eq $minGtIdxNet(ELQL LELQL, P) = $minGtIdxNet(LELQL, P) [owise] .
 *** given a list (block) of assumed similar (list-views of) matrices and a place p, returns the set of places candidate to swap with p
 vars NeLQL NeLQL' : NeList{Limatrix} .
 *** new: operates "vertically" considering each Q-list independently from the others of the block -- esploits code reuse INUTILE??
 op minGtiIdxLM2 : List{Limatrix} Place -> Pset . 
 eq minGtiIdxLM2(emptyListQL, P) =  emptyPset .
ceq minGtiIdxLM2(QL LQL, P) = SP if SP := minGtIdxLM(QL, P) /\ SP =/= emptyPset . *** NOTE "calls" minGtIdxLM passing a single Q-list
 eq minGtiIdxLM2(QL LQL, P) = minGtiIdxLM2(LQL, P) [owise] .
 *** standard: operates "horizontally" vonsidering first the i, then the o, finally the h components
 op minGtIdxLM : List{Limatrix} Place -> Pset . 
ceq minGtIdxLM(LQL, P) = SP if SP := minGtIdxLM(LQL, i, P) /\ SP =/= emptyPset . *** first the i component
ceq minGtIdxLM(LQL, P) = SP if SP := minGtIdxLM(LQL, o, P) /\ SP =/= emptyPset [owise] . *** then o
 eq minGtIdxLM(LQL, P) = minGtIdxLM(LQL, h, P) [owise] . *** finally h
 *** separately considers the i,o,h components of each matrix
 op maxint : -> NzNat [memo] .
 eq maxint = 10000000000000 .
 op minGtIdxLM : List{Limatrix} Atype Place -> Pset . 
 eq minGtIdxLM(LQL, A, P) = $minGtIdxLM(LQL, A, P, maxint, emptyPset) .  *** start-up
 op $minGtIdxLM : List{Limatrix} Atype Place NzNat Pset -> Pset .
 eq $minGtIdxLM(emptyListQL, A, P, K, SP) = SP .
ceq $minGtIdxLM(QL LQL, A, P, K, SP) = $minGtIdxLM(LQL, A, P, K', SP') if < SP' ; K' > := $minGtIdx(QL(A), P, K, SP) .
 *** base op. acting on a (list-view of a) bag: this version returns a pair of values (a set of places and a weight)
 *** Given LNP, P, LP, if A = {P' in B s.t. index(P') >= index(P) and LP != 0 => P' in LP} is not 0 then returns the elements {P'} of A with MINIMAL-weight s.t. if B[P] > 0 then B[P'] <= B[P] (possibly including P).
 *** If A is empty returns P if B[P] > 0, otherwise 0 .
 *** If the retuned list's size is > 1 the 2nd el. is that with the greatest idx (also if P is not in the list!) 
 op $minGtIdx : List{Nat,Place} Place NzNat Pset -> Pair{Pset,Nat} . *** base op.: works on a single list (bag) *** THIS VERSION TAKES LABELS INTO ACCOUNT
 eq $minGtIdx(emptyListNP, P, K, SP) = < SP ; K > .
ceq $minGtIdx(< K' ; p(I,W') > LNP, p(J, W), K, SP) = < SP ; K > if K' > K or-else K == K' and-then W' > W . *** we assume that the list's weights (and secondly labels) are in increasing order 
ceq $minGtIdx(< K  ; p(I,W) > LNP, p(J,W), K, SP) = $minGtIdx(LNP, p(J,W), K, SP U p(I,W))  if I >= J .
ceq $minGtIdx(< K' ; p(I,W) > LNP, p(J,W), K, SP) = $minGtIdx(LNP, p(J,W), K', p(I,W))  if K' <  K /\ I >= J .
 eq $minGtIdx(NP:Pair{Nat,Place} LNP, P, K, SP) = $minGtIdx(LNP, P, K, SP) [owise] .
 
 *** RICONTROLLARE (per ora non usato)
 *** the following operators replace place indices so that they lie in 0...n-1
 *** assume that the list of places holds all and only the nodes with a certain label, sorted in increasing order
 *** DOMANDA: SI POSSONO DEFINIRE SENZA USARE Plist? ANOCORA NECESSARI? 
 op replacePindices : System String -> System . *** replace the place indices (with a given label) so that they range throug 0..n-1 
 op replaceIndexP : System Plist -> System . 
 eq replaceIndexP(Sy, emptyPlist) = Sy .
ceq replaceIndexP(Sy, NeLP) = Sy if subscript(last(NeLP)) + 1 == size(NeLP) .
 eq replaceIndexP(Sy, NeLP) = $replaceIndexP(Sy, NeLP, 0) [owise] .
 op $replaceIndexP : System Plist Nat -> System . 
 eq $replaceIndexP(Sy, emptyPlist, I) = Sy .
 eq $replaceIndexP(Sy, p(I, W) LP, I) = $replaceIndexP(Sy, LP, I + 1) . 
ceq $replaceIndexP(Sy, p(J, W) LP, I) = $replaceIndexP(replace(Sy, p(J, W), p(I, W)), LP, I + 1) if I =/= J .
 op replaceIndexP : System -> System .
 eq replaceIndexP(Sy) = replaceIndexP(Sy, placeList(Sy)) .

endfm